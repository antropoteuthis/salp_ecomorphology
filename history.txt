morpho <- readDiscreteCharacterData("binDevelopmentalTransitions.nex")
morpho <- readDiscreteCharacterData("binDevelopmentalTransits.nex")
moves    = VectorMoves()
monitors = VectorMonitors()
phylogeny <- readTrees("Chordata18Srev_morph.tree")[1]
rate_pr := phylogeny.treeLength() / 10
rate_01 ~ dnExp(rate_pr)
rate_10 ~ dnExp(rate_pr)
moves.append( mvScale( rate_01, weight=2 ) )
moves.append( mvScale( rate_10, weight=2 ) )
r ~ dnDirichlet( [1,1,1,1,1,1,1,1] )
r.setValue( simplex(1,1,3,3,3,3,1,1) )
for (i in 1:4) {
    for (j in 1:4) {
        rates[i][j] <- 0.0
    }
}
rates
rates[1][2] := r[1] # 00->10
rates[1][3] := r[2] # 00->01
rates[2][1] := r[3] # 10->00
rates[2][4] := r[4] # 10->11
rates[3][1] := r[5] # 01->00
rates[3][4] := r[6] # 01->11
rates[4][2] := r[7] # 11->10
rates[4][3] := r[8] # 11->01
rates
Q := fnFreeK(rates)
Q
P <- Q.getTransitionProbabilities(rate=0.1)
P
pi ~ dnDirichlet([1,1])
pi.setValue( simplex(1,3) )
for (i in 1:4) {
    for (j in 1:4) {
        rates[i][j] <- 0.0
    }
}
rates[1][2] := r[1] * pi[2] * pi[1] # 00->10
rates[1][3] := r[1] * pi[1] * pi[2] # 00->01
rates[2][1] := r[3] * pi[1] * pi[1] # 10->00
rates[2][4] := r[2] * pi[2] * pi[2] # 10->11
rates[3][1] := r[2] * pi[1] * pi[1] # 01->00
rates[3][4] := r[3] * pi[2] * pi[2] # 01->11
rates[4][2] := r[4] * pi[2] * pi[1] # 11->10
rates[4][3] := r[4] * pi[1] * pi[2] # 11->01
rates
Q := fnFreeK(rates)
Q
P <- Q.getTransitionProbabilities(0.1)
P
mu_morpho ~ dnExponential( 1.0 )
moves.append( mvScale(mu_morpho,lambda=1, weight=2.0) )
phyMorpho ~ dnPhyloCTMC(tree=phylogeny, branchRates=mu_morpho, Q=Q, type="Standard")
phylogeny
phyMorpho.clamp(morpho)
mymodel = model(phylogeny)
monitors.append(mnModel(filename"RB_PCM/freeK_bintrans/mk.log",printgen=10))
monitors.append(mnModel(filename="RB_PCM/freeK_bintrans/mk.log",printgen=10))
monitors.append( mnScreen(printgen=100) )
monitors.append( mnJointConditionalAncestralState(tree=phylogeny,ctmc=phyMorpho,filename="RB_PCM/freeK_bintrans/bintrans.states",type="Standard",printgen=1,withTips=true,withStartStates=false))
mymcmc = mcmc(mymodel, monitors, moves, nruns=2, combine="mixed")
mymcmc.run(generations=1000, tuningInterval=200)
anc_states = readAncestralStateTrace("RB_PCM/freeK_bintrans/bintrans.states.txt")
anc_states = readAncestralStateTrace("RB_PCM/freeK_bintrans/bintrans.states")
anc_tree = ancestralStateTree(tree=phylogeny, ancestral_state_trace_vector=anc_states, include_start_states=false, file="RB_PCM/freeK_bintrans/bintrans.tree",burnin=0.25, summary_statistic="MAP", site=1)
writeNexus(anc_tree, filename="RB_PCM/freeK_bintrans/bintrans.tree")
q()
