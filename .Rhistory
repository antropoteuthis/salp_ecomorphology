install.packages(c("ape", "tidyverse", "phytools", "nlme", "vegan", "OUwie"))
install.packages("devtools")
library(wql)
library(wql)
install.packages("ggplot2")
install.packages("colorspace")
install.packages("ggplot2")
install.packages("tidyverse")
install.packages("datatable")
library(patchwork)
library(ggtree)
install.packages("ggtree")
install.packages("reshape2")
install.packages("data.table")
install.packages("surface")
install.packages("geiger")
install.packages("corHMM")
install.packages("ape")
install.packages("ape")
install.packages("ape")
install.packages("ape")
install.packages("ape")
install.packages("phytools")
install.packages("phangorn")
library(devtools)
install_github("liamrevell/phytools")
install.packages("~/Downloads/phangorn_2.6.2.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/phangorn_2.6.2.tar.gz", repos = NULL, type = "source")
install.packages("quadprog")
install.packages("igraph")
install.packages("fastrack")
install.packages("~/Downloads/phangorn_2.6.2.tar.gz", repos = NULL, type = "source")
install.packages("fastmatch")
install.packages("~/Downloads/phangorn_2.6.2.tar.gz", repos = NULL, type = "source")
install.packages("phytools")
install.packages("corHMM")
install.packages("bayou")
install_github("uyedaj/bayou")
install.packages("deSolve")
library(geiger)
install.packages("geiger")
install.packages("~/Downloads/deSolve_1.29.tar.gz", repos = NULL, type = "source")
install.packages("geiger")
install_github("uyedaj/bayou")
library(tidyverse)
library(wql)
library(patchwork)
require(data.table)
library(mgcv)
setwd("~/salp_ecomorphology/")
#Load data and label control rows
presens <- read.csv("respirometry_Kona21-22.tsv", header = T, sep = "\t", stringsAsFactors = F)
presens$Species[which(is.na(presens$Species))] <- "Control"
presens$Specimen[which(is.na(presens$Specimen))] <- "Control"
presens$Treatment %>% unique()
#Filter by plastic and intact treatments
presens <- presens[which(presens$Container=="Plastic" & presens$Treatment != "MgCl2"),]
#Filter by blastozooids
presens <- presens[which(presens$Stage != "Oozoid" & presens$Stage != "Oozoid+Stolon" | is.na(presens$Stage)),]
presens$Container.volume..ml.
presens$Sensor.ID
presens$Date
#Estimate absolute oxygen mg
ggplot(presens,aes(x=Specimen,y=O2..mg.L.))+geom_point(aes(col=Time.point..min.))+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
presens <- mutate(presens, abs_O2.mg. = O2..mg.L.*Container.volume..ml./1000)
ggplot(presens,aes(x=Specimen,y=abs_O2.mg.))+geom_point(aes(col=Container.volume..ml. %>% log()))+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(presens,aes(x=Sensor.ID,y=abs_O2.mg.))+geom_point(aes(col=Container.volume..ml. %>% log()))+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
presens <- read.csv("respirometry_Kona21-22.tsv", header = T, sep = "\t", stringsAsFactors = F)
presens$Species[which(is.na(presens$Species))] <- "Control"
presens$Specimen[which(is.na(presens$Specimen))] <- "Control"
#Filter by plastic and intact treatments
presens <- presens[which(presens$Container=="Plastic" & presens$Treatment != "MgCl2"),]
#Filter by blastozooids
presens <- presens[which(presens$Stage != "Oozoid" & presens$Stage != "Oozoid+Stolon" | is.na(presens$Stage)),]
#Fill in contained volume
presens$Container.volume..ml.[which(is.na(presens$Container.volume..ml.) & presens$Sensor.ID %in% c("P1","P2","P4","P5"))] <- 208
presens$Container.volume..ml.[which(is.na(presens$Container.volume..ml.) & presens$Sensor.ID == "P3 control")] <- 72
#Estimate absolute oxygen mg
ggplot(presens,aes(x=Specimen,y=O2..mg.L.))+geom_point(aes(col=Time.point..min.))+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(presens,aes(x=Specimen,y=abs_O2.mg.))+geom_point(aes(col=Container.volume..ml. %>% log()))+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(presens,aes(x=Specimen,y=O2..mg.L.))+geom_point(aes(col=Container.volume..ml. %>% log()))+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(presens,aes(x=Sensor.ID,y=O2..mg.L.))+geom_point(aes(col=Container.volume..ml. %>% log()))+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(presens,aes(x=Sensor.ID,y=abs_O2.mg.))+geom_point(aes(col=Species %>% log()))+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(presens,aes(x=Sensor.ID,y=O2..mg.L.))+geom_point(aes(col=Species)+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(presens,aes(x=Sensor.ID,y=O2..mg.L.))+geom_point(aes(col=Species))+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
presens <- mutate(presens, abs_O2.mg. = O2..mg.L.*Container.volume..ml./1000)
ggplot(presens,aes(x=Sensor.ID,y=O2..mg.L.))+geom_point(aes(col=Species))+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(presens,aes(x=Sensor.ID,y=abs_O2.mg.))+geom_point(aes(col=Species))+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(presens[which(presens$Time.point..min.>60),],aes(x=Sensor.ID,y=O2..mg.L.))+geom_point(aes(col=Species))+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(presens[which(presens$Time.point..min.>100),],aes(x=Sensor.ID,y=O2..mg.L.))+geom_point(aes(col=Species))+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(presens[which(presens$Time.point..min.>115),],aes(x=Sensor.ID,y=O2..mg.L.))+geom_point(aes(col=Species))+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(presens[which(presens$Time.point..min.>115),],aes(x=Sensor.ID,y=abs_O2.mg.))+geom_point(aes(col=Species))+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(presens[which(presens$Time.point..min.>115),],aes(x=Sensor.ID,y=abs_O2.mg.))+geom_point(aes(pch=Species))+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
#Subset controls and specimen measures
controls <- presens[which(presens$Specimen=="Control"),]
specimens <- presens[which(presens$Specimen != "Control"),]
specimens <- presens[which(presens$Specimen != "Control" & presens$Treatment == "Intact"),]
#Keep only controls with the largest jar volume and in case of a tie, those that report the highest O2 concentration (purportedly those with least organic matter decay).
controls <- controls %>%
group_by(Experiment, Time.point..min.) %>%
filter(Container.volume..ml. == max(Container.volume..ml.) & O2..mg.L. == max(O2..mg.L.)) %>% .[,-which(names(.)=="Sensor.ID" | names(.)=="Measurement")]
controls=unique(controls)
specimens_ko
specimens_ko <- presens[which(presens$Specimen != "Control" & presens$Treatment == "Anesthetized"),]
specimens_ko
specimens_swim
specimens_swim <- presens[which(presens$Specimen != "Control" & presens$Treatment == "Intact"),]
specimens_swim
controls_swim
#Subset controls and specimen measures
controls_swim <- presens[which(presens$Specimen=="Control" & presens$Treatment == "Intact" & str_detect(presens$Measurement.notes, "Paired")),]
controls_swim$Measurement.notes
controls_swim <- presens[which(presens$Specimen=="Control" & presens$Treatment == "Intact" & !str_detect(presens$Measurement.notes, "Paired")),]
controls_ko <-  presens[which(presens$Specimen=="Control" & presens$Treatment == "Anesthetized" & !str_detect(presens$Measurement.notes, "Paired")),]
controls_paired <- presens[which(presens$Specimen=="Control" & str_detect(presens$Measurement.notes, "Paired")),]
specimens_swim <- presens[which(presens$Specimen != "Control" & presens$Treatment == "Intact" & !str_detect(presens$Measurement.notes, "Paired"),]
specimens_ko <- presens[which(presens$Specimen != "Control" & presens$Treatment == "Anesthetized" & !str_detect(presens$Measurement.notes, "Paired"),]
specimens_paired <- presens[which(presens$Specimen != "Control" & & str_detect(presens$Measurement.notes, "Paired"),]
controls_swim <- presens[which(presens$Specimen=="Control" & presens$Treatment == "Intact" & !str_detect(presens$Measurement.notes, "Paired")),]
controls_ko <-  presens[which(presens$Specimen=="Control" & presens$Treatment == "Anesthetized" & !str_detect(presens$Measurement.notes, "Paired")),]
controls_paired <- presens[which(presens$Specimen=="Control" & str_detect(presens$Measurement.notes, "Paired")),]
specimens_swim <- presens[which(presens$Specimen != "Control" & presens$Treatment == "Intact" & !str_detect(presens$Measurement.notes, "Paired")),]
specimens_ko <- presens[which(presens$Specimen != "Control" & presens$Treatment == "Anesthetized" & !str_detect(presens$Measurement.notes, "Paired")),]
specimens_paired <- presens[which(presens$Specimen != "Control" & & str_detect(presens$Measurement.notes, "Paired")),]
specimens_paired <- presens[which(presens$Specimen != "Control" & str_detect(presens$Measurement.notes, "Paired")),]
View(specimens)
rm(specimens)
controls_swim <- presens[which(presens$Specimen=="Control" & presens$Treatment == "Intact" & !str_detect(presens$Measurement.notes, "Paired")),] %>%
group_by(Experiment, Time.point..min.) %>%
filter(Container.volume..ml. == max(Container.volume..ml.) & O2..mg.L. == max(O2..mg.L.)) %>% .[,-which(names(.)=="Sensor.ID" | names(.)=="Measurement")] %>% unique()
controls_ko <-  presens[which(presens$Specimen=="Control" & presens$Treatment == "Anesthetized" & !str_detect(presens$Measurement.notes, "Paired")),] %>%
group_by(Experiment, Time.point..min.) %>%
filter(Container.volume..ml. == max(Container.volume..ml.) & O2..mg.L. == max(O2..mg.L.)) %>% .[,-which(names(.)=="Sensor.ID" | names(.)=="Measurement")] %>% unique()
controls_paired <- presens[which(presens$Specimen=="Control" & str_detect(presens$Measurement.notes, "Paired")),] %>%
group_by(Experiment, Time.point..min.) %>%
filter(Container.volume..ml. == max(Container.volume..ml.) & O2..mg.L. == max(O2..mg.L.)) %>% .[,-which(names(.)=="Sensor.ID" | names(.)=="Measurement")] %>% unique()
#Join Specimens+Controls and subtract correcting for the difference in volume for specific O2 measurements
join_swim <- full_join(specimens_swim, controls_swim[c("Date","Experiment","Time.point..min.","abs_O2.mg.","Container.volume..ml.")],
by=c("Experiment","Time.point..min.","Date"), suffix=c("_animal","_control"))
join_swim <- mutate(join_swim, abs_O2.mg.specific = abs_O2.mg._animal-(abs_O2.mg._control*(Container.volume..ml._animal/Container.volume..ml._control)))
join_swim <- join_swim[which(!is.na(join_swim$Measurement)),]
View(join_swim)
ggplot(join_swim,aes(x=Specimen,y=abs_O2.mg.specific))+geom_point(aes(col=Container.volume..ml._animal %>% log()))+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
join_swim %>%
mutate(exbool = as.character(Experiment)) %>%
ggplot(aes(x=Time.point..min., y=abs_O2.mg.specific)) +
geom_point(aes(col= Species)) + ylab("O2 (mg)") +
geom_line(aes(col = Species, group=Specimen)) +
theme_bw()
join_ko <- full_join(specimens_ko, controls_ko[c("Date","Experiment","Time.point..min.","abs_O2.mg.","Container.volume..ml.")],
by=c("Experiment","Time.point..min.","Date"), suffix=c("_animal","_control"))
join_ko <- mutate(join_ko, abs_O2.mg.specific = abs_O2.mg._animal-(abs_O2.mg._control*(Container.volume..ml._animal/Container.volume..ml._control)))
join_ko <- join_ko[which(!is.na(join_ko$Measurement)),]
ggplot(join_ko,aes(x=Specimen,y=abs_O2.mg.specific))+geom_point(aes(col=Container.volume..ml._animal %>% log()))+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
join_ko %>%
mutate(exbool = as.character(Experiment)) %>%
ggplot(aes(x=Time.point..min., y=abs_O2.mg.specific)) +
geom_point(aes(col= Species)) + ylab("O2 (mg)") +
geom_line(aes(col = Species, group=Specimen)) +
theme_bw()
