names_prefix = "Zooid_"
)
keyvars %>% pivot_wider(
names_from = Number.1
values_from = c("X..mm.","Y..mm.","Z..mm."),
keyvars %>% pivot_wider(
names_from = Number.1,
values_from = c("X..mm.","Y..mm.","Z..mm."),
names_prefix = "Zooid_"
)
keyvars
raw <- read.csv("~/salp_ecomorphology/A001C0167_20210709184129_0001.csv", sep=',', header = T, stringsAsFactors = F)
raw <- read.csv("~/salp_ecomorphology/A001C0167_20210709184129_0001.csv", sep=',', header = T, stringsAsFactors = F, skip=4)
View(raw)
raw[,c(1:3,6:8,31)]
keyvars %>% pivot_wider(
names_from = Number.1,
values_from = c("X..mm.","Y..mm.","Z..mm."),
names_prefix = "Zooid_"
)
keyvars <- raw[,c(1:3,6:8,31)]
keyvars %>% pivot_wider(
names_from = Number.1,
values_from = c("X..mm.","Y..mm.","Z..mm."),
names_prefix = "Zooid_"
)
keyvars %>% pivot_wider(
names_from = Number,
values_from = c("X..mm.","Y..mm.","Z..mm."),
names_prefix = "Zooid_"
)
mutate(keyvars, is_junk = if(Number==0, 1))
mutate(keyvars, is_junk = if(Number==0){1})
mutate(keyvars, is_junk = 1*Number)
mutate(keyvars, is_junk = 1/Number)
mutate(keyvars, is_junk = 1/Number<Inf)
mutate(keyvars, is_junk = -(1/Number<Inf)_
mutate(keyvars, is_junk = isFALSE(1/Number<Inf))
mutate(keyvars, is_junk = 1/Number<Inf == FALSE)
mutate(keyvars, is_junk = (1/Number<Inf == FALSE))
mutate(keyvars, is_junk = (1/Number<Inf) == FALSE)
mutate(keyvars, is_junk = (1/Number<Inf) == FALSE %>% as.numeric())
mutate(keyvars, is_junk = (1/Number<Inf) == FALSE) -> keyvars
keyvars
keyvars$is_junk <- as.numeric(keyvars$is_junk)
keyvars
keyvars %>% pivot_wider(
names_from = Number,
values_from = c("X..mm.","Y..mm.","Z..mm."),
names_prefix = "Zooid_"
)
keyvars %>% pivot_wider(
names_from = is_junk,
values_from = c("X..mm.","Y..mm.","Z..mm."),
names_prefix = "Zooid_"
)
keyvars
keyvars %>% View()
keyvars %>% pivot_wider(
names_from = is_junk,
values_from = c("X..mm.","Y..mm.","Z..mm."),
names_prefix = "Zooid_"
) %>% View()
keyvars %>% pivot_wider(
names_from = Number,
values_from = c("X..mm.","Y..mm.","Z..mm."),
names_prefix = "Zooid_"
)
keyvars
keyvars %>% pivot_wider(
names_from = Number,
values_from = c("X..mm.","Y..mm.","Z..mm."),
names_prefix = "Zooid_"
)
keyvars %>% pivot_wider(
names_from = Number,
values_from = c("X..mm.","Y..mm.","Z..mm."),
names_prefix = "Zooid_"
) %>% names()
keyvars %>% pivot_wider(
names_from = Number,
values_from = c("X..mm.","Y..mm.","Z..mm."),
names_prefix = "Zooid_"
) %>% View()
raw <- read.csv("~/salp_ecomorphology/A001C0167_20210709184129_0001.csv", sep=',', header = T, stringsAsFactors = F, skip=4)
keyvars <- raw[,c(1:3,6:8,31)]
mutate(keyvars, is_junk = (1/Number<Inf) == FALSE) -> keyvars
keyvars %>% pivot_wider(
names_from = Number,
values_from = c("X..mm.","Y..mm.","Z..mm."),
names_prefix = "Zooid_"
)
raw <- read.csv("~/salp_ecomorphology/A001C0167_20210709184129_0001.csv", sep=',', header = T, stringsAsFactors = F, skip=4)
keyvars <- raw[,c(1:3,6:8,31)]
keyvars %>% pivot_wider(
names_from = Number,
values_from = c("X..mm.","Y..mm.","Z..mm."),
names_prefix = "Zooid_"
)
keyvars %>% pivot_wider(
names_from = Number,
values_from = c("X..mm.","Y..mm.","Z..mm."),
names_prefix = "Zooid_"
) -> keyvars
raw <- read.csv("~/salp_ecomorphology/A001C0167_20210709184129_0001.csv", sep=',', header = T, stringsAsFactors = F, skip=4)
keyvars <- raw[,c(1:3,6:8,31)]
keyvars %>% pivot_wider(
names_from = Number,
values_from = c("X..mm.","Y..mm.","Z..mm."),
names_prefix = "Zooid_"
) -> keyvars
keyvars
zooid_list <- list()
group_by(keyvars, Number)
group_by(keyvars, keyvars$Number)
raw <- read.csv("~/salp_ecomorphology/A001C0167_20210709184129_0001.csv", sep=',', header = T, stringsAsFactors = F, skip=4)
keyvars <- raw[,c(1:3,6:8,31)]
group_by(keyvars, keyvars$Number)
group_by(keyvars, Number)
group_split(keyvars, Number)
zooid_list <- group_split(keyvars, Number)
mutate(keyvars, is_junk = (1/Number<Inf) == FALSE) -> keyvars
keyvars$is_junk <- as.numeric(keyvars$is_junk)
keyvars %>% pivot_wider(
names_from = is_junk,
values_from = c("X..mm.","Y..mm.","Z..mm."),
) -> keyvars
keyvars
keyvars
keyvars <- raw[,c(1:3,6:8,31)]
mutate(keyvars, is_junk = (1/Number<Inf) == FALSE) -> keyvars
keyvars$is_junk <- as.numeric(keyvars$is_junk)
keyvars
keyvars %>% pivot_wider(
names_from = is_junk,
values_from = c("X..mm.","Y..mm.","Z..mm."),
) -> keyvars
keyvars <- raw[,c(1:3,6:8,31)]
mutate(keyvars, is_junk = (1/Number<Inf) == FALSE) -> keyvars
keyvars
rename(keyvars)
names(keyvars)
keyvars %>% pivot_wider(
names_from = is_junk,
values_from = c("X..mm.","Y..mm.","Z..mm."),
) -> keyvars
names(keyvars)
mutate(keyvars, is_junk = (1/Number<Inf) == FALSE) -> keyvars
keyvars$is_junk <- as.numeric(keyvars$is_junk)
keyvars %>% pivot_wider(
names_from = is_junk,
values_from = c("X..mm.","Y..mm.","Z..mm."),
) -> keyvars
names(keyvars)
names(keyvars) %>% str_replace_all("TRUE", "Junk") %>% str_replace_all("FALSE", "Zooid")
keyvars
names(keyvars) %>% str_replace_all("TRUE", "Junk") %>% str_replace_all("FALSE", "Zooid") -> names(keyvars)
keyvars
keyvars %>% pivot_wider(
id_cols = Time..mins.,
names_from = is_junk,
values_from = c("X..mm.","Y..mm.","Z..mm."),
) -> keyvars
keyvars <- raw[,c(1:3,6:8,31)]
mutate(keyvars, is_junk = (1/Number<Inf) == FALSE) -> keyvars
keyvars %>% pivot_wider(
id_cols = Time..mins.,
names_from = is_junk,
values_from = c("X..mm.","Y..mm.","Z..mm."),
) -> keyvars
keyvars
keyvars <- raw[,c(1:3,6:8,31)]
mutate(keyvars, is_junk = (1/Number<Inf) == FALSE) -> keyvars
keyvars %>% pivot_wider(
names_from = is_junk,
values_from = c("X..mm.","Y..mm.","Z..mm."),
) -> keyvars
View(keyvars)
names(keyvars) %>% str_replace_all("TRUE", "Junk") %>% str_replace_all("FALSE", "Zooid") -> names(keyvars)
left_join(group_split(keyvars, is_junk)[[1]], group_split(keyvars, is_junk)[[2]])
keyvars <- raw[,c(1:3,6:8,31)] %>% mutate(is_junk = (1/Number<Inf) == FALSE) -> keyvars
raw[,c(1:3,6:8,31)] %>% mutate(is_junk = (1/Number<Inf) == FALSE) -> keyvars
left_join(group_split(keyvars, is_junk)[[1]], group_split(keyvars, is_junk)[[2]])
full_join(group_split(keyvars, is_junk)[[1]], group_split(keyvars, is_junk)[[2]])
group_split(keyvars, is_junk)[[2]]
full_join(group_split(keyvars, is_junk)[[1]][,1:7], group_split(keyvars, is_junk)[[2]][,1:7])
full_join(group_split(keyvars, is_junk)[[1]][,1:7], group_split(keyvars, is_junk)[[2]][,1:7], suffix= c("Junk","Zooid"))
full_join(group_split(keyvars, is_junk)[[1]][,1:7], group_split(keyvars, is_junk)[[2]][,1:7], by=c("Filename","Frame","Time..mins."), suffix= c("Junk","Zooid"))
full_join(group_split(keyvars, is_junk)[[1]][,1:7], group_split(keyvars, is_junk)[[2]][,1:7], by=c("Filename","Frame","Time..mins.","Number"), suffix= c("Junk","Zooid"))
full_join(group_split(keyvars, is_junk)[[1]][,1:7], group_split(keyvars, is_junk)[[2]][,1:7], by=c("Filename","Frame","Time..mins."), suffix= c("Junk","Zooid"))
full_join(group_split(keyvars, is_junk)[[1]][,1:7],
group_split(keyvars, is_junk)[[2]][,1:7],
by=c("Filename","Frame","Time..mins."),
suffix= c("Junk","Zooid")) %>%
as.data.frame()
full_join(group_split(keyvars, is_junk)[[1]][,1:7],
group_split(keyvars, is_junk)[[2]][,1:7],
by=c("Filename","Frame","Time..mins."),
suffix= c("Junk","Zooid")) %>%
as.data.frame() %>% .[,c(-7,-11)]
full_join(group_split(keyvars, is_junk)[[1]][,1:7],
group_split(keyvars, is_junk)[[2]][,1:7],
by=c("Filename","Frame","Time..mins."),
suffix= c("Junk","Zooid")) %>%
as.data.frame() %>% .[,c(-7)]
full_join(group_split(keyvars, is_junk)[[1]][,1:7],
group_split(keyvars, is_junk)[[2]][,1:7],
by=c("Filename","Frame","Time..mins."),
suffix= c("Zooid","Junk")) %>%
as.data.frame() %>% .[,c(-7)]
full_join(group_split(keyvars, is_junk)[[1]][,1:7],
group_split(keyvars, is_junk)[[2]][,1:7],
by=c("Filename","Frame","Time..mins."),
suffix= c("Zooid","Junk")) %>%
as.data.frame()
full_join(group_split(keyvars, is_junk)[[1]][,1:7],
group_split(keyvars, is_junk)[[2]][,1:7],
by=c("Filename","Frame","Time..mins."),
suffix= c("Zooid","Junk")) %>%
as.data.frame() %>% .[,c(-11)]
tidy <- full_join(group_split(keyvars, is_junk)[[1]][,1:7],
group_split(keyvars, is_junk)[[2]][,1:7],
by=c("Filename","Frame","Time..mins."),
suffix= c("Zooid","Junk")) %>%
as.data.frame() %>% .[,c(-11)]
zooid_list <- group_split(tidy, NumberZooid)
zooid_list
z1 <- zooid_list[[1]]
z1
z1 %>% arrange(Frame) %>%
mutate(diff = Time..mins. - lag(Time..mins., default = first(Time..mins.)))
z1 %>% arrange(Frame) %>%
mutate(Delta_time_s = Time..mins. - lag(Time..mins., default = first(Time..mins.)))
z1 %>% arrange(Frame) %>%
mutate(Delta_time_s = Time..mins. - lag(Time..mins., default = first(Time..mins.))) %>%
mutate(Xd_mm = X..mm.Zooid - X..mm.Junk, Yd_mm = Y..mm.Zooid - Y..mm.Junk, Zd_mm =  Z..mm.Zooid - Z..mm.Junk)
z1 %>% arrange(Frame) %>%
mutate(Delta_time_s = Time..mins. - lag(Time..mins., default = first(Time..mins.))) %>%
mutate(Xd_mm = X..mm.Zooid - X..mm.Junk, Yd_mm = Y..mm.Zooid - Y..mm.Junk, Zd_mm =  Z..mm.Zooid - Z..mm.Junk) %>%
mutate(Delta_X_mm = Xd_mm - lag(Xd_mm, default = first(Xd_mm)),
Delta_Y_mm = Yd_mm - lag(Yd_mm, default = first(Yd_mm)),
Delta_Z_mm = Zd_mm - lag(Zd_mm, default = first(Zd_mm)))
z1 %>% arrange(Frame) %>%
mutate(Delta_time_s = Time..mins. - lag(Time..mins., default = first(Time..mins.))) %>%
mutate(Xd_mm = X..mm.Zooid - X..mm.Junk, Yd_mm = Y..mm.Zooid - Y..mm.Junk, Zd_mm =  Z..mm.Zooid - Z..mm.Junk) %>%
mutate(Delta_X_mm = Xd_mm - lag(Xd_mm, default = first(Xd_mm)),
Delta_Y_mm = Yd_mm - lag(Yd_mm, default = first(Yd_mm)),
Delta_Z_mm = Zd_mm - lag(Zd_mm, default = first(Zd_mm))) %>% View()
z1 %>% arrange(Frame) %>%
mutate(Delta_time_s = Time..mins. - lag(Time..mins., default = first(Time..mins.))) %>%
mutate(Xd_mm = X..mm.Zooid - X..mm.Junk, Yd_mm = Y..mm.Zooid - Y..mm.Junk, Zd_mm =  Z..mm.Zooid - Z..mm.Junk) %>%
mutate(Delta_X_mm = Xd_mm - lag(Xd_mm, default = first(Xd_mm)),
Delta_Y_mm = Yd_mm - lag(Yd_mm, default = first(Yd_mm)),
Delta_Z_mm = Zd_mm - lag(Zd_mm, default = first(Zd_mm))) %>%
mutate(Distance_mm = sqrt(Delta_X_mm^2 + Delta_Y_mm^2 + Delta_Z_mm^2))
z1 %>% arrange(Frame) %>%
mutate(Delta_time_s = Time..mins. - lag(Time..mins., default = first(Time..mins.))) %>%
mutate(Xd_mm = X..mm.Zooid - X..mm.Junk, Yd_mm = Y..mm.Zooid - Y..mm.Junk, Zd_mm =  Z..mm.Zooid - Z..mm.Junk) %>%
mutate(Delta_X_mm = Xd_mm - lag(Xd_mm, default = first(Xd_mm)),
Delta_Y_mm = Yd_mm - lag(Yd_mm, default = first(Yd_mm)),
Delta_Z_mm = Zd_mm - lag(Zd_mm, default = first(Zd_mm))) %>%
mutate(Distance_mm = sqrt(Delta_X_mm^2 + Delta_Y_mm^2 + Delta_Z_mm^2)) %>% View()
z1 %>% arrange(Frame) %>%
mutate(Delta_time_s = Time..mins. - lag(Time..mins., default = first(Time..mins.))) %>%
mutate(Xd_mm = X..mm.Zooid - X..mm.Junk, Yd_mm = Y..mm.Zooid - Y..mm.Junk, Zd_mm =  Z..mm.Zooid - Z..mm.Junk) %>%
mutate(Delta_X_mm = Xd_mm - lag(Xd_mm, default = first(Xd_mm)),
Delta_Y_mm = Yd_mm - lag(Yd_mm, default = first(Yd_mm)),
Delta_Z_mm = Zd_mm - lag(Zd_mm, default = first(Zd_mm))) %>%
mutate(Distance_mm = sqrt(Delta_X_mm^2 + Delta_Y_mm^2 + Delta_Z_mm^2)) %>%
mutate(Speed_mm_s = Distance_mm/Delta_time_s)
wrangle <- function(df){
df %>% arrange(Frame) %>%
mutate(Delta_time_s = Time..mins. - lag(Time..mins., default = first(Time..mins.))) %>%
mutate(Xd_mm = X..mm.Zooid - X..mm.Junk, Yd_mm = Y..mm.Zooid - Y..mm.Junk, Zd_mm =  Z..mm.Zooid - Z..mm.Junk) %>%
mutate(Delta_X_mm = Xd_mm - lag(Xd_mm, default = first(Xd_mm)),
Delta_Y_mm = Yd_mm - lag(Yd_mm, default = first(Yd_mm)),
Delta_Z_mm = Zd_mm - lag(Zd_mm, default = first(Zd_mm))) %>%
mutate(Distance_mm = sqrt(Delta_X_mm^2 + Delta_Y_mm^2 + Delta_Z_mm^2)) %>%
mutate(Speed_mm_s = Distance_mm/Delta_time_s) %>% return()
}
lapply(zooid_list,df)
lapply(zooid_list,wrangle)
wrangled_list <- lapply(zooid_list,wrangle)
View(wrangled_list)
wrangled_list[[1]]
wrangled_list[[1]] %>% View()
do.call(wrangled_list, rbind)
do.call(rbind, wrangled_list)
speed_data <- do.call(rbind, wrangled_list)
ggplot(speed_data, aes(Time..mins., Speed_mm_s))+geom_point(aes(color=NumberZooid))
ggplot(speed_data, aes(Time..mins., Speed_mm_s))+geom_point(aes(color=NumberZooid %>% as.factor()))
ggplot(speed_data, aes(Time..mins., Speed_mm_s))+geom_line(aes(color=NumberZooid %>% as.factor()))
wrangle <- function(df){
df %>% arrange(Frame) %>%
mutate(Delta_time_s = Time..mins. - lag(Time..mins., default = first(Time..mins.))) %>%
mutate(Xd_mm = X..mm.Zooid - X..mm.Junk, Yd_mm = Y..mm.Zooid - Y..mm.Junk, Zd_mm =  Z..mm.Zooid - Z..mm.Junk) %>%
mutate(Delta_X_mm = Xd_mm - lag(Xd_mm, default = first(Xd_mm)),
Delta_Y_mm = Yd_mm - lag(Yd_mm, default = first(Yd_mm)),
Delta_Z_mm = Zd_mm - lag(Zd_mm, default = first(Zd_mm))) %>%
mutate(Distance_mm = sqrt(Delta_X_mm^2 + Delta_Y_mm^2 + Delta_Z_mm^2)) %>%
mutate(Speed_cm_s = 0.1*Distance_mm/Delta_time_s) %>% return()
}
wrangled_list <- lapply(zooid_list,wrangle)
speed_data <- do.call(rbind, wrangled_list)
ggplot(speed_data, aes(Time..mins., Speed_cm_s))+geom_line(aes(color=NumberZooid %>% as.factor()))
library(ape)
help(ape)
library(tidyverse)
#library(corHMM)
library(bayou)
library(tidyverse)
library(wql)
library(ggrepel)
library(patchwork)
require(data.table)
library(mgcv)
setwd("~/salp_ecomorphology/")
#Load data and label: control rows, paired specimens
presens <- read.csv("respirometry_Kona21-23.tsv", header = T, sep = "\t", stringsAsFactors = F)
presens$Species[which(is.na(presens$Species))] <- "Control"
presens$Specimen[which(is.na(presens$Specimen))] <- "Control"
presens <- mutate(presens, is.paired=ifelse(grepl("Paired", Measurement.notes), "Yes", "No"))
as.numeric(as.factor(presens$Injection.time)) -> presens$Injection.time
#Filter to get only plastic and non-mgcl2 blastozooid measurements
presens <- presens[which(presens$Container=="Plastic" & presens$Treatment != "MgCl2"),]
presens <- presens[which(presens$Stage=="Blastozooid" | is.na(presens$Stage)),]
#Estimate absolute oxygen mg
ggplot(presens,aes(x=Specimen,y=O2..mg.L.))+geom_point(aes(col=Time.point..min.))+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
presens <- mutate(presens, abs_O2.mg. = O2..mg.L.*Container.volume..ml./1000)
ggplot(presens,aes(x=Specimen,y=abs_O2.mg.))+geom_point(aes(col=Container.volume..ml. %>% log()))+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
#Correct for O2 saturation limit wit temperature
#presens$Temperature...C.[which(is.na(presens$Temperature...C.))]<-29 #### MAKING SHIT UP ####
#presens <- mutate(presens, sat_O2 = O2..mg.L./oxySol(presens$Temperature...C., 30.1, 1))
#Colony volume imputation for those specimens where we didn't measure the specimen biovolume in the field
imputed_vols <- data.frame(imputed_vol = round(presens[which(!is.na(presens$Colony.volume..ml.)),"Number.of.zooids"]*pi*presens[which(!is.na(presens$Colony.volume..ml.)),"Zooid.length..mm."]*((presens[which(!is.na(presens$Colony.volume..ml.)),"Zooid.length..mm."]/2)^2)*0.001,1),
real_vol = presens[which(!is.na(presens$Colony.volume..ml.)),"Colony.volume..ml."],
Number.of.zooids = presens[which(!is.na(presens$Colony.volume..ml.)), "Number.of.zooids"],
Zooid.length..mm. = presens[which(!is.na(presens$Colony.volume..ml.)),"Zooid.length..mm."],
Species = presens[which(!is.na(presens$Colony.volume..ml.)),"Species"])
#try out an imputation fit by hand using a 3D ellipsoid formula
mutate(imputed_vols, estimate_vol=Number.of.zooids*(ifelse(Species=="Salpa maxima",0.00005,0.00015)*pi*Zooid.length..mm.*((0.35*Zooid.length..mm.)^2 - ((0.25*Zooid.length..mm.)^2)))) %>%
ggplot(aes(x=real_vol, y=estimate_vol)) +
geom_point(aes(col=Species))
#try a GAM-based modeling for the imputation
fit3 = gam(real_vol~Zooid.length..mm.+Number.of.zooids, data = imputed_vols)
fit3$coefficients[1] <- 0
unknown=as.data.frame(presens[which(is.na(presens$Colony.volume..ml.) & presens$Species != "Control"),c("Number.of.zooids","Zooid.length..mm.")])
presens$Colony.volume..ml.[which(is.na(presens$Colony.volume..ml.) & presens$Species != "Control")] <- predict.gam(fit3, unknown) %>% as.vector()
#Sensitivity of container effects by species (needs more development)
ggplot(presens[which(presens$Time.point..min.>115),],aes(x=Sensor.ID,y=O2..mg.L.))+geom_point(aes(col=Species))+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(presens[which(presens$Time.point..min.>115),],aes(x=Sensor.ID,y=abs_O2.mg.))+geom_point(aes(col=Species))+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
#Match each measurement with its relevant control
presens$abs_O2.mg._control <- presens$Measurement #placeholder column
for(i in 1:nrow(presens)){
if(!is.na(presens$Relevant.control[i]) & presens$Specimen[i] != "Control"){
presens$abs_O2.mg._control[i] <- presens$abs_O2.mg.[which(presens$Measurement == presens$Relevant.control[i])]
}
}
#remove control rows
rename(as_tibble(presens) %>% filter(presens$Specimen != "Control"), abs_O2.mg._animal=abs_O2.mg.) %>% as.data.frame() -> presens
#Remove unorthodox measuements
#norm_presens <- join_presens[which(join_presens$Specimen != "D4-CP-B-1"),] #remove weird C.polae from MGCL2 experiment
#norm_presens <- norm_presens[which(norm_presens$Specimen != "D25-Pso-B-1"),] #weird Pegea socia o2 increase
#norm_presens <- norm_presens[which(norm_presens$corr_O2.specific < 0),] #something has to have gone wrong in these datapoints
#Factorize specimen and species concepts
factSPsp <- function(df){
df$Species <- as.factor(df$Species)
df$Specimen <- as.factor(df$Specimen)
df$Experiment <- as.factor(df$Specimen)
}
factSPsp(presens)
# factSPsp(join_ko)
# factSPsp(join_ko_paired)
# factSPsp(join_swim)
# factSPsp(join_swim_paired)
# factSPsp(join_presens)
### PLOTS ###
# ggplot(join_swim, aes(x=Time.point..min., y=abs_O2.mg.specific)) +
#   geom_point(aes(col=Species)) +
#   ylab("O2 (mg) Difference Intact") +
#   geom_line(aes(col = Species, group=Specimen)) +
#   ylim(c(-2.1,0)) +
#   theme_bw()
#
# ggplot(join_ko, aes(x=Time.point..min., y=abs_O2.mg.specific)) +
#   geom_point(aes(col=Species)) +
#   ylab("O2 (mg) Difference Intact") +
#   geom_line(aes(col = Species, group=Specimen)) +
#   theme_bw()
#Raw O2 plots for swim
rawControlswim <- ggplot(presens, aes(x=Time.point..min., y=abs_O2.mg._control)) +
geom_point() +
ylab("O2 (mg) Controls Intact") +
theme_bw()
rawAnimalswim <- ggplot(presens, aes(x=Time.point..min., y=abs_O2.mg._animal)) +
geom_point(aes(col=Species)) +
ylab("O2 (mg) Animals Intact") +
geom_line(aes(col = Species, group=Specimen)) +
theme_bw()
#SLOPE CALCULATIONS
slopes <- as.data.frame(matrix(ncol=12,nrow=length(unique(paste0(presens$Specimen,presens$Treatment)))))
names(slopes) <- c("Species","Specimen","Colony.volume..ml.","Zooid.length..mm.","Number.of.zooids","Slope_O2", "Slope_O2.control", "Slope_O2_dif", "Timespan","Temperature_range","Treatment","Paired")
for(i in 1:length(unique(paste0(presens$Specimen,presens$Treatment)))){
spm_i <- unique(paste(presens$Specimen,presens$Treatment),sep=" ")[i] %>%
str_split(pattern=" ") %>%
.[[1]] %>% .[1]
treat_i <- unique(paste(presens$Specimen,presens$Treatment),sep=" ")[i] %>%
str_split(pattern=" ") %>%
.[[1]] %>% .[2]
series_i <- presens[which(presens$Specimen==spm_i & presens$Treatment==treat_i),c("Specimen","Species","Zooid.length..mm.","Number.of.zooids","Colony.volume..ml.","Time.point..min.","Temperature...C.","abs_O2.mg._animal","abs_O2.mg._control","Treatment","is.paired")]
lm_animal <- lm(abs_O2.mg._animal~Time.point..min., series_i)
lm_control <- lm(abs_O2.mg._control~Time.point..min., series_i)
print(series_i$Specimen[1] %>% as.character());print(series_i$Species[1] %>% as.character());print(lm_animal$coefficients);print(lm_control$coefficients)
time.span_i <- max(series_i$Time.point..min.)-min(series_i$Time.point..min.)
#"Species","Specimen","Colony.volume..ml.","Zooid.length..mm.","Number.of.zooids",
slopes[i,1] <- series_i$Species[1] %>% as.character()
slopes[i,2] <- series_i$Specimen[1] %>% as.character()
slopes[i,3] <- series_i$Colony.volume..ml.[1] %>% as.numeric()
slopes[i,4] <- series_i$Zooid.length..mm.[1] %>% as.numeric()
slopes[i,5] <- series_i$Number.of.zooids[1] %>% as.numeric()
#"Slope_O2", "Slope_O2.control", "Slope_O2_dif"
slopes[i,6] <- lm_animal$coefficients[2]
slopes[i,7] <- lm_control$coefficients[2]
slopes[i,8] <- lm_animal$coefficients[2] - lm_control$coefficients[2]
#"Timespan","Temperature_range","Treatment","Paired"
slopes[i,9] <- time.span_i
slopes[i,10] <- if(!is.na(mean(series_i$Temperature...C., na.rm = T))){max(series_i$Temperature...C., na.rm=T) - min(series_i$Temperature...C., na.rm=T)} else NA
print(series_i$Treatment)
slopes[i,11] <- series_i$Treatment %>% unique()
slopes[i,12] <- series_i$is.paired %>% unique()
}
#Normalize by colony volume, transform to PicoGrams of O2
slopes %>% mutate(Slope_normalized = 1000000*Slope_O2/Colony.volume..ml., Slope_O2_dif_normalized = 1000000*Slope_O2_dif/Colony.volume..ml.) -> slopes
#Get carbon estimates
#Estimate Carbon content for each species and recalculate carbon-based rawCOT
mm_to_carbon <- read.csv("Madin1981_salpcarbon.tsv", header=T, stringsAsFactors = F, sep='\t')
mm_to_carbon$Generation[mm_to_carbon$Species=="Iasis (Weelia) cylindrica"] <- "a" ##PROXY
mm_to_carbon$Species[mm_to_carbon$Species=="Thalia democratica"] <- "Thalia sp."  #### amalgamation!
#Normalize by carbon
slopes %>% left_join(mm_to_carbon[which(mm_to_carbon$Generation=="a"),c(1,4,5)], by="Species") %>%
mutate(mgC = Regression_b*Zooid.length..mm.^Regression_a) %>%
mutate(Slopes_mgC = 1000000*Slope_O2/mgC, Slopes_dif_mgC = 1000000*Slope_O2_dif/mgC) -> slopes
slopes$Species[which(slopes$Species == "Thalia cicar")] <- "Thalia sp."
slopes$Species[which(slopes$Species == "Ritteriella sp.")] <- "Ritteriella retracta"
slopes$Species %>% factor(levels=c("Pegea sp.", "Helicosalpa virgula","Cyclosalpa affinis",
"Cyclosalpa bakeri", "Cyclosalpa quadriluminis","Cyclosalpa polae",
"Cyclosalpa sewelli", "Ritteriella retracta", "Ritteriella amboinensis",
"Brooksia rostrata", "Thalia sp.", "Metcalfina hexagona", "Salpa fusiformis", "Salpa aspera", "Salpa maxima",
"Iasis (Weelia) cylindrica", "Ihlea punctata", "Soestia zonaria")) -> slopes$Species
slopes$Species
slopes %>% filter(Treatment=="Intact") %>%
ggplot(aes(x=Species,y=-Slope_O2))->slope_plot
slope_plot+
geom_violin(color="red",fill="red", alpha=0.7)+
geom_point(color="red",fill="red", alpha=0.7)+
geom_violin(data=slopes %>% filter(Treatment=="Anesthetized"), color="blue", fill="blue", alpha=0.7, width = 0.5)+
geom_point(data=slopes %>% filter(Treatment=="Anesthetized"), color="blue",fill="red", alpha=0.7)+
ylab("Gross respiration rate (pgO2/min)")+
theme_bw()+
theme(axis.text.x = element_text(angle = 90))#+
#Get swimming speeds on Event Measure
swim <- read.csv("EMSpeeds_final_annotated.tsv",stringsAsFactors = F) #[,c(20,21,25)]
summarized_raw=swim
ggplot(summarized_raw, aes(x=Species, y=Speed_mm_s))+
geom_boxplot(aes(fill=Architecture))+
theme_bw()+theme(axis.text.x = element_text(angle = 90))
library(tidyverse)
library(ape)
library(phytools)
library(reshape2)
library(data.table)
library(geiger)
library(bayou)
library(RColorBrewer)
library(phylolm)
setwd("~/salp_ecomorphology/")
#LOAD consensus tree
tree_salp <- read.nexus("phylogeny/RevBayes/TIMETREE_GUC-Mm+N+Sanger2_MUSCLE_output/TimeTree_GUC-Mm+N+Sanger2_MUSCLE_mcmc_MAP.tre")
#Remove duplicate and ingroup undescribed salp species
### ATTENTION: MAKE SURE THESE MAXIMIZE BRANCH LENGTHS  ####
tree_salp <- drop.tip(tree_salp, c("HQ015387.1_Pegea_confoederata","HQ015397.1_Cyclosalpa_quadriluminis","HQ015391.1_Cyclosalpa_affinis",
"HQ015396.1_Cyclosalpa_polae","HQ015398.1_Cyclosalpa_sewelli","FM244866.1_Iasis_cylindrica","HQ015399.1_Iasis_cylindrica",
"HQ015402.1_Iasis_cylindrica","HQ015401.1_Iasis_cylindrica","HQ015413.1_Thalia_democratica","HQ015414.1_Thalia_democratica",
"D14366.1_Thalia_democratica","HQ015410.1_Ritteriella_retracta","23_D37-Rsp-B-1_Ritteriella_sp", "24_D37-Rret-OS-1_Ritteriella_retracta",
"HQ015404.1_Brooksia_rostrata","HQ015408.1_Salpa_maxima","HQ015406.1_Salpa_thompsoni", "HQ015377.1_Salpidae_gen._nov._sp._nov._A",
"FM244865.1_Ihlea_racovitzai", "KR057222.1_Brooksia_lacromae", "9_Helicosalpa_virgula_MarcHughes_specimen2",
"26_Cyclosalpa_quadriluminis_D39CquaOS1", "27_Cyclosalpa_polae_D38CpolB1", "16_Ritteriella_amboinensis_D28RambOS1",
"3_Ihlea_punctata_non-spotted_D24MhexB1", "20_Ihlea_punctata_D31IpunOS1-2", "6_Iasis_cf_cylindrica_yellow-tail_D22SyouB1"))
#Remove accession codes and _
tree_salp$tip.label <- str_remove_all(tree_salp$tip.label, ".+\\..+?_")
tree_salp$tip.label <- str_replace_all(tree_salp$tip.label, "_", " ")
tree_salp$tip.label <- str_remove_all(tree_salp$tip.label, "^\\d+ ")
tree_salp$tip.label <- str_remove_all(tree_salp$tip.label, " D\\d+.+$")
tree_salp$tip.label <- str_remove_all(tree_salp$tip.label, "D\\d+.+? ")
#Correct spellings
tree_salp$tip.label[which(tree_salp$tip.label == "Cyclosalpa floridana")] <- "Cyclosalpa floridiana"
#Remove outgroups
tree_salp <- drop.tip(tree_salp, c("Pyrosomella verticillata", "Pyrosoma atlanticum", "Pyrosoma godeauxi","Pyrostremma spinosum", "Clavelina meridionalis", "Pycnoclavella aff. detorta", "Ascidia ceratodes", "Perophora sagamiensis","Megalodicopia hians", "Chelyosoma siboja", "Ciona intestinalis", "Molgula manhattensis", "Oikopleura dioica","Halocynthia igaboja", "Echinorhinus cookei", "Myxine glutinosa", "Branchiostoma floridae", "Doliolum denticulatum", "Doliolum nationalis"))
#write.tree(tree_salp, "GUCMmNSanger_TimeTree_salp18Sphylo.tre")
#Load phylogenetic uncertainty tree set (3001 trees from RevBayes)
Strees <- read.tree("phylogeny/RevBayes/TOPOLOGY_GUC-Mm+N+Sanger2_MUSCLE_output/GUC-Mm+N+Sanger2_MUSCLE_18S.trees")
#remove duplicate species and undescribed ingroup
Strees <- lapply(Strees, drop.tip, c("HQ015387.1_Pegea_confoederata","HQ015397.1_Cyclosalpa_quadriluminis","HQ015391.1_Cyclosalpa_affinis",
"HQ015396.1_Cyclosalpa_polae","HQ015398.1_Cyclosalpa_sewelli","FM244866.1_Iasis_cylindrica","HQ015399.1_Iasis_cylindrica",
"HQ015402.1_Iasis_cylindrica","HQ015401.1_Iasis_cylindrica","HQ015413.1_Thalia_democratica","HQ015414.1_Thalia_democratica",
"D14366.1_Thalia_democratica","HQ015410.1_Ritteriella_retracta","23_D37-Rsp-B-1_Ritteriella_sp", "24_D37-Rret-OS-1_Ritteriella_retracta",
"HQ015404.1_Brooksia_rostrata","HQ015408.1_Salpa_maxima","HQ015406.1_Salpa_thompsoni", "HQ015377.1_Salpidae_gen._nov._sp._nov._A",
"FM244865.1_Ihlea_racovitzai", "KR057222.1_Brooksia_lacromae", "9_Helicosalpa_virgula_MarcHughes_specimen2",
"26_Cyclosalpa_quadriluminis_D39CquaOS1", "27_Cyclosalpa_polae_D38CpolB1", "16_Ritteriella_amboinensis_D28RambOS1",
"3_Ihlea_punctata_non-spotted_D24MhexB1", "20_Ihlea_punctata_D31IpunOS1-2", "6_Iasis_cf_cylindrica_yellow-tail_D22SyouB1"))
#Remove straneous characters and Accession codes from tip labels
plotTree(tree_salp)
