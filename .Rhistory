treeI = drop.tip(tree_salp_pruned,which(!(tree_salp_pruned$tip.label %in% names(CH_I))))
class(treeI) = "phylo"
PSIG <- phylosig(treeI, CH_I, test=T)
print(names(cast_num)[i])
PSIG$K %>% print()
PSIG$P %>% print()
length(CH_I) %>% print()
#dotTree(treeI,CH_I)
if(length(CH_I)>4){
obj<-contMap(treeI,CH_I,plot=FALSE)
grey<-setMap(obj,c("white","black"))
par(mfrow=c(1,1))
plot(grey,lwd=7,legend=2, leg.txt=names(cast_num)[i], fsize=c(1,0.5))
}
}
expected_angles <- read.csv("expected_angles.tsv",sep="\t",header = T, stringsAsFactors = F)
expected_angles <- read.csv("expected_angles.tsv",sep="\t",header = T, stringsAsFactors = F) %>% t()
expected_angles
expected_angles <- read.csv("expected_angles.tsv",sep="\t",header = T, stringsAsFactors = F) %>% t()
expected_angles
library(data.table)
dcast(pruned_traits[which(pruned_traits$Class=="number"),], Species~Variable, value.var="Value", fun.aggregate = function(x){mean(as.numeric(x), na.rm = T)})
expected_angles <- read.csv("expected_angles.tsv",sep="\t",header = T, stringsAsFactors = F) %>% transpose()
expected_angles
read.csv("expected_angles.tsv",sep="\t",header = T, stringsAsFactors = F)
read.csv("expected_angles.tsv",sep="\t",header = T, stringsAsFactors = F) %>% transpose()
expected_angles <- read.csv("expected_angles.tsv",sep="\t",header = T, stringsAsFactors = F)
expected_angles$Angle
headnames=expected_angles$Angle
spnames=colnames(expected_angles)[-1]
spnames
expected_angles <- transpose(expected_angles)
expected_angles
expected_angles <- transpose(expected_angles)[-1,]
expected_angles
expected_angles <- transpose(expected_angles)[-1,-1]
expected_angles
names(expected_angles) <- headnames
headnames
expected_angles
transpose(expected_angles)
expected_angles <- read.csv("expected_angles.tsv",sep="\t",header = T, stringsAsFactors = F)
headnames=expected_angles$Angle
spnames=colnames(expected_angles)[-1]
expected_angles <- transpose(expected_angles)[-1,-1]
expected_angles
expected_angles <- read.csv("expected_angles.tsv",sep="\t",header = T, row.names = T, stringsAsFactors = F)
expected_angles <- read.csv("expected_angles.tsv",sep="\t",header = T, row.names = T, stringsAsFactors = F)
expected_angles <- read.csv("expected_angles.tsv",sep="\t",header = T, row.names = 1, stringsAsFactors = F)
expected_angles
expected_angles %>% t()
expected_angles <- read.csv("expected_angles.tsv",sep="\t",header = T, row.names = 1, stringsAsFactors = F)%>% t() %>% as.data.frame()
expected_angles
write.table("expectedAngles.tsv",expected_angles,col.names = T,row.names = T,sep='tsv')
write.table(file="expectedAngles.tsv",expected_angles,col.names = T,row.names = T,sep='tsv')
write.table(file="expectedAngles.tsv",expected_angles,col.names = T,row.names = T,sep="\t")
expected_angles <- read.csv("expected_angles.tsv",sep="\t",header = T, row.names = 1, stringsAsFactors = F)
expected_angles
for(i in 2:ncol(expected_angles)){
CH_I=as.numeric(expected_angles[,i])
names(CH_I) = expected_angles$Species
CH_I= CH_I[!is.na(CH_I)]
treeI = drop.tip(tree_salp,which(!(tree_salp$tip.label %in% names(CH_I))))
class(treeI) = "phylo"
PSIG <- phylosig(treeI, CH_I, test=T)
print(names(expected_angles)[i])
PSIG$K %>% print()
PSIG$P %>% print()
length(CH_I) %>% print()
#dotTree(treeI,CH_I)
if(length(CH_I)>4){
obj<-contMap(treeI,CH_I,plot=FALSE)
grey<-setMap(obj,c("white","black"))
par(mfrow=c(1,1))
plot(grey,lwd=7,legend=2, leg.txt=names(cast_num)[i], fsize=c(1,0.5))
}
}
names(CH_I)
expected_angles$Species
row.names(expected_angles)
for(i in 2:ncol(expected_angles)){
CH_I=as.numeric(expected_angles[,i])
names(CH_I) = row.names(expected_angles)
CH_I= CH_I[!is.na(CH_I)]
treeI = drop.tip(tree_salp,which(!(tree_salp$tip.label %in% names(CH_I))))
class(treeI) = "phylo"
PSIG <- phylosig(treeI, CH_I, test=T)
print(names(expected_angles)[i])
PSIG$K %>% print()
PSIG$P %>% print()
length(CH_I) %>% print()
#dotTree(treeI,CH_I)
if(length(CH_I)>4){
obj<-contMap(treeI,CH_I,plot=FALSE)
grey<-setMap(obj,c("white","black"))
par(mfrow=c(1,1))
plot(grey,lwd=7,legend=2, leg.txt=names(cast_num)[i], fsize=c(1,0.5))
}
}
for(i in 2:ncol(expected_angles)){
CH_I=as.numeric(expected_angles[,i])
names(CH_I) = row.names(expected_angles)
CH_I= CH_I[!is.na(CH_I)]
treeI = drop.tip(tree_salp_pruned,which(!(tree_salp_pruned$tip.label %in% names(CH_I))))
class(treeI) = "phylo"
PSIG <- phylosig(treeI, CH_I, test=T)
print(names(expected_angles)[i])
PSIG$K %>% print()
PSIG$P %>% print()
length(CH_I) %>% print()
#dotTree(treeI,CH_I)
if(length(CH_I)>4){
obj<-contMap(treeI,CH_I,plot=FALSE)
grey<-setMap(obj,c("white","black"))
par(mfrow=c(1,1))
plot(grey,lwd=7,legend=2, leg.txt=names(cast_num)[i], fsize=c(1,0.5))
}
}
for(i in 2:ncol(expected_angles)){
CH_I=as.numeric(expected_angles[,i])
names(CH_I) = row.names(expected_angles)
CH_I= CH_I[!is.na(CH_I)]
treeI = drop.tip(tree_salp,which(!(tree_salp$tip.label %in% names(CH_I)))) %>% chronos()
class(treeI) = "phylo"
PSIG <- phylosig(treeI, CH_I, test=T)
print(names(expected_angles)[i])
PSIG$K %>% print()
PSIG$P %>% print()
length(CH_I) %>% print()
#dotTree(treeI,CH_I)
if(length(CH_I)>4){
obj<-contMap(treeI,CH_I,plot=FALSE)
grey<-setMap(obj,c("white","black"))
par(mfrow=c(1,1))
plot(grey,lwd=7,legend=2, leg.txt=names(cast_num)[i], fsize=c(1,0.5))
}
}
for(i in 2:ncol(expected_angles)){
CH_I=as.numeric(expected_angles[,i])
names(CH_I) = row.names(expected_angles)
CH_I= CH_I[!is.na(CH_I)]
treeI = drop.tip(tree_salp,which(!(tree_salp$tip.label %in% names(CH_I)))) %>% chronos()
class(treeI) = "phylo"
PSIG <- phylosig(treeI, CH_I, test=T)
print(names(expected_angles)[i])
PSIG$K %>% print()
PSIG$P %>% print()
length(CH_I) %>% print()
#dotTree(treeI,CH_I)
if(length(CH_I)>4){
obj<-contMap(treeI,CH_I,plot=FALSE)
grey<-setMap(obj,c("white","black"))
par(mfrow=c(1,1))
plot(grey,lwd=7,legend=2, leg.txt=names(expected_angles)[i], fsize=c(1,0.5))
}
}
CH_I
expected_angles
expected_angles <- read.csv("expected_angles.tsv",sep="\t",header = T, row.names = 1, stringsAsFactors = F)[,-c(7,8)] #remove variables with all zeroes
for(i in 2:ncol(expected_angles)){
CH_I=as.numeric(expected_angles[,i])
names(CH_I) = row.names(expected_angles)
CH_I= CH_I[!is.na(CH_I)]
treeI = drop.tip(tree_salp,which(!(tree_salp$tip.label %in% names(CH_I)))) %>% chronos()
class(treeI) = "phylo"
PSIG <- phylosig(treeI, CH_I, test=T)
print(names(expected_angles)[i])
PSIG$K %>% print()
PSIG$P %>% print()
length(CH_I) %>% print()
#dotTree(treeI,CH_I)
if(length(CH_I)>4){
obj<-contMap(treeI,CH_I,plot=FALSE)
grey<-setMap(obj,c("white","black"))
par(mfrow=c(1,1))
plot(grey,lwd=7,legend=2, leg.txt=names(expected_angles)[i], fsize=c(1,0.5))
}
}
plotTree(tree_salp,fsize=0.8,ftype="i", offset=1)
plotTree(chronos(tree_salp),fsize=0.8,ftype="i", offset=1)
setwd("~/Documents/salp_ecomorphology/")
traits <- read.csv("salplit.tsv", sep="\t", stringsAsFactors = F)
traits$Species[which(traits$Species == "Iasis (Weelia) cylindrica")] <- "Iasis cylindrica"
traits$Species[which(traits$Species == "Soestia (Iasis) zonaria")] <- "Soestia zonaria"
ggplot(traits[which(traits$Variable=="Mean swimming speed cms"),], aes(x = Species, y = Value)) + geom_point() + theme_bw() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(traits[which(traits$Variable=="Mean pulsation rate Hz"),], aes(x = Species, y = Value)) + geom_point() + theme_bw() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(traits[which(traits$Variable=="Cost of locomotion J-kg-m"),], aes(x = Species, y = Value)) + geom_point() + theme_bw() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(traits[which(traits$Variable=="Muscle_area/Chamber_length"),], aes(x = Species, y = Value)) + geom_point() + theme_bw() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
#prune tree by data and make ultrametric
tree_salp_pruned <- drop.tip(tree_salp, which(!(tree_salp$tip.label %in% unique(traits$Species)))) %>% chronos()
pruned_traits <- traits[which(traits$Species %in% tree_salp$tip.label),]
cast_num <- dcast(pruned_traits[which(pruned_traits$Class=="number"),], Species~Variable, value.var="Value", fun.aggregate = function(x){mean(as.numeric(x), na.rm = T)})
for(i in 2:ncol(cast_num)){
CH_I=as.numeric(cast_num[,i])
names(CH_I) = cast_num$Species
CH_I= CH_I[!is.na(CH_I)]
treeI = drop.tip(tree_salp_pruned,which(!(tree_salp_pruned$tip.label %in% names(CH_I))))
class(treeI) = "phylo"
PSIG <- phylosig(treeI, CH_I, test=T)
print(names(cast_num)[i])
PSIG$K %>% print()
PSIG$P %>% print()
length(CH_I) %>% print()
#dotTree(treeI,CH_I)
if(length(CH_I)>4){
obj<-contMap(treeI,CH_I,plot=FALSE)
grey<-setMap(obj,c("white","black"))
par(mfrow=c(1,1))
plot(grey,lwd=7,legend=2, leg.txt=names(cast_num)[i], fsize=c(1,0.5))
}
}
cast_num
pruned_traits <- traits[which(traits$Species %in% tree_salp$tip.label),]
cast_num <- dcast(pruned_traits[which(pruned_traits$Class=="number"),], Species~Variable, value.var="Value", fun.aggregate = function(x){mean(as.numeric(x), na.rm = T)})
for(i in 2:ncol(cast_num)){
CH_I=as.numeric(cast_num[,i])
names(CH_I) = cast_num$Species
CH_I= CH_I[!is.na(CH_I)]
treeI = drop.tip(tree_salp_pruned,which(!(tree_salp_pruned$tip.label %in% names(CH_I))))
class(treeI) = "phylo"
PSIG <- phylosig(treeI, CH_I, test=T)
print(names(cast_num)[i])
PSIG$K %>% print()
PSIG$P %>% print()
length(CH_I) %>% print()
#dotTree(treeI,CH_I)
if(length(CH_I)>4){
obj<-contMap(treeI,CH_I,plot=FALSE)
grey<-setMap(obj,c("white","black"))
par(mfrow=c(1,1))
plot(grey,lwd=7,legend=2, leg.txt=names(cast_num)[i], fsize=c(1,0.5))
}
}
i=7
CH_I=as.numeric(cast_num[,i])
names(CH_I) = cast_num$Species
CH_I= CH_I[!is.na(CH_I)]
treeI = drop.tip(tree_salp_pruned,which(!(tree_salp_pruned$tip.label %in% names(CH_I))))
class(treeI) = "phylo"
PSIG <- phylosig(treeI, CH_I, test=T)
print(names(cast_num)[i])
PSIG$K %>% print()
PSIG$P %>% print()
length(CH_I) %>% print()
i=8
CH_I=as.numeric(cast_num[,i])
names(CH_I) = cast_num$Species
CH_I= CH_I[!is.na(CH_I)]
treeI = drop.tip(tree_salp_pruned,which(!(tree_salp_pruned$tip.label %in% names(CH_I))))
class(treeI) = "phylo"
PSIG <- phylosig(treeI, CH_I, test=T)
print(names(cast_num)[i])
PSIG$K %>% print()
PSIG$P %>% print()
length(CH_I) %>% print()
if(length(CH_I)>4){
obj<-contMap(treeI,CH_I,plot=FALSE)
grey<-setMap(obj,c("white","black"))
par(mfrow=c(1,1))
plot(grey,lwd=7,legend=2, leg.txt=names(cast_num)[i], fsize=c(1,0.5))
}
length(CH_I)>4
obj<-contMap(treeI,CH_I,plot=FALSE)
grey<-setMap(obj,c("white","black"))
par(mfrow=c(1,1))
plot(grey,lwd=7,legend=2, leg.txt=names(cast_num)[i], fsize=c(1,0.5))
#Latitude ranges
tropical <- setNames(unique_traits[which(unique_traits$Variable=="Tropical"),4], unique_traits[which(unique_traits$Variable=="Tropical"),1])
tree_salp_lat <- drop.tip(tree_salp, which(!(tree_salp$tip.label %in% names(Tropical)))) %>% chronos()
#Latitude ranges
tropical <- setNames(unique_traits[which(unique_traits$Variable=="Tropical"),4], unique_traits[which(unique_traits$Variable=="Tropical"),1])
tree_salp_lat <- drop.tip(tree_salp, which(!(tree_salp$tip.label %in% names(Tropical)))) %>% chronos()
tree_salp_lat <- drop.tip(tree_salp, which(!(tree_salp$tip.label %in% names(tropical)))) %>% chronos()
tropical <- tropical[which(names(tropical) %in% tree_salp_lat$tip.label)]
tropical
tropical[match(names(tropical),tree_salp_lat$tip.label)] -> tropical
fitLat <- ace(tropical,tree_salp_lat,"discrete")
plotTree(tree_salp_lat,fsize=0.8,ftype="i", offset=1)
cols=c("red","green")
nodelabels(node=1:tree_salp_lat$Nnode+Ntip(tree_salp_lat),pie=fitLat$lik.anc,piecol=cols,cex=0.7)
tiplabels(pie=to.matrix(tropical,sort(unique(tropical))),piecol=cols,cex=0.5)
simmorph<-make.simmap(tree_salp_lat,tropical,nsim=100)
par(ask=F)
obj<-summary(simmorph,plot=FALSE)
cols<-setNames(palette()[1:2],mapped.states(simmorph)[,1])
mapped.states(simmorph)
plotTree(tree_salp_lat,fsize=0.8,ftype="i", offset=1)
cols=c("red","green","black")
nodelabels(node=1:tree_salp_lat$Nnode+Ntip(tree_salp_lat),pie=fitLat$lik.anc,piecol=cols,cex=0.7)
tiplabels(pie=to.matrix(tropical,sort(unique(tropical))),piecol=cols,cex=0.5)
add.simmap.legend(colors=cols,prompt=FALSE,x=0,y=2,fsize=0.8)
simLat<-make.simmap(tree_salp_lat,tropical,nsim=100)
par(ask=F)
obj<-summary(simmLat,plot=FALSE)
obj<-summary(simLat,plot=FALSE)
cols<-setNames(palette()[1:3],mapped.states(simLat)[,1])
plot(obj,colors=cols,fsize=0.8,cex=c(0.9,0.5), ftype="i")
temperate <- setNames(unique_traits[which(unique_traits$Variable=="Temperate"),4], unique_traits[which(unique_traits$Variable=="Temperate"),1])
tree_salp_lat <- drop.tip(tree_salp, which(!(tree_salp$tip.label %in% names(temperate)))) %>% chronos()
temperate <- temperate[which(names(temperate) %in% tree_salp_lat$tip.label)]
temperate[match(names(temperate),tree_salp_lat$tip.label)] -> tropical
temperate[match(names(temperate),tree_salp_lat$tip.label)] -> temperate
fitLat <- ace(temperate,tree_salp_lat,"discrete")
plotTree(tree_salp_lat,fsize=0.8,ftype="i", offset=1)
simLat<-make.simmap(tree_salp_lat,temperate,nsim=100)
par(ask=F)
obj<-summary(simLat,plot=FALSE)
par(ask=F)
obj<-summary(simLat,plot=FALSE)
cols<-setNames(palette()[1:3],mapped.states(simLat)[,1])
plot(obj,colors=cols,fsize=0.8,cex=c(0.9,0.5), ftype="i")
add.simmap.legend(colors=cols,x=0, y=4,prompt=FALSE,fsize=0.9,)
morph
morph %>% as.data.frame()
cbind(names(morph),morph)
cbind(names(morph),morph)[,2]
cbind(names(morph),morph)$morph
cbind(names(morph),morph)[,2]
cbind(names(morph),morph)
#Developmental transitions from Transversal budding
transits <- read.csv("Transitions_Salps.tsv", sep='\t', header = T, stringsAsFactors = F)
transits
transits$Species %>% sort()
tree_salp_morph
tree_salp_morph$tip.label %>% sort()
transits$Species %>% sort()
transits[14,]
transits
#Developmental transitions from Transversal budding
transits <- read.csv("Transitions_Salps.tsv", sep='\t', header = T, stringsAsFactors = F)[-1,]
transits
transits$Species %>% sort()
tree_salp_morph$tip.label %>% sort()
for(t in 2:6){
T_I=as.numeric(transits[,t])
names(T_I) = transits$Species
simT<-make.simmap(tree_salp_morph,T_I,nsim=25)
par(ask=F)
obj_t<-summary(simT,plot=FALSE)
cols_t<-setNames(palette()[1:2],mapped.states(simT)[,1])
plot(obj_t,colors=cols_t,fsize=0.8,cex=c(0.9,0.5), ftype="i")
add.simmap.legend(colors=cols_t,x=0, y=4,prompt=FALSE,fsize=0.9,)
}
#Developmental transitions from Transversal budding
transits <- read.csv("Transitions_Salps.tsv", sep='\t', header = T, stringsAsFactors = F)[-1,-4]
for(t in 2:5){
T_I=as.numeric(transits[,t])
names(T_I) = transits$Species
simT<-make.simmap(tree_salp_morph,T_I,nsim=25)
par(ask=F)
obj_t<-summary(simT,plot=FALSE)
cols_t<-setNames(palette()[1:2],mapped.states(simT)[,1])
plot(obj_t,colors=cols_t,fsize=0.8,cex=c(0.9,0.5), ftype="i")
add.simmap.legend(colors=cols_t,x=0, y=4,prompt=FALSE,fsize=0.9,)
}
expected_angles
angle_tree <- chronos(tree_salp)
plot(angle_tree)
startree <- rescale(angle_tree, "lambda", 0)
library(geiger)
startree <- rescale(angle_tree, "lambda", 0)
plot(startree)
names(expected_angles)
AICdf = as.data.frame(matrix(ncol=6,nrow=2))
colnames(AICdf) = c("Variable", "white_noise", "starBM", "BM", "EB", "OU")
angle_tree <- chronos(tree_salp)
startree <- rescale(angle_tree, "lambda", 0)
for(c in 1:ncol(expected_angles)){
C = expected_angles[,c]
names(C) = rownames(expected_angles)
C = C[!is.na(C)]
Ctree = drop.tip(angle_tree, which(!(angle_tree$tip.label %in% names(C))))
startree_C = drop.tip(startree, which(!(startree$tip.label %in% names(C))))
model_matrix = matrix("NA", nrow = 5, ncol = 3)
colnames(model_matrix) = c("aicc","aicc_best","dAICc")
row.names(model_matrix) = c("white", "starBM", "BM", "EB", "OU")
for(j in 1:dim(model_matrix)[1]){
if(j==2){
temp_model = fitContinuous(startree_C, C, model="BM")$opt
}
else{
temp_model = fitContinuous(Ctree, C, model=row.names(model_matrix)[j])$opt
}
model_matrix = apply(model_matrix,2, as.numeric)
row.names(model_matrix) = c("white", "starBM", "BM", "EB", "OU")
model_matrix[j, "aicc"] <- temp_model$aicc
}
model_matrix[,"aicc_best"] <- min(model_matrix[,"aicc"])
model_matrix[,"dAICc"] <- model_matrix[, "aicc"] - model_matrix[j, "aicc_best"]
print(names(expected_angles)[c])
string_c <- c(names(expected_angles)[c], model_matrix[,3])
names(string_c) = colnames(AICdf)
AICdf[c,] <- string_c
}
warnings()
AICdf[,2:6]
AICdf[,2:6] = apply(AICdf[,2:6], 2, as.numeric) %>% apply(2, round3)
AICdf[,2:6] = apply(AICdf[,2:6], 2, as.numeric) %>% apply(2, function(x){round(x,3)})
AICdf
expected_angles
morph
#SIMMAP
simmorph<-make.simmap(tree_salp_morph,morph,nsim=25,model="ARD")
par(ask=F)
obj_t<-summary(simmorph,plot=FALSE)
cols_t<-setNames(palette()[1:2],mapped.states(simm)[,1])
cols_t<-setNames(palette()[1:2],mapped.states(simmorph)[,1])
cols_t<-setNames(palette()[1:6],mapped.states(simmorph)[,1])
plot(obj_t,colors=cols_t,fsize=0.8,cex=c(0.9,0.5), ftype="i")
add.simmap.legend(colors=cols_t,x=0, y=4,prompt=FALSE,fsize=0.9,)
simmorph<-make.simmap(tree_salp_morph,morph,nsim=25,model="ARD")
par(ask=F)
obj_t<-summary(simmorph,plot=FALSE)
cols_t<-setNames(palette()[1:6],mapped.states(simmorph)[,1])
plot(obj_t,colors=cols_t,fsize=0.8,cex=c(0.9,0.5), ftype="i")
add.simmap.legend(colors=cols_t,x=0, y=4,prompt=FALSE,fsize=0.9,)
#SIMMAP
simmorph<-make.simmap(tree_salp_morph,morph,nsim=25,model="SYM")
obj_t<-summary(simmorph,plot=FALSE)
cols_t<-setNames(palette()[1:6],mapped.states(simmorph)[,1])
plot(obj_t,colors=cols_t,fsize=0.8,cex=c(0.9,0.5), ftype="i")
add.simmap.legend(colors=cols_t,x=0, y=4,prompt=FALSE,fsize=0.9,)
transits
library(corHMM)
transits
CHMM_transits <- corHMM(tree_salp_morph, transits)
CHMM_transits <- corHMM(tree_salp_morph, transits, rate.cat = 4)
CHMM_transits
CHMM_transits$states
transit_paths <- read.csv("Transitions_Paths.tsv", sep='\t', header = T, stringsAsFactors = F)
transit_paths
for(t in 1:3){
T_I=as.numeric(transit_paths[,t])
names(T_I) = transit_paths$Species
simT<-make.simmap(tree_salp_morph,T_I,nsim=25)
par(ask=F)
obj_t<-summary(simT,plot=FALSE)
cols_t<-setNames(palette()[1:2],mapped.states(simT)[,1])
plot(obj_t,colors=cols_t,fsize=0.8,cex=c(0.9,0.5), ftype="i")
add.simmap.legend(colors=cols_t,x=0, y=4,prompt=FALSE,fsize=0.9,)
}
for(t in 2:3){
T_I=as.numeric(transit_paths[,t])
names(T_I) = transit_paths$Species
simT<-make.simmap(tree_salp_morph,T_I,nsim=25)
par(ask=F)
obj_t<-summary(simT,plot=FALSE)
cols_t<-setNames(palette()[1:2],mapped.states(simT)[,1])
plot(obj_t,colors=cols_t,fsize=0.8,cex=c(0.9,0.5), ftype="i")
add.simmap.legend(colors=cols_t,x=0, y=4,prompt=FALSE,fsize=0.9,)
}
for(t in 2:3){
T_I=transit_paths[,t]
names(T_I) = transit_paths$Species
simT<-make.simmap(tree_salp_morph,T_I,nsim=25)
par(ask=F)
obj_t<-summary(simT,plot=FALSE)
cols_t<-setNames(palette()[1:2],mapped.states(simT)[,1])
plot(obj_t,colors=cols_t,fsize=0.8,cex=c(0.9,0.5), ftype="i")
add.simmap.legend(colors=cols_t,x=0, y=4,prompt=FALSE,fsize=0.9,)
}
transit_paths$Species
T_I
obj_t
cols_t
1:length(unique(T_I))
for(t in 2:3){
T_I=transit_paths[,t]
names(T_I) = transit_paths$Species
simT<-make.simmap(tree_salp_morph,T_I,nsim=25)
par(ask=F)
obj_t<-summary(simT,plot=FALSE)
cols_t<-setNames(palette()[1:length(unique(T_I))],mapped.states(simT)[,1])
plot(obj_t,colors=cols_t,fsize=0.8,cex=c(0.9,0.5), ftype="i")
add.simmap.legend(colors=cols_t,x=0, y=4,prompt=FALSE,fsize=0.9,)
}
transit_paths
for(t in 2:3){
T_I=transit_paths[,t]
names(T_I) = transit_paths$Species
simT<-make.simmap(tree_salp_morph,T_I,nsim=25,model="SYM")
par(ask=F)
obj_t<-summary(simT,plot=FALSE)
cols_t<-setNames(palette()[1:length(unique(T_I))],mapped.states(simT)[,1])
plot(obj_t,colors=cols_t,fsize=0.8,cex=c(0.9,0.5), ftype="i")
add.simmap.legend(colors=cols_t,x=0, y=4,prompt=FALSE,fsize=0.9,)
}
for(t in 2:3){
T_I=transit_paths[,t]
names(T_I) = transit_paths$Species
simT<-make.simmap(tree_salp_morph,T_I,nsim=25,model="ARD")
par(ask=F)
obj_t<-summary(simT,plot=FALSE)
cols_t<-setNames(palette()[1:length(unique(T_I))],mapped.states(simT)[,1])
plot(obj_t,colors=cols_t,fsize=0.8,cex=c(0.9,0.5), ftype="i")
add.simmap.legend(colors=cols_t,x=0, y=4,prompt=FALSE,fsize=0.9,)
}
customQ <- rbind(c(1,1,0,0),c(1,1,1,0),c(0,1,1,1),c(0,0,1,1))
customQ
rownames(bipQ)=colnames(bipQ)<-c("Bippinate","Linear","Oblique","Transversal")
bipQ <- rbind(c(1,1,0,0),c(1,1,1,0),c(0,1,1,1),c(0,0,1,1))
rownames(bipQ)=colnames(bipQ)<-c("Bippinate","Linear","Oblique","Transversal")
bipQ
rownames(bipQ)=colnames(bipQ)<-c("Bipinnate","Linear","Oblique","Transversal")
t=2
T_I=transit_paths[,t]
names(T_I) = transit_paths$Species
simT<-make.simmap(tree_salp_morph,T_I,nsim=25,Q=bipQ)
cluQ <- rbind(c(1,0,1),c(0,1,1),c(1,1,1))
rownames(cluQ)=colnames(cluQ)<-c("Cluster","Transversal","Whorl")
simT<-make.simmap(tree_salp_morph,T_I,nsim=1,Q=bipQ)
T_I
