names(keyvars)
mutate(keyvars, is_junk = (1/Number<Inf) == FALSE) -> keyvars
keyvars$is_junk <- as.numeric(keyvars$is_junk)
keyvars %>% pivot_wider(
names_from = is_junk,
values_from = c("X..mm.","Y..mm.","Z..mm."),
) -> keyvars
names(keyvars)
names(keyvars) %>% str_replace_all("TRUE", "Junk") %>% str_replace_all("FALSE", "Zooid")
keyvars
names(keyvars) %>% str_replace_all("TRUE", "Junk") %>% str_replace_all("FALSE", "Zooid") -> names(keyvars)
keyvars
keyvars %>% pivot_wider(
id_cols = Time..mins.,
names_from = is_junk,
values_from = c("X..mm.","Y..mm.","Z..mm."),
) -> keyvars
keyvars <- raw[,c(1:3,6:8,31)]
mutate(keyvars, is_junk = (1/Number<Inf) == FALSE) -> keyvars
keyvars %>% pivot_wider(
id_cols = Time..mins.,
names_from = is_junk,
values_from = c("X..mm.","Y..mm.","Z..mm."),
) -> keyvars
keyvars
keyvars <- raw[,c(1:3,6:8,31)]
mutate(keyvars, is_junk = (1/Number<Inf) == FALSE) -> keyvars
keyvars %>% pivot_wider(
names_from = is_junk,
values_from = c("X..mm.","Y..mm.","Z..mm."),
) -> keyvars
View(keyvars)
names(keyvars) %>% str_replace_all("TRUE", "Junk") %>% str_replace_all("FALSE", "Zooid") -> names(keyvars)
left_join(group_split(keyvars, is_junk)[[1]], group_split(keyvars, is_junk)[[2]])
keyvars <- raw[,c(1:3,6:8,31)] %>% mutate(is_junk = (1/Number<Inf) == FALSE) -> keyvars
raw[,c(1:3,6:8,31)] %>% mutate(is_junk = (1/Number<Inf) == FALSE) -> keyvars
left_join(group_split(keyvars, is_junk)[[1]], group_split(keyvars, is_junk)[[2]])
full_join(group_split(keyvars, is_junk)[[1]], group_split(keyvars, is_junk)[[2]])
group_split(keyvars, is_junk)[[2]]
full_join(group_split(keyvars, is_junk)[[1]][,1:7], group_split(keyvars, is_junk)[[2]][,1:7])
full_join(group_split(keyvars, is_junk)[[1]][,1:7], group_split(keyvars, is_junk)[[2]][,1:7], suffix= c("Junk","Zooid"))
full_join(group_split(keyvars, is_junk)[[1]][,1:7], group_split(keyvars, is_junk)[[2]][,1:7], by=c("Filename","Frame","Time..mins."), suffix= c("Junk","Zooid"))
full_join(group_split(keyvars, is_junk)[[1]][,1:7], group_split(keyvars, is_junk)[[2]][,1:7], by=c("Filename","Frame","Time..mins.","Number"), suffix= c("Junk","Zooid"))
full_join(group_split(keyvars, is_junk)[[1]][,1:7], group_split(keyvars, is_junk)[[2]][,1:7], by=c("Filename","Frame","Time..mins."), suffix= c("Junk","Zooid"))
full_join(group_split(keyvars, is_junk)[[1]][,1:7],
group_split(keyvars, is_junk)[[2]][,1:7],
by=c("Filename","Frame","Time..mins."),
suffix= c("Junk","Zooid")) %>%
as.data.frame()
full_join(group_split(keyvars, is_junk)[[1]][,1:7],
group_split(keyvars, is_junk)[[2]][,1:7],
by=c("Filename","Frame","Time..mins."),
suffix= c("Junk","Zooid")) %>%
as.data.frame() %>% .[,c(-7,-11)]
full_join(group_split(keyvars, is_junk)[[1]][,1:7],
group_split(keyvars, is_junk)[[2]][,1:7],
by=c("Filename","Frame","Time..mins."),
suffix= c("Junk","Zooid")) %>%
as.data.frame() %>% .[,c(-7)]
full_join(group_split(keyvars, is_junk)[[1]][,1:7],
group_split(keyvars, is_junk)[[2]][,1:7],
by=c("Filename","Frame","Time..mins."),
suffix= c("Zooid","Junk")) %>%
as.data.frame() %>% .[,c(-7)]
full_join(group_split(keyvars, is_junk)[[1]][,1:7],
group_split(keyvars, is_junk)[[2]][,1:7],
by=c("Filename","Frame","Time..mins."),
suffix= c("Zooid","Junk")) %>%
as.data.frame()
full_join(group_split(keyvars, is_junk)[[1]][,1:7],
group_split(keyvars, is_junk)[[2]][,1:7],
by=c("Filename","Frame","Time..mins."),
suffix= c("Zooid","Junk")) %>%
as.data.frame() %>% .[,c(-11)]
tidy <- full_join(group_split(keyvars, is_junk)[[1]][,1:7],
group_split(keyvars, is_junk)[[2]][,1:7],
by=c("Filename","Frame","Time..mins."),
suffix= c("Zooid","Junk")) %>%
as.data.frame() %>% .[,c(-11)]
zooid_list <- group_split(tidy, NumberZooid)
zooid_list
z1 <- zooid_list[[1]]
z1
z1 %>% arrange(Frame) %>%
mutate(diff = Time..mins. - lag(Time..mins., default = first(Time..mins.)))
z1 %>% arrange(Frame) %>%
mutate(Delta_time_s = Time..mins. - lag(Time..mins., default = first(Time..mins.)))
z1 %>% arrange(Frame) %>%
mutate(Delta_time_s = Time..mins. - lag(Time..mins., default = first(Time..mins.))) %>%
mutate(Xd_mm = X..mm.Zooid - X..mm.Junk, Yd_mm = Y..mm.Zooid - Y..mm.Junk, Zd_mm =  Z..mm.Zooid - Z..mm.Junk)
z1 %>% arrange(Frame) %>%
mutate(Delta_time_s = Time..mins. - lag(Time..mins., default = first(Time..mins.))) %>%
mutate(Xd_mm = X..mm.Zooid - X..mm.Junk, Yd_mm = Y..mm.Zooid - Y..mm.Junk, Zd_mm =  Z..mm.Zooid - Z..mm.Junk) %>%
mutate(Delta_X_mm = Xd_mm - lag(Xd_mm, default = first(Xd_mm)),
Delta_Y_mm = Yd_mm - lag(Yd_mm, default = first(Yd_mm)),
Delta_Z_mm = Zd_mm - lag(Zd_mm, default = first(Zd_mm)))
z1 %>% arrange(Frame) %>%
mutate(Delta_time_s = Time..mins. - lag(Time..mins., default = first(Time..mins.))) %>%
mutate(Xd_mm = X..mm.Zooid - X..mm.Junk, Yd_mm = Y..mm.Zooid - Y..mm.Junk, Zd_mm =  Z..mm.Zooid - Z..mm.Junk) %>%
mutate(Delta_X_mm = Xd_mm - lag(Xd_mm, default = first(Xd_mm)),
Delta_Y_mm = Yd_mm - lag(Yd_mm, default = first(Yd_mm)),
Delta_Z_mm = Zd_mm - lag(Zd_mm, default = first(Zd_mm))) %>% View()
z1 %>% arrange(Frame) %>%
mutate(Delta_time_s = Time..mins. - lag(Time..mins., default = first(Time..mins.))) %>%
mutate(Xd_mm = X..mm.Zooid - X..mm.Junk, Yd_mm = Y..mm.Zooid - Y..mm.Junk, Zd_mm =  Z..mm.Zooid - Z..mm.Junk) %>%
mutate(Delta_X_mm = Xd_mm - lag(Xd_mm, default = first(Xd_mm)),
Delta_Y_mm = Yd_mm - lag(Yd_mm, default = first(Yd_mm)),
Delta_Z_mm = Zd_mm - lag(Zd_mm, default = first(Zd_mm))) %>%
mutate(Distance_mm = sqrt(Delta_X_mm^2 + Delta_Y_mm^2 + Delta_Z_mm^2))
z1 %>% arrange(Frame) %>%
mutate(Delta_time_s = Time..mins. - lag(Time..mins., default = first(Time..mins.))) %>%
mutate(Xd_mm = X..mm.Zooid - X..mm.Junk, Yd_mm = Y..mm.Zooid - Y..mm.Junk, Zd_mm =  Z..mm.Zooid - Z..mm.Junk) %>%
mutate(Delta_X_mm = Xd_mm - lag(Xd_mm, default = first(Xd_mm)),
Delta_Y_mm = Yd_mm - lag(Yd_mm, default = first(Yd_mm)),
Delta_Z_mm = Zd_mm - lag(Zd_mm, default = first(Zd_mm))) %>%
mutate(Distance_mm = sqrt(Delta_X_mm^2 + Delta_Y_mm^2 + Delta_Z_mm^2)) %>% View()
z1 %>% arrange(Frame) %>%
mutate(Delta_time_s = Time..mins. - lag(Time..mins., default = first(Time..mins.))) %>%
mutate(Xd_mm = X..mm.Zooid - X..mm.Junk, Yd_mm = Y..mm.Zooid - Y..mm.Junk, Zd_mm =  Z..mm.Zooid - Z..mm.Junk) %>%
mutate(Delta_X_mm = Xd_mm - lag(Xd_mm, default = first(Xd_mm)),
Delta_Y_mm = Yd_mm - lag(Yd_mm, default = first(Yd_mm)),
Delta_Z_mm = Zd_mm - lag(Zd_mm, default = first(Zd_mm))) %>%
mutate(Distance_mm = sqrt(Delta_X_mm^2 + Delta_Y_mm^2 + Delta_Z_mm^2)) %>%
mutate(Speed_mm_s = Distance_mm/Delta_time_s)
wrangle <- function(df){
df %>% arrange(Frame) %>%
mutate(Delta_time_s = Time..mins. - lag(Time..mins., default = first(Time..mins.))) %>%
mutate(Xd_mm = X..mm.Zooid - X..mm.Junk, Yd_mm = Y..mm.Zooid - Y..mm.Junk, Zd_mm =  Z..mm.Zooid - Z..mm.Junk) %>%
mutate(Delta_X_mm = Xd_mm - lag(Xd_mm, default = first(Xd_mm)),
Delta_Y_mm = Yd_mm - lag(Yd_mm, default = first(Yd_mm)),
Delta_Z_mm = Zd_mm - lag(Zd_mm, default = first(Zd_mm))) %>%
mutate(Distance_mm = sqrt(Delta_X_mm^2 + Delta_Y_mm^2 + Delta_Z_mm^2)) %>%
mutate(Speed_mm_s = Distance_mm/Delta_time_s) %>% return()
}
lapply(zooid_list,df)
lapply(zooid_list,wrangle)
wrangled_list <- lapply(zooid_list,wrangle)
View(wrangled_list)
wrangled_list[[1]]
wrangled_list[[1]] %>% View()
do.call(wrangled_list, rbind)
do.call(rbind, wrangled_list)
speed_data <- do.call(rbind, wrangled_list)
ggplot(speed_data, aes(Time..mins., Speed_mm_s))+geom_point(aes(color=NumberZooid))
ggplot(speed_data, aes(Time..mins., Speed_mm_s))+geom_point(aes(color=NumberZooid %>% as.factor()))
ggplot(speed_data, aes(Time..mins., Speed_mm_s))+geom_line(aes(color=NumberZooid %>% as.factor()))
wrangle <- function(df){
df %>% arrange(Frame) %>%
mutate(Delta_time_s = Time..mins. - lag(Time..mins., default = first(Time..mins.))) %>%
mutate(Xd_mm = X..mm.Zooid - X..mm.Junk, Yd_mm = Y..mm.Zooid - Y..mm.Junk, Zd_mm =  Z..mm.Zooid - Z..mm.Junk) %>%
mutate(Delta_X_mm = Xd_mm - lag(Xd_mm, default = first(Xd_mm)),
Delta_Y_mm = Yd_mm - lag(Yd_mm, default = first(Yd_mm)),
Delta_Z_mm = Zd_mm - lag(Zd_mm, default = first(Zd_mm))) %>%
mutate(Distance_mm = sqrt(Delta_X_mm^2 + Delta_Y_mm^2 + Delta_Z_mm^2)) %>%
mutate(Speed_cm_s = 0.1*Distance_mm/Delta_time_s) %>% return()
}
wrangled_list <- lapply(zooid_list,wrangle)
speed_data <- do.call(rbind, wrangled_list)
ggplot(speed_data, aes(Time..mins., Speed_cm_s))+geom_line(aes(color=NumberZooid %>% as.factor()))
library(tidyverse)
library(ape)
library(phytools)
library(reshape2)
library(data.table)
library(geiger)
#library(corHMM)
library(bayou)
library(surface)
library(RColorBrewer)
library(phylolm)
#library(diversitree)
setwd("~/salp_ecomorphology/")
#LOAD consensus tree
tree_salp <- read.nexus("phylogeny/RevBayes/TIMETREE_Gov2011+Higa+Cint+news_MUSCLE_output/TimeTree_GovUNIONCho-AB921975Mman+news_MUSCLE_mcmc_MAP.tre")
#Remove duplicate and ingroup undescribed salp species
### ATTENTION: MAKE SURE THESE MAXIMIZE BRANCH LENGTHS  ####
tree_salp <- drop.tip(tree_salp, c("HQ015387.1_Pegea_confoederata","HQ015397.1_Cyclosalpa_quadriluminis","HQ015391.1_Cyclosalpa_affinis","HQ015396.1_Cyclosalpa_polae","HQ015398.1_Cyclosalpa_sewelli","FM244866.1_Iasis_cylindrica","HQ015399.1_Iasis_cylindrica","HQ015402.1_Iasis_cylindrica","HQ015401.1_Iasis_cylindrica","HQ015413.1_Thalia_democratica","HQ015414.1_Thalia_democratica","D14366.1_Thalia_democratica","HQ015410.1_Ritteriella_retracta","HQ015404.1_Brooksia_rostrata","HQ015408.1_Salpa_maxima","HQ015406.1_Salpa_thompsoni", "HQ015377.1_Salpidae_gen._nov._sp._nov._A", "FM244865.1_Ihlea_racovitzai", "KR057222.1_Brooksia_lacromae"))
#Remove accession codes and _
tree_salp$tip.label <- str_remove_all(tree_salp$tip.label, ".+\\..+?_")
tree_salp$tip.label <- str_replace_all(tree_salp$tip.label, "_", " ")
#Correct spellings
tree_salp$tip.label[which(tree_salp$tip.label == "Cyclosalpa floridana")] <- "Cyclosalpa floridiana"
#Remove outgroups
tree_salp <- drop.tip(tree_salp, c("Pyrosomella verticillata", "Pyrosoma atlanticum", "Pyrosoma godeauxi","Pyrostremma spinosum", "Clavelina meridionalis", "Pycnoclavella aff. detorta", "Ascidia ceratodes", "Perophora sagamiensis","Megalodicopia hians", "Chelyosoma siboja", "Ciona intestinalis", "Molgula manhattensis", "Oikopleura dioica","Halocynthia igaboja", "Echinorhinus cookei", "Myxine glutinosa", "Branchiostoma floridae", "Doliolum denticulatum", "Doliolum nationalis"))
#Load phylogenetic uncertainty tree set (3001 trees from RevBayes)
#Strees <- read.tree("phylogeny/RevBayes/TOPOLOGY_Gov2011+Higa+Cint_MUSCLE_output/Gov2011HigaCint_MUSCLE_18S_multitrees.trees")
Strees <- read.tree("phylogeny/RevBayes/TOPOLOGY_GUC-Mm+N+Sanger_MUSCLE_output/GUC-Mm+N+Sanger_MUSCLE_18S.trees")
#remove duplicate species and undescribed ingroup
Strees <- lapply(Strees, drop.tip, c("HQ015387.1_Pegea_confoederata","HQ015397.1_Cyclosalpa_quadriluminis","HQ015391.1_Cyclosalpa_affinis","HQ015396.1_Cyclosalpa_polae","HQ015398.1_Cyclosalpa_sewelli","FM244866.1_Iasis_cylindrica","HQ015399.1_Iasis_cylindrica","HQ015402.1_Iasis_cylindrica","HQ015401.1_Iasis_cylindrica","HQ015413.1_Thalia_democratica","HQ015414.1_Thalia_democratica","D14366.1_Thalia_democratica","HQ015410.1_Ritteriella_retracta","HQ015404.1_Brooksia_rostrata","HQ015408.1_Salpa_maxima","HQ015406.1_Salpa_thompsoni", "HQ015377.1_Salpidae_gen._nov._sp._nov._A", "FM244865.1_Ihlea_racovitzai", "KR057222.1_Brooksia_lacromae"))
#Remove straneous characters and Accession codes from tip labels
Strees <- lapply(Strees, function(t){t$tip.label %>%
str_remove_all(".+\\..+?_") %>%
str_replace_all("_", " ") -> t$tip.label; return(t)})
#Remove outgroups
Strees <- lapply(Strees, drop.tip, c("Pyrosomella verticillata", "Pyrosoma atlanticum", "Pyrosoma godeauxi","Pyrostremma spinosum", "Clavelina meridionalis", "Pycnoclavella aff. detorta", "Ascidia ceratodes", "Perophora sagamiensis","Megalodicopia hians", "Chelyosoma siboja", "Ciona intestinalis", "Molgula manhattensis", "Oikopleura dioica","Halocynthia igaboja", "Echinorhinus cookei", "Myxine glutinosa", "Branchiostoma floridae", "Doliolum denticulatum", "Doliolum nationalis"))
#correct spelling
Strees <- lapply(Strees, function(t){t$tip.label[which(t$tip.label == "Cyclosalpa floridana")] <- "Cyclosalpa floridiana"; return(t)})
#Ladderize for homogeneity in tip order
Strees <- lapply(Strees, ladderize)
#Make ultrametric
Strees <- lapply(Strees, chronos)
#Quantify each unique tree topology
ape::unique.multiPhylo(Strees, use.tip.label = F)->Strees_Unique
lapply(Strees_Unique, function(t){length(lapply(Strees, function(Tr){all.equal.phylo(t,Tr,use.edge.length = F, use.tip.label = F)}) %>% unlist() %>% .[which(.==TRUE)])}) %>% unlist() %>% as.numeric() -> BSratios
BS_ratios <- (BSratios*100)/sum(BSratios)
round(BS_ratios,2) %>% sort() %>% .[length(BS_ratios):1]
Strees_Unique <- Strees_Unique[order(BS_ratios)[length(BS_ratios):1]]
lapply(Strees_Unique[[1:4]],function(t){plot.phylo(t, use.edge.length = F, cex=0.2)})
lapply(Strees_Unique[1:4],function(t){plot.phylo(t, use.edge.length = F, cex=0.2)})
lapply(Strees_Unique[1:4],function(t){plot.phylo(t, use.edge.length = F, cex=2)})
lapply(Strees_Unique[1:4],function(t){plot.phylo(t, use.edge.length = F)})
#LOAD consensus tree
tree_salp <- read.nexus("phylogeny/RevBayes/TIMETREE_GUC-Mm+N+Sanger_MUSCLE_output/TimeTree_GUC-Mm+N+Sanger_MUSCLE_mcmc_MAP.tre")
plot(tree_salp)
tree_salp$tip.label
### ATTENTION: MAKE SURE THESE MAXIMIZE BRANCH LENGTHS  ####
tree_salp <- drop.tip(tree_salp, c("HQ015387.1_Pegea_confoederata","HQ015397.1_Cyclosalpa_quadriluminis","HQ015391.1_Cyclosalpa_affinis",
"HQ015396.1_Cyclosalpa_polae","HQ015398.1_Cyclosalpa_sewelli","FM244866.1_Iasis_cylindrica","HQ015399.1_Iasis_cylindrica",
"HQ015402.1_Iasis_cylindrica","HQ015401.1_Iasis_cylindrica","HQ015413.1_Thalia_democratica","HQ015414.1_Thalia_democratica",
"D14366.1_Thalia_democratica","HQ015410.1_Ritteriella_retracta","HQ015404.1_Brooksia_rostrata",
"HQ015408.1_Salpa_maxima","HQ015406.1_Salpa_thompsoni", "HQ015377.1_Salpidae_gen._nov._sp._nov._A",
"FM244865.1_Ihlea_racovitzai", "KR057222.1_Brooksia_lacromae", "9_Helicosalpa_virgula_MarcHughes_specimen2",
"26_Cyclosalpa_quadriluminis_D39CquaOS1", "27_Cyclosalpa_polae_D38CpolB1", "16_Ritteriella_amboinensis_D28RambOS1",
"3_Ihlea_punctata_non-spotted_D24MhexB1", "20_Ihlea_punctata_D31IpunOS1-2", "6_Iasis_cf_cylindrica_yellow-tail_D22SyouB1"))
tree_salp$tip.label
plot(tree_salp)
#Remove accession codes and _
tree_salp$tip.label <- str_remove_all(tree_salp$tip.label, ".+\\..+?_")
tree_salp$tip.label <- str_replace_all(tree_salp$tip.label, "_", " ")
tree_salp$tip.label
str_remove_all(tree_salp$tip.label, "^\d+")
str_remove_all(tree_salp$tip.label, "^\\d+")
str_remove_all(tree_salp$tip.label, "^\\d+ ")
tree_salp$tip.label <- str_remove_all(tree_salp$tip.label, "^\\d+ ")
str_remove_all(tree_salp$tip.label, "D\\d+.+$")
str_remove_all(tree_salp$tip.label, " D\\d+.+$")
tree_salp$tip.label <- str_remove_all(tree_salp$tip.label, " D\\d+.+$")
tree_salp$tip.label
#Correct spellings
tree_salp$tip.label[which(tree_salp$tip.label == "Cyclosalpa floridana")] <- "Cyclosalpa floridiana"
#Remove outgroups
tree_salp <- drop.tip(tree_salp, c("Pyrosomella verticillata", "Pyrosoma atlanticum", "Pyrosoma godeauxi","Pyrostremma spinosum", "Clavelina meridionalis", "Pycnoclavella aff. detorta", "Ascidia ceratodes", "Perophora sagamiensis","Megalodicopia hians", "Chelyosoma siboja", "Ciona intestinalis", "Molgula manhattensis", "Oikopleura dioica","Halocynthia igaboja", "Echinorhinus cookei", "Myxine glutinosa", "Branchiostoma floridae", "Doliolum denticulatum", "Doliolum nationalis"))
tree_salp$tip.label
#Test proportion of specific nodes
#Make unitary BLs and ultrametric
Strees_clado <- lapply(Strees, function(TREE){TREE$edge.length <- rep(1,length(TREE$edge.length));return(TREE)}) %>% lapply(chronos)
lapply(Strees_clado, function(TRE){
#cophenetic(TRE)["Brooksia rostrata","Ritteriella retracta"]>cophenetic(TRE)["Ritteriella retracta","Cyclosalpa polae"] &
cophenetic(TRE)["Cyclosalpa polae","Cyclosalpa sewelli"]<cophenetic(TRE)["Cyclosalpa polae","Cyclosalpa quadriluminis"]
#cophenetic(TRE)["Salpa aspera","Cyclosalpa polae"]<cophenetic(TRE)["Ritteriella retracta","Cyclosalpa polae"] &
}) %>% unlist() %>% table() -> cr; print(cr/30.01)
#Plot each unique tree variant
par(mfrow=c(3,3),mar=c(0,0,0,0), oma=c(0,0,0,0))
lapply(Strees_Unique[1:9],function(t){plot.phylo(t, use.edge.length = F, cex=0.2)})
lapply(Strees_Unique[1:9],function(t){plot.phylo(t, use.edge.length = F)})
#Load phylogenetic uncertainty tree set (3001 trees from RevBayes)
#Strees <- read.tree("phylogeny/RevBayes/TOPOLOGY_Gov2011+Higa+Cint_MUSCLE_output/Gov2011HigaCint_MUSCLE_18S_multitrees.trees")
Strees <- read.tree("phylogeny/RevBayes/TOPOLOGY_GUC-Mm+N+Sanger_MUSCLE_output/GUC-Mm+N+Sanger_MUSCLE_18S.trees")
#remove duplicate species and undescribed ingroup
Strees <- lapply(Strees, drop.tip, c("HQ015387.1_Pegea_confoederata","HQ015397.1_Cyclosalpa_quadriluminis","HQ015391.1_Cyclosalpa_affinis",
"HQ015396.1_Cyclosalpa_polae","HQ015398.1_Cyclosalpa_sewelli","FM244866.1_Iasis_cylindrica","HQ015399.1_Iasis_cylindrica",
"HQ015402.1_Iasis_cylindrica","HQ015401.1_Iasis_cylindrica","HQ015413.1_Thalia_democratica","HQ015414.1_Thalia_democratica",
"D14366.1_Thalia_democratica","HQ015410.1_Ritteriella_retracta","HQ015404.1_Brooksia_rostrata",
"HQ015408.1_Salpa_maxima","HQ015406.1_Salpa_thompsoni", "HQ015377.1_Salpidae_gen._nov._sp._nov._A",
"FM244865.1_Ihlea_racovitzai", "KR057222.1_Brooksia_lacromae", "9_Helicosalpa_virgula_MarcHughes_specimen2",
"26_Cyclosalpa_quadriluminis_D39CquaOS1", "27_Cyclosalpa_polae_D38CpolB1", "16_Ritteriella_amboinensis_D28RambOS1",
"3_Ihlea_punctata_non-spotted_D24MhexB1", "20_Ihlea_punctata_D31IpunOS1-2", "6_Iasis_cf_cylindrica_yellow-tail_D22SyouB1"))
#Remove straneous characters and Accession codes from tip labels
Strees <- lapply(Strees, function(t){t$tip.label %>%
str_remove_all(".+\\..+?_") %>%
str_replace_all("_", " ") %>%
str_remove_all("^\\d+ ") %>%
str_remove_all(" D\\d+.+$") -> t$tip.label; return(t)})
#Remove outgroups
Strees <- lapply(Strees, drop.tip, c("Pyrosomella verticillata", "Pyrosoma atlanticum", "Pyrosoma godeauxi","Pyrostremma spinosum", "Clavelina meridionalis", "Pycnoclavella aff. detorta", "Ascidia ceratodes", "Perophora sagamiensis","Megalodicopia hians", "Chelyosoma siboja", "Ciona intestinalis", "Molgula manhattensis", "Oikopleura dioica","Halocynthia igaboja", "Echinorhinus cookei", "Myxine glutinosa", "Branchiostoma floridae", "Doliolum denticulatum", "Doliolum nationalis"))
#correct spelling
Strees <- lapply(Strees, function(t){t$tip.label[which(t$tip.label == "Cyclosalpa floridana")] <- "Cyclosalpa floridiana"; return(t)})
plot(Strees[1])
plot(Strees[[1]])
nodelabels()
lapply(Strees, function(t){reroot(t, 37)})
lapply(Strees, function(t){reroot(t, 37)}) %>% .[[1]] %>% plot()
lapply(Strees[[1:2]], function(t){reroot(t, 35)}) %>% .[[1]] %>% plot()
lapply(Strees[1:2], function(t){reroot(t, 35)}) %>% .[[1]] %>% plot()
Strees <- read.tree("phylogeny/RevBayes/TOPOLOGY_GUC-Mm+N+Sanger_MUSCLE_output/GUC-Mm+N+Sanger_MUSCLE_18S.trees")
#remove duplicate species and undescribed ingroup
Strees <- lapply(Strees, drop.tip, c("HQ015387.1_Pegea_confoederata","HQ015397.1_Cyclosalpa_quadriluminis","HQ015391.1_Cyclosalpa_affinis",
"HQ015396.1_Cyclosalpa_polae","HQ015398.1_Cyclosalpa_sewelli","FM244866.1_Iasis_cylindrica","HQ015399.1_Iasis_cylindrica",
"HQ015402.1_Iasis_cylindrica","HQ015401.1_Iasis_cylindrica","HQ015413.1_Thalia_democratica","HQ015414.1_Thalia_democratica",
"D14366.1_Thalia_democratica","HQ015410.1_Ritteriella_retracta","HQ015404.1_Brooksia_rostrata",
"HQ015408.1_Salpa_maxima","HQ015406.1_Salpa_thompsoni", "HQ015377.1_Salpidae_gen._nov._sp._nov._A",
"FM244865.1_Ihlea_racovitzai", "KR057222.1_Brooksia_lacromae", "9_Helicosalpa_virgula_MarcHughes_specimen2",
"26_Cyclosalpa_quadriluminis_D39CquaOS1", "27_Cyclosalpa_polae_D38CpolB1", "16_Ritteriella_amboinensis_D28RambOS1",
"3_Ihlea_punctata_non-spotted_D24MhexB1", "20_Ihlea_punctata_D31IpunOS1-2", "6_Iasis_cf_cylindrica_yellow-tail_D22SyouB1"))
#Remove straneous characters and Accession codes from tip labels
Strees <- lapply(Strees, function(t){t$tip.label %>%
str_remove_all(".+\\..+?_") %>%
str_replace_all("_", " ") %>%
str_remove_all("^\\d+ ") %>%
str_remove_all(" D\\d+.+$") -> t$tip.label; return(t)})
lapply(Strees[1:2], function(t){reroot(t, 35)}) %>% .[[1]] %>% plot()
plot(Strees[1])
plot(Strees[[1]]); nodelabels()
lapply(Strees[1:2], function(t){reroot(t, 71)}) %>% .[[1]] %>% plot()
#reroot trees
Strees <- lapply(Strees, function(t){reroot(t, 71)})
#Remove outgroups
Strees <- lapply(Strees, drop.tip, c("Pyrosomella verticillata", "Pyrosoma atlanticum", "Pyrosoma godeauxi","Pyrostremma spinosum", "Clavelina meridionalis", "Pycnoclavella aff. detorta", "Ascidia ceratodes", "Perophora sagamiensis","Megalodicopia hians", "Chelyosoma siboja", "Ciona intestinalis", "Molgula manhattensis", "Oikopleura dioica","Halocynthia igaboja", "Echinorhinus cookei", "Myxine glutinosa", "Branchiostoma floridae", "Doliolum denticulatum", "Doliolum nationalis"))
#correct spelling
Strees <- lapply(Strees, function(t){t$tip.label[which(t$tip.label == "Cyclosalpa floridana")] <- "Cyclosalpa floridiana"; return(t)})
#Ladderize for homogeneity in tip order
Strees <- lapply(Strees, ladderize)
plot(Strees[[1]]); nodelabels()
#Make ultrametric
Strees <- lapply(Strees, chronos)
#Quantify each unique tree topology
ape::unique.multiPhylo(Strees, use.tip.label = F)->Strees_Unique
lapply(Strees_Unique, function(t){length(lapply(Strees, function(Tr){all.equal.phylo(t,Tr,use.edge.length = F, use.tip.label = F)}) %>% unlist() %>% .[which(.==TRUE)])}) %>% unlist() %>% as.numeric() -> BSratios
BS_ratios <- (BSratios*100)/sum(BSratios)
round(BS_ratios,2) %>% sort() %>% .[length(BS_ratios):1]
Strees_Unique <- Strees_Unique[order(BS_ratios)[length(BS_ratios):1]]
#Plot each unique tree variant
par(mfrow=c(3,3),mar=c(0,0,0,0), oma=c(0,0,0,0))
lapply(Strees_Unique,function(t){plot.phylo(t, use.edge.length = F, cex=0.2)})
#Plot each unique tree variant
par(mfrow=c(3,3),mar=c(0,0,0,0), oma=c(0,0,0,0))
lapply(Strees_Unique[1:9],function(t){plot.phylo(t, use.edge.length = F)})
BS_ratios
round(BS_ratios,2) %>% sort() %>% .[length(BS_ratios):1]
#Test proportion of specific nodes
#Make unitary BLs and ultrametric
Strees_clado <- lapply(Strees, function(TREE){TREE$edge.length <- rep(1,length(TREE$edge.length));return(TREE)}) %>% lapply(chronos)
#Append species to phylogeny based on taxonomy and morphological similarity -- ARBITRARY EDGE LENGTHS
#ori_phylo <- chronos(tree_salp); ori_phylo$tip.label <- (str_replace_all(tree_salp$tip.label, " ", "_"))
extended_phylo <- add.species.to.genus(ori_phylo, "Pegea sp.", "Pegea")
#Append species to phylogeny based on taxonomy and morphological similarity -- ARBITRARY EDGE LENGTHS
ori_phylo <- chronos(tree_salp); ori_phylo$tip.label <- (str_replace_all(tree_salp$tip.label, " ", "_"))
extended_phylo <- add.species.to.genus(ori_phylo, "Pegea sp.", "Pegea")
extended_phylo <-  bind.tip(extended_phylo, "Helicosalpa younti", position=0.15, where = 31, edge.length = 0.15+0.099358)
extended_phylo <-  bind.tip(extended_phylo, "Cyclosalpa pinnata", position=0.02, where = 36, edge.length = 0.02712)
extended_phylo <-  bind.tip(extended_phylo, "Pegea socia", position=0.02, where = 25, edge.length = 0.02)
extended_phylo
extended_phylo %>% plot
par(mfrow=c(1,1),mar=c(0,0,0,0), oma=c(0,0,0,0))
par(mfrow=c(1,1),mar=c(0,0,0,0), oma=c(0,0,0,0))
plot(ori_phylo)
add.species.to.genus(ori_phylo, "Pegea sp.", "Pegea")
add.species.to.genus(ori_phylo, "Pegea sp.", "Pegea") %>% plot
extended_phylo <- add.species.to.genus(ori_phylo, "Pegea sp.", "Pegea")
nodelabels()
tiplabels()
bind.tip(extended_phylo, "Helicosalpa younti", position=0.15, where = 7, edge.length = 0.15+0.099358)
extended_phylo <-  bind.tip(extended_phylo, "Helicosalpa younti", position=0.15, where = 7, edge.length = 0.15+0.099358)
plot(extended_phylo)
#Load literature data
salplit <- read.csv("salplit.tsv", sep="\t", stringsAsFactors = F)
traits <- read.csv("SalpPreliminaryPass.tsv", sep="\t", stringsAsFactors = F)
#correct spellings
salplit$Species[which(salplit$Species == "Iasis (Weelia) cylindrica")] <- "Iasis cylindrica"
salplit$Species[which(salplit$Species == "Soestia (Iasis) zonaria")] <- "Soestia zonaria"
#prune tree
#tree_salp_pruned <- drop.tip(tree_salp, which(!(tree_salp$tip.label %in% unique(traits$Species))))
tree_salp_pruned <- drop.tip(extended_phylo, which(!(extended_phylo$tip.label %in% unique(traits$Species))))
#prune traits
pruned_traits  <- traits[which(traits$Species %in% extended_phylo$tip.label),]
unique_traits <- unique(pruned_traits)
plot(tree_salp_pruned)
unique(traits$Species)
extended_phylo$tip.label
extended_phylo = tree_salp
#prune tree
#tree_salp_pruned <- drop.tip(tree_salp, which(!(tree_salp$tip.label %in% unique(traits$Species))))
tree_salp_pruned <- drop.tip(extended_phylo, which(!(extended_phylo$tip.label %in% unique(traits$Species))))
tree_salp_pruned
plot(tree_salp_pruned)
#prune traits
pruned_traits <- traits[which(traits$Species %in% extended_phylo$tip.label),]
unique_traits <- unique(pruned_traits)
kineTraits <- unique_traits[!is.na(unique_traits$Speed..cm.s.),]
rownames(kineTraits) <- kineTraits$Species
kineTree <- drop.tip(tree_salp_pruned,
which(tree_salp_pruned$tip.label %in%
traits$Species[is.na(traits$Speed..cm.s.)]))
contColors <- function(trait, color1, color2){
C <- kineTraits[,trait]
cM <- contMap(kineTree, setNames(C, kineTraits$Species))
cM$cols[1:length(cM$cols)]<-colorRampPalette(c(color1,color2), space="Lab")(length(cM$cols))
plot(cM, legend=FALSE)
add.color.bar(0.5, cM$cols,title=trait,prompt=FALSE,x=0, y=2-0.08*(Ntip(cM$tree)-1),lwd=4,fsize=0.8)
}
contColors(names(kineTraits)[15], "white", "black") #speed cm
contColors(names(kineTraits)[18], "white", "black") #speed z/s
contColors(names(kineTraits)[19], "white", "black") #speed colony
phenogram(kineTree, setNames(kineTraits$Speed..colonysize.min.,kineTraits$Species))
phenogram(kineTree, setNames(kineTraits$Speed..zooid.s,kineTraits$Species))
phenogram(tree_salp_pruned, setNames(unique_traits$DV.Zooid..Stolon.angle,unique_traits$Species))
#Front drag
kineTraits[,c(2,8,13)] %>% mutate(baseCSA = Zooid.area.cross.section.packing/Zooid.number)->CSA
for(r in 1:nrow(CSA)){
species <- mutate(CSA[r,], Species = rownames(CSA[r,]))
ZNcum <- rbind(species,ZN)
for(z in 3:60){
ZN <- species
ZN$Zooid.number <- z
ZN$Zooid.area.cross.section.packing <- z*ZN$baseCSA
ZNcum <- rbind(species,ZN)
print(ZN)
}
CSAcum <- rbind(species,ZNcum)
print(dim(CSAcum))
}
rbind()
3:60 %>% length() #58
#Power scaling
power <- full_join(CSA, kineTraits)
power %>% mutate(JetPower = Zooid.number.kine*Zooid.length.kine..cm.)
ggplot(power, aes(, Speed..cm.s.)) +
geom_point(aes(color=Architecture)) +
geom_text(label=kineTraits$Species, vjust = 0.9, hjust=-0.1)+
theme_bw()
ggplot(kineTraits[-15,], aes(x=Zooid.number*log((Zooid.length..mm.^3)), y = Speed..colonysize.min.)) +
geom_line(aes(color=Architecture), cex=2) +
theme_bw()+
scale_color_manual(values=setNames(c("turquoise","purple","magenta", "yellow", "orange", "green", "red"), unique(unique_traits$Architecture)))+
theme(axis.text.x = element_text(angle = 90))
#Jet angle, colony speed - color is architecture
ggplot(kineTraits, aes(SN.Jet.Motion.angle, Speed..colonysize.min.)) +
geom_point(aes(color=Architecture)) +
geom_text(label=kineTraits$Species, vjust = 0.9, hjust=-0.1)+
theme_bw()
#Zooid angle, colony speed - color is architecture
ggplot(kineTraits, aes(zDV.Zooid..Stolon.angle, Speed..colonysize.min.)) +
geom_point(aes(color=Architecture)) +
geom_text(label=kineTraits$Species, vjust = 0.9, hjust=-0.1)+
xlim(c(0, 110))+
theme_bw()
#CSA, colony speed - color is architecture
ggplot(kineTraits, aes(Zooid.area.cross.section.packing, Speed..colonysize.min.)) +
geom_point(aes(color=Architecture)) +
geom_text(label=kineTraits$Species, vjust = 0.9, hjust=-0.1)+
xlim(c(0, 40))+
theme_bw()
#packing, colony speed - color is architecture
ggplot(kineTraits, aes(Zooid.length.packing, Speed..colonysize.min.)) +
geom_point(aes(color=Architecture)) +
geom_text(label=kineTraits$Species, vjust = 0.9, hjust=-0.1)+
xlim(c(1, 10))+
theme_bw()
#COT, species - color is architecture
ggplot(kineTraits %>% filter(!is.na(Mean.Net.Cost..mgO2.ml.m.)), aes(x=Speed..colonysize.min., y=Mean.Net.Cost..mgO2.ml.m.)) +
geom_point(aes(color=Species, size=Speed..cm.s.)) +
theme_bw()
#COT vs %cost, species - color is architecture
ggplot(kineTraits %>% filter(!is.na(Mean.Net.Cost..mgO2.ml.m.)), aes(x=X..Cost.from.Swimming, y=Mean.Net.Cost..mgO2.ml.m.)) +
geom_point(aes(color=Species)) +
theme_bw()
ggplot(kineTraits %>% filter(!is.na(Mean.Net.Cost..mgO2.ml.m.)), aes(x=Mean.Gross.COT..mgO2.ml.m., y=DV.Zooid..Stolon.angle)) +
geom_point(aes(color=Species)) +
theme_bw()
PMScolor <- function(data, tree, x, y, chromo){
data <- data[match(tree$tip.label, data$Species),]
tip.cols <- brewer.pal(8,"Set1")[data[,chromo] %>%  as.character() %>% as.factor() %>% as.numeric()]
tip.cols <- c()
names(tip.cols)<-tree$tip.label
cols<-c(tip.cols[tree$tip.label],rep("black",tree$Nnode))
cols<-c(tip.cols[tree$tip.label],rep("black",tree$Nnode))
names(cols)<-1:(length(tree$tip)+tree$Nnode)
phylomorphospace(tree,as.matrix(data[,c(x,y)]),control=list(col.node=cols),label="horizontal", xlab=colnames(data)[x], ylab=colnames(data)[y])
}
#SIMMAP plotting
Morph <- c(setNames("Linear", "Ihlea punctata"),setNames("Oblique", "Thalia orientalis"),setNames("Linear","Salpa younti"),
setNames(unique_traits[,2],unique_traits$Species), setNames("Bipinnate","Ritteriella amboinensis"),
setNames("Linear","Salpa thompsoni"), setNames("Linear","Metcalfina hexagona"), setNames("Whorl","Cyclosalpa bakeri"),
setNames("Helical","Helicosalpa virgula"))
Mphylo <- drop.tip(extended_phylo, which(extended_phylo$tip.label=="Cyclosalpa floridiana" | extended_phylo$tip.label=="Brooksia lacromae"))
Morph
simmorph<-make.simmap(Mphylo,Morph[match(Mphylo$tip.label,names(Morph))],nsim=100,model="ER")
names(Morph)
Mphylo$tip.label
Morph[match(Mphylo$tip.label,names(Morph))]
Mphylo$tip.label %>% sort
names(Morph) %>% sort()
Mphylo <- drop.tip(extended_phylo, which(!(extended_phylo$tip.label %in% names(Morph))))
simmorph<-make.simmap(Mphylo,Morph[match(Mphylo$tip.label,names(Morph))],nsim=100,model="ER")
par(ask=F)
obj_t<-summary(simmorph,plot=FALSE)
cols_t<-setNames(c("turquoise", "magenta","gold","orange","red","green","purple"),mapped.states(simmorph)[,1])
plot(obj_t,colors=cols_t,fsize=0.8,cex=c(0.9,0.5), ftype="i")
add.simmap.legend(colors=cols_t,x=0, y=8 ,prompt=FALSE,fsize=0.9,)
plot(tree_salp)
write.tree(Mphylo, "GUCMmNSanger_TimeTree_salp18Sphylo.tre")
getwd()
plot(Mphylo)
#### [9] #### REVBAYES COLONY ARCHITECTURE EVOLUTION ################
RBPCMtree <- read.("RB_PCM/morph_output/ase_morph.tree")
#### [9] #### REVBAYES COLONY ARCHITECTURE EVOLUTION ################
RBPCMtree <- read.tree("RB_PCM/morph_output/ase_morph.tree")
#### [9] #### REVBAYES COLONY ARCHITECTURE EVOLUTION ################
RBPCMtree <- read.nexus("RB_PCM/morph_output/ase_morph.tree")
morphAncStates <- read.table("RB_PCM/morph_output/morph.states",sep='\t',header = T,stringsAsFactors = F)[,c(-1:-2)]
morphAncStates[morphAncStates==TRUE] <- "T"
apply(morphAncStates, 2, function(n){round(100*table(n)/sum(table(n)),2)->tabz;return(setNames(as.vector(tabz),names(tabz)))}) -> nodeStates
par(mfrow=c(4,5),mar=c(1,1,1,1))
lapply(nodeStates, function(v){
if(names(v)==c("C","W")){colors=c("yellow","magenta")}
if(names(v)==c("C", "O", "T", "W")){colors=c("yellow","cyan","purple", "magenta")}
if(names(v)==c("L")){colors=c("green")}
if(names(v)==c("B","L","O")){colors=c("red","green","cyan")}
if(names(v)==c("B","L","O","T")){colors=c("red","green","cyan","purple")}
if(names(v)==c("B","L","O","T", "W")){colors=c("red","green","cyan","purple", "magenta")}
if(names(v)==c("O","T", "W")){colors=c("cyan","purple", "magenta")}
pie(v, col=colors, labels=" ")})
