### Analyze Metaxa & Trawl Data
#Read metabarcoding data
setwd("/Volumes/GoogleDrive/My Drive/Metabarcoding_things/")
getwd()
### Analyze Metaxa & Trawl Data
#Read metabarcoding data
setwd("smb://localhost/alejandro.damianserrano@yale.edu - Google Drive/My Drive/Metabarcoding_things/")
### Analyze Metaxa & Trawl Data
#Read metabarcoding data
setwd("/smb://localhost/alejandro.damianserrano@yale.edu - Google Drive/My Drive/Metabarcoding_things/")
install.packages("googledrive")
install.packages("googledrive")
library(googledrive)
library(tidyverse)
library(reshape2)
library(scales)
library(RColorBrewer)
library(forcats)
library(vegan)
library(adegenet)
library(magrittr)
library(plyr)
library(paleotree)
library(phytools)
library(patchwork)
library(ggtree)
library(ggplotify)
library(scatterpie)
drive_get(path="/My Drive/Metabarcoding_things")
drive_get(path="My Drive/Metabarcoding_things")
drive_get(path="My Drive/Metabarcoding_things")
drive_get(path="My Drive/Metabarcoding_things")
drive_deauth()
drive_get(path="My Drive/Metabarcoding_things")
setwd("~/Documents/salp_ecomorphology/")
library(tidyverse)
library(ape)
library(phytools)
setwd("~/Documents/salp_ecomorphology/")
traits <- read.csv("salplit.tsv", sep="\t", stringsAsFactors = F)
View(traits)
traits <- read.csv("salplit.tsv", sep="\t", stringsAsFactors = F)
View(traits)
traits <- read.csv("salplit.tsv", sep="\t", stringsAsFactors = F)
traits <- read.csv("salplit.tsv", sep="\t", stringsAsFactors = F)
tree_salp <- rtree(length(unique(traits$Species)))
tree_salp$tip.label <- unique(traits$Species)
tree_salp
tree_salp %>% plot()
tree_salp_pruned <- drop.tip(tree_salp, which(!(tree_salp$tip.label %in% unique(traits$Species))))
pruned_traits <- traits[which(traits$Species %in% tree_salp_pruned$tip.label),]
ggplot(traits[which(traits$Variable=="Mean swimming speed cms"),], aes(x = Species, y = Value))
ggplot(traits[which(traits$Variable=="Mean swimming speed cms"),], aes(x = Species, y = Value)) + geom_point()
ggplot(traits[which(traits$Variable=="Mean swimming speed cms"),], aes(x = Species, y = Value)) + geom_point() + theme_bw()
ggplot(traits[which(traits$Variable=="Mean swimming speed cms"),], aes(x = Species, y = Value)) + geom_point() + theme_bw() + opts(axis.text.x=theme_text(angle=90))
ggplot(traits[which(traits$Variable=="Mean swimming speed cms"),], aes(x = Species, y = Value)) + geom_point() + theme_bw() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(traits[which(traits$Variable=="Pulsation rate Hz"),], aes(x = Species, y = Value)) + geom_point() + theme_bw() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(traits[which(traits$Variable=="Cost of locomotion J-kg-m"),], aes(x = Species, y = Value)) + geom_point() + theme_bw() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
library(reshape2)
cast_traits <- dcast(traits, Variable~Value)
cast_traits
cast_traits <- dcast(traits, Variable~Species)
dcast(traits, Variable~Species)
cast_traits <- dcast(traits, Variable~Species, mean)
cast_traits
cast_traits <- dcast(traits, Variable~Species, mode)
cast_traits
cast_traits <- dcast(traits, Species~Variable, value.var=Value)
cast_traits <- dcast(traits, Species~Variable, value.var="Value")
cast_traits
dcast(traits, Species~Variable, value.var="Value", fun.aggregate = function(x){mean(x, na.rm = T)})
cast_traits <- dcast(traits, Species~Variable, value.var="Value", fun.aggregate = function(x){if(is.numeric(x); return(mean(x)));else return sample(x)})
cast_traits <- dcast(traits, Species~Variable, value.var="Value", fun.aggregate = function(x){if(is.numeric(x); return(mean(x))) else return sample(x)})
cast_traits <- dcast(traits, Species~Variable, value.var="Value", fun.aggregate = function(x){if(is.numeric(x) return(mean(x))) else return sample(x)})
cast_traits <- dcast(traits, Species~Variable, value.var="Value", fun.aggregate = function(x){if(is.numeric(x) return(mean(x))) else return(sample(x))})
cast_traits <- dcast(traits, Species~Variable, value.var="Value", fun.aggregate = function(x){if(is.numeric(x) return(mean(x)))}; else{return(sample(x))}})
cast_num <- dcast(traits[which(traits$Class=="number"),], Species~Variable, value.var="Value", fun.aggregate = "mean")
cast_num <- dcast(traits[which(traits$Class=="number"),], Species~Variable, value.var="Value", fun.aggregate = mean)
cast_num
cast_num <- dcast(traits[which(traits$Class=="number"),], Species~Variable, value.var="Value", fun.aggregate = function(x){mean(x, na.rm = T)})
cast_num
warnings()
sapply(traits[which(traits$Class=="number"),],class)
cast_num <- dcast(traits[which(traits$Class=="number"),], Species~Variable, value.var="Value", fun.aggregate = function(x){mean(as.numeric(x), na.rm = T)})
cast_num
cast_num[is.nan(cast_num)]
cast_num[,-1] <- sapply(cast_num[,-1], function(x){x[is.nan(x)]<-NA})
cast_num
cast_num <- dcast(traits[which(traits$Class=="number"),], Species~Variable, value.var="Value", fun.aggregate = function(x){mean(as.numeric(x), na.rm = T)})
sapply(cast_num[,-1], function(x){x[is.nan(x)]<-NA})
gsub
gsub("NaN", "NA", cast_num)
gsub("NaN", "NA", cast_num) %>% as.data.frame()
gsub("NaN", "NA", cast_num) %>% as.data.frame() %>% class()
gsub("NaN", "NA", cast_num) %>% as.data.frame() %>% .[,1]
cast_num <- dcast(traits[which(traits$Class=="number"),], Species~Variable, value.var="Value", fun.aggregate = function(x){mean(as.numeric(x), na.rm = T)})
sapply(cast_num,class)
sapply(cast_num[,-1], function(x){x[which(is.nan(x))]<-NA})
cast_cat <- dcast(traits[which(traits$Class=="category"),], Species~Variable, value.var="Value")
cast_cat
cast_cat <- dcast(traits[which(traits$Class=="category"),], Species~Variable, value.var="Value", fun.aggregate = "sample")
cast_cat <- dcast(traits[which(traits$Class=="category"),], Species~Variable, value.var="Value", fun.aggregate = sample)
cast_cat
cast_cat <- dcast(traits[which(traits$Class=="category"),], Species~Variable, value.var="Value", fun.aggregate = unique)
morph <- traits[which(traits$Variable=="Chain architecture"),]
morph
morph <- traits[which(traits$Variable=="Chain architecture"),c(1,4)]
names(morph)
names(morph)[2] <- "Chain architecture"
traits <- read.csv("salplit.tsv", sep="\t", stringsAsFactors = F)
ggplot(traits[which(traits$Variable=="Mean swimming speed cms"),], aes(x = Species, y = Value)) + geom_point() + theme_bw() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(traits[which(traits$Variable=="Mean pulsation rate Hz"),], aes(x = Species, y = Value)) + geom_point() + theme_bw() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(traits[which(traits$Variable=="Cost of locomotion J-kg-m"),], aes(x = Species, y = Value)) + geom_point() + theme_bw() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
tree_salp <- read.newick("phylogeny/salps18Saligned.fa.treefile")
tree_salp
tree_salp$tip.label
str_remove_all(tree_salp$tip.label, "HQ.+_")
str_remove_all(tree_salp$tip.label, "HQ.+?_")
tree_salp <- read.newick("phylogeny/salps18Saligned.fa.treefile")
tree_salp$tip.label <- str_remove_all(tree_salp$tip.label, "HQ.+?_")
tree_salp$tip.label <- str_replace_all(tree_salp$tip.label, "_", " ")
tree_salp
plot(tree_salp)
nodelabels()
nodelabels()
reroot(tree_salp, 55) %>% plot()
tree_salp <- reroot(tree_salp, 55)
tiplabels()
tree_salp <- drop.tip(tree_salp, 32:39)
plot(tree_salp)
plot.phylo(tree_salp, show.node.label = T)
plot.phylo(tree_salp, show.node.label = T, cex=0.2)
plot.phylo(tree_salp, show.node.label = T, cex=0.5)
drop.tip(tree_salp, which(!(tree_salp$tip.label == unique(tree_salp$tip.label))))
tiplabels()
tree_salp <- drop.tip(tree_salp, c(29,24,26,17,21,2,3,4,6,7,8,13)) #drop duplicate species
plot.phylo(tree_salp, show.node.label = T, cex=0.5)
tree_salp <- read.newick("phylogeny/salps18Saligned.fa.treefile")
tree_salp$tip.label <- str_remove_all(tree_salp$tip.label, "HQ.+?_")
tree_salp$tip.label <- str_replace_all(tree_salp$tip.label, "_", " ")
tree_salp <- reroot(tree_salp, 55) #reroot
tree_salp <- drop.tip(tree_salp, 32:39) #drop outgroups
plot.phylo(tree_salp, show.node.label = T, cex=0.5)
tiplabels()
tree_salp <- drop.tip(tree_salp, c(29,24,26,17,21,2,3,4,6,7,8,13,19)) #drop duplicate species
plot.phylo(tree_salp, show.node.label = T, cex=0.5)
tree_salp$tip.label[which(tree_salp$tip.label == "Iasis cylindrica")] <- "Iasis (Weelia) cylindrica"
plot.phylo(tree_salp, show.node.label = T, cex=0.5)
tree_salp <- read.newick("phylogeny/salps18Saligned.fa.treefile")
tree_salp$tip.label <- str_remove_all(tree_salp$tip.label, "HQ.+?_")
tree_salp$tip.label <- str_replace_all(tree_salp$tip.label, "_", " ")
tree_salp <- reroot(tree_salp, 55) #reroot
tree_salp <- drop.tip(tree_salp, 32:39) #drop outgroups
plot.phylo(tree_salp, show.node.label = T, cex=0.5)
tiplabels()
tree_salp <- drop.tip(tree_salp, c(29,24,26,17,21,2,3,6,7,8,13,19)) #drop duplicate species
tree_salp$tip.label[which(tree_salp$tip.label == "Iasis cylindrica")] <- "Iasis (Weelia) cylindrica"
plot.phylo(tree_salp, show.node.label = T, cex=0.5)
tree_salp_pruned <- drop.tip(tree_salp, which(!(tree_salp$tip.label %in% unique(traits$Species)))) %>% chronos()
plot(tree_salp_pruned)
pruned_traits <- traits[which(traits$Species %in% tree_salp_pruned$tip.label),]
pruned_traits
cast_num <- dcast(traits[which(traits$Class=="number"),], Species~Variable, value.var="Value", fun.aggregate = function(x){mean(as.numeric(x), na.rm = T)})
cast_cat <- dcast(traits[which(traits$Class=="category"),], Species~Variable, value.var="Value", fun.aggregate = unique)
#cast_cat <- dcast(traits[which(traits$Class=="category"),], Species~Variable, value.var="Value", fun.aggregate = unique)
morph <- traits[which(traits$Variable=="Chain architecture"),c(1,4)]
names(morph)[2] <- "Chain architecture"
morph
cast_num
cast_num[is.na(cast_num)]
cast_num[is.na(cast_num)] <- 0
dotTree(tree,as.matrix(cast_num$`Mean swimming speed cms`),length=10,ftype="i")
dotTree(tree_salp,as.matrix(cast_num$`Mean swimming speed cms`),length=10,ftype="i")
cast_num
as.matrix(cast_num$`Mean swimming speed cms`)
dotTree(tree_salp,as.matrix(cbind(cast_num$Species, cast_num$`Mean swimming speed cms`)),length=10,ftype="i")
as.matrix(cbind(cast_num$Species, cast_num$`Mean swimming speed cms`))
View(cast_num)
dotTree(tree_salp,cast_num[,c(1,7)],length=10,ftype="i")
cast_num[,c(1,7)]
cast_num <- dcast(pruned_traits[which(pruned_traits$Class=="number"),], Species~Variable, value.var="Value", fun.aggregate = function(x){mean(as.numeric(x), na.rm = T)})
cast_num[is.na(cast_num)] <- 0 #CAREFUL!!
dotTree(tree_salp,cast_num[,c(1,7)],length=10,ftype="i")
dotTree(tree_salp_pruned,cast_num[,c(1,7)],length=10,ftype="i")
dotTree(tree_salp_pruned,cast_num[,c(1,7)],length=10,ftype="i")
dotTree(tree_salp_pruned,cast_num[,c(1,7)])
#cast_cat <- dcast(traits[which(traits$Class=="category"),], Species~Variable, value.var="Value", fun.aggregate = unique)
morph <- pruned_traits[which(pruned_traits$Variable=="Chain architecture"),c(1,4)]
names(morph)[2] <- "Chain architecture"
morph
dotTree(tree_salp_pruned,setNames(as.character(cast_num$Species), cast_num$`Mean swimming speed cms`))
setNames(as.character(cast_num$Species), cast_num$`Mean swimming speed cms`)
dotTree(tree_salp_pruned,setNames(as.character(cast_num$`Mean swimming speed cms`), cast_num$Species))
setNames(as.character(cast_num$`Mean swimming speed cms`), cast_num$Species)
dotTree(tree_salp_pruned,as.numeric(setNames(as.character(cast_num$`Mean swimming speed cms`),cast_num$Species)))
as.numeric(setNames(as.character(cast_num$`Mean swimming speed cms`),cast_num$Species))
dotTree(tree_salp_pruned,setNames(as.numeric(cast_num$`Mean swimming speed cms`),cast_num$Species))
setNames(as.numeric(cast_num$`Mean swimming speed cms`),cast_num$Species)
dotTree(tree_salp_pruned,setNames(as.numeric(cast_num$`Mean swimming speed cms`),cast_num$Species))
dotTree(tree_salp_pruned,setNames(as.numeric(cast_num$`Mean swimming speed cms`),cast_num$Species), ftype="i")
dotTree(tree_salp_pruned,setNames(as.numeric(cast_num$`Mean swimming speed cms`),cast_num$Species), length=10)
setNames(as.numeric(cast_num$`Mean swimming speed cms`),cast_num$Species)
setNames(as.numeric(cast_num$`Mean swimming speed cms`),cast_num$Species) %>% class()
cast_num <- dcast(pruned_traits[which(pruned_traits$Class=="number"),], Species~Variable, value.var="Value", fun.aggregate = function(x){mean(as.numeric(x), na.rm = T)})
dotTree(tree_salp_pruned,setNames(as.numeric(cast_num$`Mean swimming speed cms`),cast_num$Species))
setNames(as.numeric(cast_num$`Mean swimming speed cms`),cast_num$Species)
dotTree(tree_salp_pruned,setNames(as.numeric(cast_num$`Mean swimming speed cms`)[which(!is.na(cast_num$`Mean swimming speed cms`))],cast_num$Species))
drop.tip(tree_salp_pruned, which(!(tree_salp_pruned$tip.label %in% setNames(as.numeric(cast_num$`Mean swimming speed cms`)[which(!is.na(cast_num$`Mean swimming speed cms`))],cast_num$Species))))
drop.tip(tree_salp_pruned, which(!(tree_salp_pruned$tip.label %in% setNames(as.numeric(cast_num$`Mean swimming speed cms`)[which(!is.na(cast_num$`Mean swimming speed cms`))],cast_num$Species))))
dotTree(drop.tip(tree_salp_pruned, which(!(tree_salp_pruned$tip.label %in% names(setNames(as.numeric(cast_num$`Mean swimming speed cms`)[which(!is.na(cast_num$`Mean swimming speed cms`))],cast_num$Species))))),setNames(as.numeric(cast_num$`Mean swimming speed cms`)[which(!is.na(cast_num$`Mean swimming speed cms`))],cast_num$Species))
names(setNames(as.numeric(cast_num$`Mean swimming speed cms`)[which(!is.na(cast_num$`Mean swimming speed cms`))],cast_num$Species)))
for(i in 2:ncol(cast_num)){
CH_I=as.numeric(cast_num[,i])
names(CH_I) = cast_num$Species
CH_I= CH_I[!is.na(CH_I)]
treeI = drop.tip(tree_salp_pruned,which(!(tree_salp_pruned$tip.label %in% names(CH_I))))
class(treeI) = "phylo"
PSIG <- phylosig(treeI, CH_I, test=T)
PSIG$K
PSIG$P
length(CH_I)
}
for(i in 2:ncol(cast_num)){
CH_I=as.numeric(cast_num[,i])
names(CH_I) = cast_num$Species
CH_I= CH_I[!is.na(CH_I)]
treeI = drop.tip(tree_salp_pruned,which(!(tree_salp_pruned$tip.label %in% names(CH_I))))
class(treeI) = "phylo"
PSIG <- phylosig(treeI, CH_I, test=T)
PSIG$K %>% print()
PSIG$P %>% print()
length(CH_I) %>% print()
}
for(i in 2:ncol(cast_num)){
CH_I=as.numeric(cast_num[,i])
names(CH_I) = cast_num$Species
CH_I= CH_I[!is.na(CH_I)]
treeI = drop.tip(tree_salp_pruned,which(!(tree_salp_pruned$tip.label %in% names(CH_I))))
class(treeI) = "phylo"
PSIG <- phylosig(treeI, CH_I, test=T)
print(names(cast_num)[i])
PSIG$K %>% print()
PSIG$P %>% print()
length(CH_I) %>% print()
}
plot(tree_salp)
tree_salp <- read.newick("phylogeny/salps18Saligned.fa.treefile")
tree_salp$tip.label <- str_remove_all(tree_salp$tip.label, "HQ.+?_")
tree_salp$tip.label <- str_replace_all(tree_salp$tip.label, "_", " ")
plot(tree_salp)
tree_salp <- reroot(tree_salp, 55) #reroot
plot(tree_salp)
for(i in 2:ncol(cast_num)){
CH_I=as.numeric(cast_num[,i])
names(CH_I) = cast_num$Species
CH_I= CH_I[!is.na(CH_I)]
treeI = drop.tip(tree_salp_pruned,which(!(tree_salp_pruned$tip.label %in% names(CH_I))))
class(treeI) = "phylo"
PSIG <- phylosig(treeI, CH_I, test=T)
print(names(cast_num)[i])
PSIG$K %>% print()
PSIG$P %>% print()
length(CH_I) %>% print()
dotTree(treeI,CH_I)
}
for(i in 2:ncol(cast_num)){
CH_I=as.numeric(cast_num[,i])
names(CH_I) = cast_num$Species
CH_I= CH_I[!is.na(CH_I)]
treeI = drop.tip(tree_salp_pruned,which(!(tree_salp_pruned$tip.label %in% names(CH_I))))
class(treeI) = "phylo"
PSIG <- phylosig(treeI, CH_I, test=T)
print(names(cast_num)[i])
PSIG$K %>% print()
PSIG$P %>% print()
length(CH_I) %>% print()
#dotTree(treeI,CH_I)
plotTree.barplot(treeI,CH_I)
}
CH_I
treeI
plotTree.barplot(treeI,CH_I)
CH_I
CH_I %>% class
> plot.window <- function(xlim, ylim, log="", asp=NA, ...) {
+    if (!all(is.finite(xlim))) xlim <- c(0,1)
+    if (!all(is.finite(ylim))) ylim <- c(0,1)
+    plot.window.orig(xlim, ylim, log="", asp=NA, ...)
+ }
> plot.window <- function(xlim, ylim, log="", asp=NA, ...) {if (!all(is.finite(xlim))) xlim <- c(0,1)
if (!all(is.finite(ylim))) ylim <- c(0,1) plot.window.orig(xlim, ylim, log="", asp=NA, ...)
+ }
for(i in 2:ncol(cast_num)){
CH_I=as.numeric(cast_num[,i])
names(CH_I) = cast_num$Species
CH_I= CH_I[!is.na(CH_I)]
treeI = drop.tip(tree_salp_pruned,which(!(tree_salp_pruned$tip.label %in% names(CH_I))))
class(treeI) = "phylo"
PSIG <- phylosig(treeI, CH_I, test=T)
print(names(cast_num)[i])
PSIG$K %>% print()
PSIG$P %>% print()
length(CH_I) %>% print()
#dotTree(treeI,CH_I)
phenogram(treeI,CH_I,spread.labels=TRUE,spread.cost=c(1,0))
}
for(i in 2:ncol(cast_num)){
CH_I=as.numeric(cast_num[,i])
names(CH_I) = cast_num$Species
CH_I= CH_I[!is.na(CH_I)]
treeI = drop.tip(tree_salp_pruned,which(!(tree_salp_pruned$tip.label %in% names(CH_I))))
class(treeI) = "phylo"
PSIG <- phylosig(treeI, CH_I, test=T)
print(names(cast_num)[i])
PSIG$K %>% print()
PSIG$P %>% print()
length(CH_I) %>% print()
#dotTree(treeI,CH_I)
if(length(CH_I)>4){
phenogram(treeI,CH_I,spread.labels=TRUE,spread.cost=c(1,0))}
}
for(i in 2:ncol(cast_num)){
CH_I=as.numeric(cast_num[,i])
names(CH_I) = cast_num$Species
CH_I= CH_I[!is.na(CH_I)]
treeI = drop.tip(tree_salp_pruned,which(!(tree_salp_pruned$tip.label %in% names(CH_I))))
class(treeI) = "phylo"
PSIG <- phylosig(treeI, CH_I, test=T)
print(names(cast_num)[i])
PSIG$K %>% print()
PSIG$P %>% print()
length(CH_I) %>% print()
#dotTree(treeI,CH_I)
if(length(CH_I)>4){
phenogram(treeI,CH_I)}
}
for(i in 2:ncol(cast_num)){
CH_I=as.numeric(cast_num[,i])
names(CH_I) = cast_num$Species
CH_I= CH_I[!is.na(CH_I)]
treeI = drop.tip(tree_salp_pruned,which(!(tree_salp_pruned$tip.label %in% names(CH_I))))
class(treeI) = "phylo"
PSIG <- phylosig(treeI, CH_I, test=T)
print(names(cast_num)[i])
PSIG$K %>% print()
PSIG$P %>% print()
length(CH_I) %>% print()
#dotTree(treeI,CH_I)
if(length(CH_I)>4){
obj<-contMap(treeI,CH_I,plot=FALSE)
plot(obj,lwd=7,xlim=c(-0.2,3.6))
errorbar.contMap(obj)}
}
for(i in 2:ncol(cast_num)){
CH_I=as.numeric(cast_num[,i])
names(CH_I) = cast_num$Species
CH_I= CH_I[!is.na(CH_I)]
treeI = drop.tip(tree_salp_pruned,which(!(tree_salp_pruned$tip.label %in% names(CH_I))))
class(treeI) = "phylo"
PSIG <- phylosig(treeI, CH_I, test=T)
print(names(cast_num)[i])
PSIG$K %>% print()
PSIG$P %>% print()
length(CH_I) %>% print()
#dotTree(treeI,CH_I)
if(length(CH_I)>4){
obj<-contMap(treeI,CH_I,plot=FALSE)
plot(obj,lwd=7,xlim=c(-0.2,3.6))
}
}
for(i in 2:ncol(cast_num)){
CH_I=as.numeric(cast_num[,i])
names(CH_I) = cast_num$Species
CH_I= CH_I[!is.na(CH_I)]
treeI = drop.tip(tree_salp_pruned,which(!(tree_salp_pruned$tip.label %in% names(CH_I))))
class(treeI) = "phylo"
PSIG <- phylosig(treeI, CH_I, test=T)
print(names(cast_num)[i])
PSIG$K %>% print()
PSIG$P %>% print()
length(CH_I) %>% print()
#dotTree(treeI,CH_I)
if(length(CH_I)>4){
obj<-contMap(treeI,CH_I,plot=FALSE)
grey<-setMap(obj,c("white","black"))
par(mfrow=c(1,1))
plot(grey,lwd=7,ftype="off",legend=2)
}
}
for(i in 2:ncol(cast_num)){
CH_I=as.numeric(cast_num[,i])
names(CH_I) = cast_num$Species
CH_I= CH_I[!is.na(CH_I)]
treeI = drop.tip(tree_salp_pruned,which(!(tree_salp_pruned$tip.label %in% names(CH_I))))
class(treeI) = "phylo"
PSIG <- phylosig(treeI, CH_I, test=T)
print(names(cast_num)[i])
PSIG$K %>% print()
PSIG$P %>% print()
length(CH_I) %>% print()
#dotTree(treeI,CH_I)
if(length(CH_I)>4){
obj<-contMap(treeI,CH_I,plot=FALSE)
grey<-setMap(obj,c("white","black"))
par(mfrow=c(1,1))
plot(grey,lwd=7,ftype="off",legend=2, leg.txt=names(cast_num)[i])
}
}
for(i in 2:ncol(cast_num)){
CH_I=as.numeric(cast_num[,i])
names(CH_I) = cast_num$Species
CH_I= CH_I[!is.na(CH_I)]
treeI = drop.tip(tree_salp_pruned,which(!(tree_salp_pruned$tip.label %in% names(CH_I))))
class(treeI) = "phylo"
PSIG <- phylosig(treeI, CH_I, test=T)
print(names(cast_num)[i])
PSIG$K %>% print()
PSIG$P %>% print()
length(CH_I) %>% print()
#dotTree(treeI,CH_I)
if(length(CH_I)>4){
obj<-contMap(treeI,CH_I,plot=FALSE)
grey<-setMap(obj,c("white","black"))
par(mfrow=c(1,1))
plot(grey,lwd=7,legend=2, leg.txt=names(cast_num)[i])
}
}
for(i in 2:ncol(cast_num)){
CH_I=as.numeric(cast_num[,i])
names(CH_I) = cast_num$Species
CH_I= CH_I[!is.na(CH_I)]
treeI = drop.tip(tree_salp_pruned,which(!(tree_salp_pruned$tip.label %in% names(CH_I))))
class(treeI) = "phylo"
PSIG <- phylosig(treeI, CH_I, test=T)
print(names(cast_num)[i])
PSIG$K %>% print()
PSIG$P %>% print()
length(CH_I) %>% print()
#dotTree(treeI,CH_I)
if(length(CH_I)>4){
obj<-contMap(treeI,CH_I,plot=FALSE)
grey<-setMap(obj,c("white","black"))
par(mfrow=c(1,1))
plot(grey,lwd=7,legend=2, leg.txt=names(cast_num)[i], fsize=c(0.4,1))
}
}
for(i in 2:ncol(cast_num)){
CH_I=as.numeric(cast_num[,i])
names(CH_I) = cast_num$Species
CH_I= CH_I[!is.na(CH_I)]
treeI = drop.tip(tree_salp_pruned,which(!(tree_salp_pruned$tip.label %in% names(CH_I))))
class(treeI) = "phylo"
PSIG <- phylosig(treeI, CH_I, test=T)
print(names(cast_num)[i])
PSIG$K %>% print()
PSIG$P %>% print()
length(CH_I) %>% print()
#dotTree(treeI,CH_I)
if(length(CH_I)>4){
obj<-contMap(treeI,CH_I,plot=FALSE)
grey<-setMap(obj,c("white","black"))
par(mfrow=c(1,1))
plot(grey,lwd=7,legend=2, leg.txt=names(cast_num)[i], fsize=c(1,0.5))
}
}
obj<-fancyTree(tree_salp_pruned,type="scattergram",X=cast_num[,1:5])
obj<-fancyTree(tree_salp_pruned,type="scattergram",X=cast_num[,2:5])
setNames(pruned_traits[which(pruned_traits$Variable=="Chain architecture"),4], pruned_traits[which(pruned_traits$Variable=="Chain architecture"),1])
#cast_cat <- dcast(traits[which(traits$Class=="category"),], Species~Variable, value.var="Value", fun.aggregate = unique)
morph <- setNames(pruned_traits[which(pruned_traits$Variable=="Chain architecture"),4], pruned_traits[which(pruned_traits$Variable=="Chain architecture"),1])
simmorph<-make.simmap(tree_salp_pruned,morph,model="ER",nsim=100)
mapped.states(simmorph)
cols<-setNames(palette()[1:6],mapped.states(simmorph))
cols<-setNames(palette()[1:6],mapped.states(simmorph))
palette()[1:6]
mapped.states(simmorph)
mapped.states(simmorph)[,1]
cols<-setNames(palette()[1:6],mapped.states(simmorph)[,1])
plot(simmorph,cols,type="fan",fsize=0.8,lwd=3,ftype="i")
simmorph<-make.simmap(tree_salp_pruned,morph,model="ER",nsim=1)
mapped.states(simmorph)[,1]
cols<-setNames(palette()[1:6],mapped.states(simmorph))
plot(simmorph,cols,type="fan",fsize=0.8,lwd=3,ftype="i")
add.simmap.legend(colors=cols,x=0.9*par()$usr[1],y=0.9*par()$usr[4],prompt=FALSE,fsize=0.9)
simmorph<-make.simmap(tree_salp_pruned,morph,model="ER",nsim=1)
cols<-setNames(palette()[1:6],mapped.states(simmorph))
plot(simmorph,cols,type="fan",fsize=0.8,lwd=3,ftype="i")
add.simmap.legend(colors=cols,x=0.9*par()$usr[1],y=0.9*par()$usr[4],prompt=FALSE,fsize=0.9)
simmorph<-make.simmap(tree_salp_pruned,morph,model="ER",nsim=100)
obj<-summary(simmorph,plot=FALSE)
plot(obj,colors=cols,fsize=0.8,cex=c(0.5,0.3))
plot(obj,colors=cols,fsize=0.8,cex=c(0.5,0.3))
add.simmap.legend(colors=cols,x=0.9*par()$usr[1], y=0.9*par()$usr[4],prompt=FALSE,fsize=0.9)
plot(obj,colors=cols,fsize=0.8,cex=c(0.5,0.3))
add.simmap.legend(colors=cols,x=0.9*par()$usr[1], y=0.9*par()$usr[4],prompt=FALSE,fsize=0.9, vertical=F)
add.simmap.legend(colors=cols,x=0.9*par()$usr[1], y=0.2,prompt=FALSE,fsize=0.9)
plot(obj,colors=cols,fsize=0.8,cex=c(0.5,0.3))
plot(obj,colors=cols,fsize=0.8,cex=c(0.5,0.3))
par(ask=F)
plot(obj,colors=cols,fsize=0.8,cex=c(0.5,0.3))
add.simmap.legend(colors=cols,x=0.2, y=0.2,prompt=FALSE,fsize=0.9)
add.simmap.legend(colors=cols,x=1, y=1,prompt=FALSE,fsize=0.9)
add.simmap.legend(colors=cols,x=1, y=3,prompt=FALSE,fsize=0.9)
add.simmap.legend(colors=cols,x=1, y=4,prompt=FALSE,fsize=0.9)
add.simmap.legend(colors=cols,x=0, y=4,prompt=FALSE,fsize=0.9)
plot(obj,colors=cols,fsize=0.8,cex=c(0.5,0.3))
add.simmap.legend(colors=cols,x=0, y=4,prompt=FALSE,fsize=0.9)
obj
plot(obj,colors=cols,fsize=0.8,cex=c(0.5,0.3), ftype="i")
plot(obj,colors=cols,fsize=0.8,cex=c(0.9,0.3), ftype="i")
plot(obj,colors=cols,fsize=0.8,cex=c(0.9,0.5), ftype="i")
add.simmap.legend(colors=cols,x=0, y=4,prompt=FALSE,fsize=0.9,)
