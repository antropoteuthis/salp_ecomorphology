AICdf
DVSZ<-contMap(Ctree,C,plot=FALSE)
DVSZ<-contMap(Ctree,C,plot=FALSE)
DVSZ<-setMap(DVSZ,c("white","black"))
par(mfrow=c(1,1))
plot(DVSZ,lwd=7,legend=2, leg.txt=names(expected_angles)[6], fsize=c(1,0.5))
ace(C, Ctree, model="EB")
nodelabels()
phenogram(Ctree,C)
AICdf = as.data.frame(matrix(ncol=6,nrow=2))
colnames(AICdf) = c("Variable", "white_noise", "starBM", "BM", "EB", "OU")
angle_tree <- chronos(tree_salp)
#angle_tree <- chronos(drop.tip(tree_salp, which(tree_salp$tip.label %in% c("Pegea confoederata","Pegea bicaudata","Cyclosalpa affinis","Cyclosalpa polae","Cyclosalpa sewelli","Cyclosalpa floridiana"))))
startree <- rescale(angle_tree, "lambda", 0)
for(c in 1:ncol(expected_angles)){
C = expected_angles[which(rownames(expected_angles) %in% angle_tree$tip.label),c]
names(C) = rownames(expected_angles)[which(rownames(expected_angles) %in% angle_tree$tip.label)]
C = C[!is.na(C)]
Ctree = drop.tip(angle_tree, which(!(angle_tree$tip.label %in% names(C))))
startree_C = drop.tip(startree, which(!(startree$tip.label %in% names(C))))
model_matrix = matrix("NA", nrow = 5, ncol = 3)
colnames(model_matrix) = c("aicc","aicc_best","dAICc")
row.names(model_matrix) = c("white", "starBM", "BM", "EB", "OU")
for(j in 1:dim(model_matrix)[1]){
if(j==2){
temp_model = fitContinuous(startree_C, C, model="BM")$opt
}
else{
temp_model = fitContinuous(Ctree, C, model=row.names(model_matrix)[j])$opt
}
model_matrix = apply(model_matrix,2, as.numeric)
row.names(model_matrix) = c("white", "starBM", "BM", "EB", "OU")
model_matrix[j, "aicc"] <- temp_model$aicc
}
model_matrix[,"aicc_best"] <- min(model_matrix[,"aicc"])
model_matrix[,"dAICc"] <- model_matrix[, "aicc"] - model_matrix[j, "aicc_best"]
print(names(expected_angles)[c])
string_c <- c(names(expected_angles)[c], model_matrix[,3])
names(string_c) = colnames(AICdf)
AICdf[c,] <- string_c
}
AICdf[,2:6] = apply(AICdf[,2:6], 2, as.numeric) %>% apply(2, function(x){round(x,3)})
phenogram(Ctree,C)
DVSZ<-contMap(Ctree,C,plot=FALSE)
DVSZ<-setMap(DVSZ,c("white","black"))
par(mfrow=c(1,1))
plot(DVSZ,lwd=7,legend=2, leg.txt=names(expected_angles)[6], fsize=c(1,0.5))
T_I=transits[,t] %>% as.factor() %>% as.numeric()-1
names(T_I) = transits$Species
T_I
T_J=transits[,j] %>% as.factor() %>% as.numeric()-1
names(T_I) = transits$Species
T_J
names(T_I) = transits$Species
T_J
for(t in 2:5){
T_I=transits[,t] %>% as.factor() %>% as.numeric()-1
names(T_I) = transits$Species
for(j in 2:5){
if(t != j){
T_J=transits[,j] %>% as.factor() %>% as.numeric()-1
names(T_J) = transits$Species
fitPagel(tree_salp_morph,T_I,T_J) %>% print()
}
}
}
for(t in 2:5){
T_I=transits[,t]
names(T_I) = transits$Species
for(j in 2:5){
if(t != j){
T_J=transits[,j]
names(T_J) = transits$Species
fitPagel(tree_salp_morph,T_I,T_J) %>% print()
}
}
}
CHMM_transits <- corHMM(tree_salp_morph, transits, rate.cat = 4)
for(t in 2:5){
T_I=transits[,t]
names(T_I) = transits$Species
for(j in 2:5){
if(t != j){
T_J=transits[,j]
names(T_J) = transits$Species
fitPagel(tree_salp_morph,T_I,T_J) %>% plot()
}
}
}
par(mfrow=c(4,4))
for(t in 2:5){
T_I=transits[,t]
names(T_I) = transits$Species
for(j in 2:5){
if(t != j){
T_J=transits[,j]
names(T_J) = transits$Species
fitPagel(tree_salp_morph,T_I,T_J) %>% plot(lwd.by.rate=TRUE)
}
}
}
fitPagel(tree_salp_morph,cluT,bipT)->cluBip
cluBip %>% plot(lwd.by.rate=TRUE)
cluBip
#Colony morphologies as transition characters with exclusionary states (NA)
exc_transits <- read.csv("Exclusive_states.tsv", sep='\t', header = T, stringsAsFactors = F)
exc_transits
read.csv("Exclusive_states.tsv", sep='\t', header = T, stringsAsFactors = F) %>% sapply(as.character)
exc_transits[is.na(exc_transits)]
exc_transits <- read.csv("Exclusive_states.tsv", sep='\t', header = T, stringsAsFactors = F) %>% sapply(as.character)
exc_transits[is.na(exc_transits)] <- "N"
exc_transits
models=c("ER","ARD")
exc_transits
for(t in c(2,3,5,6)){
T_I=exc_transits[,t]
names(T_I) = exc_transits$Species
for(m in 1:2){
print(names(exc_transits)[t])
print(models[m])
fitDiscrete(tree_salp_morph, T_I, model=models[m]) %>% print()
simT<-make.simmap(tree_salp_morph,T_I,nsim=100,model=models[m],pi=table(T_I)/sum(table(T_I)))
par(ask=F)
obj_t<-summary(simT,plot=FALSE)
cols_t<-setNames(palette()[1:2],mapped.states(simT)[,1])
plot(obj_t,colors=cols_t,fsize=0.8,cex=c(0.9,0.5), ftype="i")
add.simmap.legend(colors=cols_t,x=0, y=4,prompt=FALSE,fsize=0.9)
ace(T_I, tree_salp_morph, type = "discrete", model=models[m]) %>% print()
}
}
exc_transits <- as.data.frame(exc_transits)
exc_transits$Species
for(t in c(2,3,5,6)){
T_I=exc_transits[,t]
names(T_I) = exc_transits$Species
for(m in 1:2){
print(names(exc_transits)[t])
print(models[m])
fitDiscrete(tree_salp_morph, T_I, model=models[m]) %>% print()
simT<-make.simmap(tree_salp_morph,T_I,nsim=100,model=models[m],pi=table(T_I)/sum(table(T_I)))
par(ask=F)
obj_t<-summary(simT,plot=FALSE)
cols_t<-setNames(palette()[1:2],mapped.states(simT)[,1])
plot(obj_t,colors=cols_t,fsize=0.8,cex=c(0.9,0.5), ftype="i")
add.simmap.legend(colors=cols_t,x=0, y=4,prompt=FALSE,fsize=0.9)
ace(T_I, tree_salp_morph, type = "discrete", model=models[m]) %>% print()
}
}
models=c("ER","SYM","ARD")
T_I
as.data.frame(exc_transits %>% sapply(as.character))
exc_transits <- as.data.frame(exc_transits %>% sapply(as.character))
models=c("ER","SYM","ARD")
for(t in c(2,3,5,6)){
T_I=exc_transits[,t]
names(T_I) = exc_transits$Species
for(m in 1:2){
print(names(exc_transits)[t])
print(models[m])
fitDiscrete(tree_salp_morph, T_I, model=models[m]) %>% print()
simT<-make.simmap(tree_salp_morph,T_I,nsim=100,model=models[m],pi=table(T_I)/sum(table(T_I)))
par(ask=F)
obj_t<-summary(simT,plot=FALSE)
cols_t<-setNames(palette()[1:2],mapped.states(simT)[,1])
plot(obj_t,colors=cols_t,fsize=0.8,cex=c(0.9,0.5), ftype="i")
add.simmap.legend(colors=cols_t,x=0, y=4,prompt=FALSE,fsize=0.9)
ace(T_I, tree_salp_morph, type = "discrete", model=models[m]) %>% print()
}
}
1:length(unique(T_I))
par(mfrow=c(3,1))
for(t in c(2,3,5,6)){
T_I=exc_transits[,t]
names(T_I) = exc_transits$Species
for(m in 1:2){
print(names(exc_transits)[t])
print(models[m])
fitDiscrete(tree_salp_morph, T_I, model=models[m]) %>% print()
simT<-make.simmap(tree_salp_morph,T_I,nsim=100,model=models[m],pi=table(T_I)/sum(table(T_I)))
par(ask=F)
obj_t<-summary(simT,plot=FALSE)
cols_t<-setNames(palette()[1:length(unique(T_I))],mapped.states(simT)[,1])
plot(obj_t,colors=cols_t,fsize=0.8,cex=c(0.9,0.5), ftype="i")
add.simmap.legend(colors=cols_t,x=0, y=4,prompt=FALSE,fsize=0.9)
ace(T_I, tree_salp_morph, type = "discrete", model=models[m]) %>% print()
}
}
models=c("ER","SYM","ARD")
par(mfrow=c(3,1))
for(t in c(2,3,5,6)){
T_I=exc_transits[,t]
names(T_I) = exc_transits$Species
for(m in 1:length(models)){
print(names(exc_transits)[t])
print(models[m])
fitDiscrete(tree_salp_morph, T_I, model=models[m]) %>% print()
simT<-make.simmap(tree_salp_morph,T_I,nsim=100,model=models[m],pi=table(T_I)/sum(table(T_I)))
par(ask=F)
obj_t<-summary(simT,plot=FALSE)
cols_t<-setNames(palette()[1:length(unique(T_I))],mapped.states(simT)[,1])
plot(obj_t,colors=cols_t,fsize=0.8,cex=c(0.9,0.5), ftype="i")
add.simmap.legend(colors=cols_t,x=0, y=4,prompt=FALSE,fsize=0.9)
ace(T_I, tree_salp_morph, type = "discrete", model=models[m]) %>% print()
}
}
exc_transits <- read.csv("Exclusive_states.tsv", sep='\t', header = T, stringsAsFactors = F) %>% sapply(as.character)
exc_transits
exc_transits <- read.csv("Exclusive_states.tsv", sep='\t', header = T, stringsAsFactors = F)
exc_transits <- as.data.frame(exc_transits %>% sapply(as.character))
exc_transits
models=c("ER","SYM","ARD")
par(mfrow=c(3,1))
for(t in c(2,3,5,6)){
T_I=exc_transits[,t]
names(T_I) = exc_transits$Species
for(m in 1:length(models)){
print(names(exc_transits)[t])
print(models[m])
fitDiscrete(tree_salp_morph, T_I, model=models[m]) %>% print()
simT<-make.simmap(tree_salp_morph,T_I,nsim=100,model=models[m],pi=table(T_I)/sum(table(T_I)))
par(ask=F)
obj_t<-summary(simT,plot=FALSE)
cols_t<-setNames(palette()[1:length(unique(T_I))],mapped.states(simT)[,1])
plot(obj_t,colors=cols_t,fsize=0.8,cex=c(0.9,0.5), ftype="i")
add.simmap.legend(colors=cols_t,x=0, y=4,prompt=FALSE,fsize=0.9)
ace(T_I, tree_salp_morph, type = "discrete", model=models[m]) %>% print()
}
}
for(t in c(2,3,5,6)){
T_I=exc_transits[,t]
names(T_I) = exc_transits$Species
for(m in 1:length(models)){
print(names(exc_transits)[t])
print(models[m])
fitDiscrete(tree_salp_morph, T_I, model=models[m])->fiti
fiti$opt$aicc %>% print()
fiti$opt$k %>% print()
}
}
models=c("ER","SYM","ARD","meristic","meristic")
for(t in c(2:6)){
T_I=exc_transits[,t]
names(T_I) = exc_transits$Species
for(m in 1:length(models)){
print(names(exc_transits)[t])
print(models[m])
if(m==5){
fitDiscrete(tree_salp_morph, T_I, model=models[m],symmetric=T)->fiti
}
ifelse(m==6){
fitDiscrete(tree_salp_morph, T_I, model=models[m],symmetric=F)->fiti
}
else fitDiscrete(tree_salp_morph, T_I, model=models[m])->fiti
fiti$opt$aicc %>% print()
fiti$opt$k %>% print()
}
}
for(t in c(2:6)){
T_I=exc_transits[,t]
names(T_I) = exc_transits$Species
for(m in 1:length(models)){
print(names(exc_transits)[t])
print(models[m])
if(m>4){
fitDiscrete(tree_salp_morph, T_I, model=models[m],symmetric=ifelse(m==5,T,F))->fiti
}
else fitDiscrete(tree_salp_morph, T_I, model=models[m])->fiti
fiti$opt$aicc %>% print()
fiti$opt$k %>% print()
}
}
models=c("ER","SYM","ARD","meristic","meristic")
for(t in c(2:6)){
T_I=exc_transits[,t]
names(T_I) = exc_transits$Species
for(m in 1:length(models)){
print(names(exc_transits)[t])
print(models[m])
if(m>3){
fitDiscrete(tree_salp_morph, T_I, model=models[m],symmetric=ifelse(m==4,T,F))->fiti
}
else fitDiscrete(tree_salp_morph, T_I, model=models[m])->fiti
fiti$opt$aicc %>% print()
fiti$opt$k %>% print()
}
}
#plotting
par(mfrow=c(1,1))
for(t in c(2:6)){
T_I=exc_transits[,t]
names(T_I) = exc_transits$Species
print(names(exc_transits)[t])
simT<-make.simmap(tree_salp_morph,T_I,nsim=100,model="ER",pi=table(T_I)/sum(table(T_I)))
par(ask=F)
obj_t<-summary(simT,plot=FALSE)
cols_t<-setNames(palette()[1:length(unique(T_I))],mapped.states(simT)[,1])
plot(obj_t,colors=cols_t,fsize=0.8,cex=c(0.9,0.5), ftype="i")
add.simmap.legend(colors=cols_t,x=0, y=4,prompt=FALSE,fsize=0.9)
}
t=4
exc_transits[,t]
T_I=exc_transits[,t]
names(T_I) = exc_transits$Species
simT<-make.simmap(tree_salp_morph,T_I,nsim=100,model="ER",pi=table(T_I)/sum(table(T_I)))
par(ask=F)
obj_t<-summary(simT,plot=FALSE)
cols_t<-setNames(palette()[1:length(unique(T_I))],mapped.states(simT)[,1])
plot(obj_t,colors=cols_t[c(2,3,1)],fsize=0.8,cex=c(0.9,0.5), ftype="i")
add.simmap.legend(colors=cols_t,x=0, y=4,prompt=FALSE,fsize=0.9)
simT<-make.simmap(tree_salp_morph,T_I,nsim=100,model="ER",pi=table(T_I)/sum(table(T_I)))
par(ask=F)
obj_t<-summary(simT,plot=FALSE)
cols_t<-setNames(palette()[c(2,3,1)],mapped.states(simT)[,1])
plot(obj_t,colors=cols_t,fsize=0.8,cex=c(0.9,0.5), ftype="i")
add.simmap.legend(colors=cols_t,x=0, y=4,prompt=FALSE,fsize=0.9)
cols_t<-setNames(palette()[c(3,2,1)],mapped.states(simT)[,1])
plot(obj_t,colors=cols_t,fsize=0.8,cex=c(0.9,0.5), ftype="i")
add.simmap.legend(colors=cols_t,x=0, y=4,prompt=FALSE,fsize=0.9)
cols_t<-setNames(palette()[c(3,1,2)],mapped.states(simT)[,1])
plot(obj_t,colors=cols_t,fsize=0.8,cex=c(0.9,0.5), ftype="i")
add.simmap.legend(colors=cols_t,x=0, y=4,prompt=FALSE,fsize=0.9)
morph <- setNames(unique_traits[which(unique_traits$Variable=="Chain architecture"),4], unique_traits[which(unique_traits$Variable=="Chain architecture"),1])
morph <- c(morph,setNames("Linear", "Soestia zonaria"),setNames("Oblique", "Thalia orientalis"),setNames("Transversal", "Pegea confoederata"),setNames("Whorl","Cyclosalpa quadriluminis"))
tree_salp_morph <- drop.tip(tree_salp, which(!(tree_salp$tip.label %in% names(morph)))) %>% chronos()
morph <- morph[which(names(morph) %in% tree_salp_morph$tip.label)]
morph[match(tree_salp_morph$tip.label,names(morph))] -> morph
class(tree_salp_morph) <- "phylo"
simmorph<-make.simmap(tree_salp_morph,morph,nsim=25,model="ARD",pi=table(morph)/sum(table(morph)))
par(ask=F)
obj_t<-summary(simmorph,plot=FALSE)
cols_t<-setNames(palette()[1:6],mapped.states(simmorph)[,1])
plot(obj_t,colors=cols_t,fsize=0.8,cex=c(0.9,0.5), ftype="i")
add.simmap.legend(colors=cols_t,x=0, y=4,prompt=FALSE,fsize=0.9,)
plot(tree_salp_morph)
simmorph<-make.simmap(tree_salp_morph,morph,nsim=25,model="ER",pi=table(morph)/sum(table(morph)))
par(ask=F)
obj_t<-summary(simmorph,plot=FALSE)
cols_t<-setNames(palette()[1:6],mapped.states(simmorph)[,1])
plot(obj_t,colors=cols_t,fsize=0.8,cex=c(0.9,0.5), ftype="i")
add.simmap.legend(colors=cols_t,x=0, y=4,prompt=FALSE,fsize=0.9,)
simmorph<-make.simmap(tree_salp_morph,morph,nsim=25,model="ARD",pi=table(morph)/sum(table(morph)))
par(ask=F)
obj_t<-summary(simmorph,plot=FALSE)
cols_t<-setNames(palette()[1:6],mapped.states(simmorph)[,1])
plot(obj_t,colors=cols_t,fsize=0.8,cex=c(0.9,0.5), ftype="i")
add.simmap.legend(colors=cols_t,x=0, y=4,prompt=FALSE,fsize=0.9,)
Ctree
C
#corHMM
ancRECON(Ctree, C)
#corHMM
ancRECON(Ctree, C, ntraits=1)
as.matrix(C)
#corHMM
ancRECON(Ctree, as.matrix(C), ntraits=1)
)
#corHMM
ancRECON(Ctree, as.data.frame(as.matrix(C)), ntraits=1)
as.data.frame(as.matrix(C))
data(primates) %>% print()
data(primates)
primates
as.data.frame(cbind(names(C),C))
#corHMM
ancRECON(Ctree, as.data.frame(cbind(names(C),C)), ntraits=1)
as.data.frame(cbind(names(C),C))
#corHMM
ancRECON(Ctree, as.data.frame(cbind(names(C),C)), ntraits=1)
#corHMM
ancRECON(Ctree, cbind(names(C),C), ntraits=1)
#corHMM
ancRECON(Ctree, cbind(names(C),C), ntraits=1, hrm=T)
C),C)
#corHMM
DVSZmat <- cbind(names(C),C)
class(primates)
class(primates%trait)
class(primates$trait)
#corHMM
DVSZmat <- cbind(names(C),C) %>% as.data.frame()
DVSZmat
names(DVSZmat) <- c("Species","DVSZ")
rownames(DVSZmat) <- NULL
DVSZmat
ancRECON(Ctree, DVSZmat, ntraits=1, hrm=T)
ancRECON(Ctree, DVSZmat, ntraits=1, hrm=T, rate.cat=c(1))
ancRECON(Ctree, DVSZmat, ntraits=1, hrm=T, rate.cat=c(1), p=1)
transit_paths <- read.csv("Transitions_Paths.tsv", sep='\t', header = T, stringsAsFactors = F)
bipQ <- rbind(c(0.1,0.1,0,0),c(0.1,0.1,0.1,0),c(0,0.1,0.1,0.1),c(0,0,0.1,0.1))
rownames(bipQ)=colnames(bipQ)<-c("Bippinate","Linear","Oblique","Transversal")
transit_paths <- read.csv("Transitions_Paths.tsv", sep='\t', header = T, stringsAsFactors = F)
bipQ <- rbind(c(0.1,0.1,0,0),c(0.1,0.1,0.1,0),c(0,0.1,0.1,0.1),c(0,0,0.1,0.1))
rownames(bipQ)=colnames(bipQ)<-c("Bipinnate","Linear","Oblique","Transversal")
transit_paths
transit_paths <- read.csv("Transitions_Paths.tsv", sep='\t', header = T, stringsAsFactors = F)
bipQ <- rbind(c(0.1,0.1,0,0),c(0.1,0.1,0.1,0),c(0,0.1,0.1,0.1),c(0,0,0.1,0.1))
rownames(bipQ)=colnames(bipQ)<-c("Bipinnate","Linear","Oblique","Transversal")
#BIPPINATE PATH
bipT <- transit_paths$Bipinnate_path
names(bipT) = transit_paths$Species
simBip<-make.simmap(tree_salp_morph,bipT,nsim=10,pi=table(bipT)/sum(table(bipT)),model="ARD")
par(ask=F)
obj_bip<-summary(simBip,plot=FALSE)
cols_bip<-setNames(palette()[1:length(unique(bipT))],mapped.states(simBip)[,1])
plot(obj_bip,colors=cols_bip,fsize=0.8,cex=c(0.9,0.5), ftype="i")
add.simmap.legend(colors=cols_bip,x=0, y=4,prompt=FALSE,fsize=0.9,)
bipT
transits <- read.csv("Transitions_Salps.tsv", sep='\t', header = T, stringsAsFactors = F)[-4]
transits
ancRECON(tree_salp_morph, transits, ntraits=4, hrm=T, rate.cat=2, p=c(0.5,0.5,0.8,0.2,0.3,0,0.3,0))
transits
tree_salp_morph
ancRECON(tree_salp_morph, transits, ntraits=4, hrm=F, rate.cat=2, p=c(0.5,0.5,0.8,0.2,0.3,0,0.3,0))
corDISC(tree_salp_morph,transits[,-4], ntraits=3)
TRANS_CDISC <- corDISC(tree_salp_morph,transits[,-4], ntraits=3)
#corHMM
corHMM(tree_salp_morph,transits, ntraits=4)
#corHMM
corHMM(tree_salp_morph,transits)
#corHMM
corHMM(tree_salp_morph,transits,rate.cat=2)
#corHMM
corHMM(tree_salp_morph,transits[,1:2],rate.cat=2)
primates[[2]]
primates[[2]] %>% class()
transits[,1:2]
#corHMM
binTransits <- transits
binTransits[,-1] <- sapply(binTransits[,-1],function(x){as.numeric(as.factor(x))})
binTransits
binTransits <- transits
binTransits[,-1] <- sapply(transits[,-1],function(x){as.numeric(as.factor(x))-1})
binTransits
transits
#corHMM
binTransits <- transits
as.numeric(binTransits$TO)
binTransits$TO <- as.numeric(as.factor(binTransits$TO))
binTransits
binTransits <- transits
binTransits$TO <- as.numeric(as.factor(binTransits$TO))-1
binTransits
as.numeric(as.factor(binTransits$OL))
as.numeric(as.factor(binTransits$OL, levels=c(0,1)))
factor(binTransits$OL, levels=c(0,1))
as.numeric(as.factor(binTransits$OL))
binTransits$OL[which(binTransits$OL == 1)]
binTransits$OL <- as.numeric(as.factor(binTransits$OL))
binTransits$OL[which(binTransits$OL == 1)]
binTransits$OL[which(binTransits$OL == 2)] <- 0
as.numeric(as.factor(binTransits$TW))
binTransits$TW <- as.numeric(as.factor(binTransits$TW))-1
binTransits$TW
binTransits
binTransits$WC <- as.numeric(as.factor(binTransits$WC))
binTransits$WC[which(binTransits$WC == 2)] <- 0
binTransits
corHMM(tree_salp_morph,binTransits,rate.cat=2)
corHMM(tree_salp_morph,binTransits,rate.cat=1)
hidTrans <- corHMM(tree_salp_morph,binTransits,rate.cat=1)
hidTrans$solution
hidTrans$states
binTransits[,2]
setNames(binTransits[,2],binTransits[,1])
simHid<-make.simmap(tree_salp_morph,setNames(binTransits[,2],binTransits[,1]),nsim=100,model=hidTrans$solution)
hidTrans$solutio
hidTrans$solution
hidTrans <- corHMM(tree_salp_morph,binTransits[,1:2],rate.cat=1)
setNames(binTransits[,2],binTransits[,1])
simHid<-make.simmap(tree_salp_morph,setNames(binTransits[,2],binTransits[,1]),nsim=10,model=hidTrans$solution)
hidTrans$solution[is.na(hidTrans$solution)] <- 0
hidTrans$solution
diag(hidTrans$solution) <- -rowSums(hidTrans$solution)
simHid<-make.simmap(tree_salp_morph,setNames(binTransits[,2],binTransits[,1]),nsim=10,model=hidTrans$solution)
simHid<-corHMM::make.simmap(tree_salp_morph,setNames(binTransits[,2],binTransits[,1]),nsim=10,model=hidTrans$solution)
simHid<-make.Simmap(tree_salp_morph,setNames(binTransits[,2],binTransits[,1]),nsim=10,model=hidTrans$solution)
simHid<-makeSimmap(tree_salp_morph,setNames(binTransits[,2],binTransits[,1]),nsim=10,model=hidTrans$solution)
simHid <- makeSimmap(tree_salp_morph,setNames(binTransits[,2],binTransits[,1]),nsim=10,model=hidTrans$solution)
simHid <- corHMM::makeSimmap(tree_salp_morph,setNames(binTransits[,2],binTransits[,1]),nsim=10,model=hidTrans$solution)
library(corHMM)
make.simmap()
ancRECON(tree_salp_morph, binTransits, ntraits=4, hrm=F, rate.cat=2, p=c(0.5,0.5,0.8,0.2,0.3,0,0.3,0))
ancRECON(tree_salp_morph, binTransits, ntraits=4, hrm=T, rate.cat=2, p=c(0.5,0.5,0.8,0.2,0.3,0,0.3,0))
c(0.5,0.5,0.8,0.2,0.3,0,0.3,0)
ancRECON(tree_salp_morph, binTransits, ntraits=4, hrm=T, rate.cat=2, p=c(0.5,0.5,0.8,0.2,0.3,0.1,0.3,0.1))
binTransits
ancRECON(tree_salp_morph, binTransits, ntraits=4, hrm=F, rate.cat=2, p=c(0.5,0.5,0.8,0.2,0.3,0.1,0.3,0.1))
ancRECON(tree_salp_morph, binTransits, rate.cat=2, p=c(0.5,0.5,0.8,0.2,0.3,0.1,0.3,0.1))
ancRECON(tree_salp_morph, binTransits, rate.cat=2, p=c(0.5,0.5,0.8,0.2,0.3,0.1,0.3,0.1))
ancRECON(tree_salp_morph, binTransits)
primates$trait
ancRECON(tree_salp_morph, binTransits[,c(1:3)],p=-c(0.05,10,0.01,0.01,0.06,0,0.02,51.2),method="marginal",hrm=FALSE,ntraits = 2,model="ARD")
ancRECON(tree_salp_morph, binTransits[,c(1:3)],p=-c(0.05,10,0.01,0.01,0.06,0,0.02,51.2))
ancRECON(tree_salp_morph, binTransits[,c(1:3)],p=-c(0.05,10,0.01,0.01,0.06,0,0.02,51.2),ntraits = 2)
require(ape)
require(expm)
require(corHMM)
data(primates)
phy <-primates[[1]]
phy <-multi2di(phy)
data <-primates[[2]]
plot(phy, show.tip.label = FALSE) data.sort <-data.frame(data[, 2], data[, 3], row.names = data[, 1])
plot(phy, show.tip.label = FALSE)
data.sort <-data.frame(data[, 2], data[, 3], row.names = data[, 1])
data.sort <-data.sort[phy$tip.label, ]
tiplabels(pch = 16, col = data.sort[, 1] + 1, cex = 0.5)
tiplabels(pch = 16, col = data.sort[, 2] + 3, cex = 0.5, offset = 0.5)
MK_3state <-corHMM(phy = phy, data = data, rate.cat = 1)
data
head(MK_3state$data.legend)
getStateMat4Dat(data)
install.packages("corHMM")
