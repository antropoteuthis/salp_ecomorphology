cast_trawl[6:10,-1]
cast_trawl[6:10,-1] %>% colSums()
cast_trawl[6:10,-1] %>% colSums()Msort()
cast_trawl[6:10,-1] %>% colSums() %>% sort()
trawl_to_specimen %>% unique() %>%  .[,3] %>% unique()
trawl_to_specimen %>% unique()
trawl_to_specimen %>% unique() %>%  .[,3] %>% unique()
trawl_to_specimen %>% unique() %>%  .[,3] %>% unique()Msort()
trawl_to_specimen %>% unique() %>%  .[,3] %>% unique() %>% sort()
ext <- read.csv("/Volumes/GoogleDrive/My Drive/Metabarcoding_things/siphweb_metabarcoding/extractions_GC_Nov2020.tsv", header=T, stringsAsFactors = F, sep="\t" )
trawl_to_specimen <- ext[,c(1,3,13)]
RUN0trawls = data.frame(Extraction..=allsamples$Extraction, Specimen.. = allsamples$Specimen, Corrresponding.prey.field.sample = rep(NA, nrow(allsamples)))[which(allsamples$run == "RUN0"),]
names(RUN0trawls) <- names(trawl_to_specimen)
trawl_to_specimen <- rbind(trawl_to_specimen, RUN0trawls)
dyads_by_specimen = list()
it=0
for(i in unique(allsamples$Specimen)){
dyad_i = list()
dyad_i[[1]] <- allsamples[which(allsamples$Specimen == i),]
tows <- trawl_to_specimen$Corresponding.prey.field.sample[which(trawl_to_specimen$Specimen.. == i)]
trawls_i <- trawls[which(trawls$Sample == tows),]
if(nrow(trawls_i)>0){dyad_i[[2]] <- trawls_i}
else dyad_i[[2]] <- NA
names(dyad_i)=c("Diet", "Preyfield")
it=it+1
dyads_by_specimen[[it]] <- dyad_i
names(dyads_by_specimen)[[it]] <- i
}
dyads_by_specimen$`BIOS19-D2-P1`$Preyfield[,c(2,3,4,7)]
dyads_by_specimen$`BIOS19-D2-P1`$Diet[,c(8:11,48)]
diets_broad <- allsamples[which(allsamples$Interpretation == "Prey"),c("Specimen","Species","Broad.group")] %>% unique()
cast_broadiets <- dcast(diets_broad, Specimen + Species ~ Broad.group)
cast_broadiets[is.na(cast_broadiets)] <- 0
cast_broadiets[,c(3:ncol(cast_broadiets))] <- sapply(cast_broadiets[,c(3:ncol(cast_broadiets))], as.numeric)
cast_broadiets[is.na(cast_broadiets)] <- 1
#Widen format of trawl data
cast_trawl <- dcast(broad.taxa, Sample ~ Broad.group)
cast_trawl[is.na(cast_trawl)] <- 0
#Match trawlcast to specimen
trawlbyspecimen <- cast_trawl[match(trawl_to_specimen$Corresponding.prey.field.sample[match(cast_broadiets$Specimen, trawl_to_specimen$Specimen..)], cast_trawl$Sample),]
names(trawlbyspecimen)[1]<-"Trawl"
trawlbyspecimen <- data.frame(trawlbyspecimen, Phyllocarid = trawlbyspecimen$Stomatopod*0) #add phyllocarid zeroes
#Bind GC and trawls
GC_Trawl_broad <- cbind(cast_broadiets, trawlbyspecimen)
rownames(GC_Trawl_broad)<-GC_Trawl_broad$Specimen
GC_Trawl_broad$Species[which(GC_Trawl_broad$Species=="Apolemia undescribed sp")] <- "Apolemia sp"
GC_Trawl_broad$Species[which(GC_Trawl_broad$Species=="Nanomia (deep)")] <- "Nanomia sp. deep"
GC_Trawl_broad[,c("Cephalopod", "Cumacean")]
meltedGC = melt(GC_Trawl_broad[,1:16])
names(meltedGC)[3:4] <- c("Gut Content Prey", "Presence")
meltedGC$Species <- factor(meltedGC$Species, levels=SPorder)
IDorder <- unique(arrange(meltedGC, Species)$Specimen)
meltedGC$Specimen <- factor(meltedGC$Specimen, levels=IDorder)
PreyOrder <- c("Copepod", "Decapod", "Euphausid", "Mysid", "Lophogastrid","Stomatopod", "Amphipod", "Ostracod", "Bivalve", "Gastropod", "Larvacean", "Salp", "Scyphomedusa", "Ctenophore", "Actinopteri")
meltedGC$`Gut Content Prey` <- factor(meltedGC$`Gut Content Prey`, levels=PreyOrder)
GC <- ggplot(meltedGC, aes(x = `Gut Content Prey`, y = Specimen, fill = Presence)) + geom_tile(color="grey") +scale_fill_gradient(low = "white", high = "black") + theme_bw() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), legend.position = "none") + ylab("Specimen")
GC
ggplot(meltedGC, aes(x = `Gut Content Prey`, y = Specimen, fill = Presence)) + geom_tile(color="grey") +scale_fill_gradient(low = "white", high = "black") + theme_bw() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), legend.position = "none") + ylab("Specimen")
meltedGC
meltedGC %>% head()
ggplot(meltedGC, aes(x = `Gut Content Prey`, y = Specimen, fill = Presence)) + geom_tile(color="grey")
ggplot(meltedGC, aes(x = `Gut Content Prey`, y = Specimen, fill = Presence)) + geom_tile(color="grey") +scale_fill_gradient(low = "white", high = "black") + theme_bw() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), legend.position = "none") + ylab("Specimen")
dev.off()
ggplot(meltedGC, aes(x = `Gut Content Prey`, y = Specimen, fill = Presence)) + geom_tile(color="grey") +scale_fill_gradient(low = "white", high = "black") + theme_bw() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), legend.position = "none") + ylab("Specimen")
GC <- ggplot(meltedGC, aes(x = `Gut Content Prey`, y = Specimen, fill = Presence)) + geom_tile(color="grey") +scale_fill_gradient(low = "white", high = "black") + theme_bw() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), legend.position = "none") + ylab("Specimen")
## by species
GCspecies <- aggregate(x = GC_Trawl_broad[,3:16], by = list(GC_Trawl_broad$Species), FUN = "sum")
names(GCspecies)[1] <- "Species"
GCspecies_melt = melt(GCspecies)
names(GCspecies_melt)[2:3] <- c("Gut Content Prey","N")
GCspecies_melt$Species <- factor(GCspecies_melt$Species, levels=SPorder)
GCspecies_melt$`Gut Content Prey` <- factor(GCspecies_melt$`Gut Content Prey`, levels=PreyOrder)
GC_spp <- ggplot(GCspecies_melt, aes(x = `Gut Content Prey`, y = Species, fill = log(N+1))) + geom_tile(color="grey") + scale_fill_gradient(low = "white", high = "black") + geom_text(aes(label=N), col="red") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + ylab("Species")
meltedTrawls = melt(GC_Trawl_broad[,c(1,2,17:ncol(GC_Trawl_broad))])
names(meltedTrawls)[4:5] <- c("Prey", "Abundance")
meltedTrawls <- ddply(meltedTrawls, .(Specimen), transform, Relative.Abundance = scale(log(Abundance+1)))
meltedTrawls <- meltedTrawls[which(!(meltedTrawls$Prey %in% c("Animal", "Egg"))),]
names(meltedTrawls)[4]<-"Ambient Prey"
PreyOrderTr <- c("Copepod", "Decapod", "Euphausid", "Mysid", "Lophogastrid", "Stomatopod",  "Ostracod", "Bivalve","Larvacean", "Salp",  "Scyphomedusa", "Ctenophore", "Actinopteri", "Cladoceran", "Amphipod", "Isopod", "Barnacle", "Cumacean", "Phyllocarid", "Brachiopod", "Echinoderm","Polychaete", "Chaetognath", "Gastropod", "Cephalopod", "Doliolid", "Pyrosome", "Hydromedusa", "Siphonophore", "Anthozoa")
meltedTrawls$`Ambient Prey` <- factor(meltedTrawls$`Ambient Prey`, levels=PreyOrderTr)
meltedTrawls$Species <- factor(meltedTrawls$Species, levels=SPorder)
IDorder <- unique(arrange(meltedTrawls, Species)$Specimen)
meltedTrawls$Specimen <- factor(meltedTrawls$Specimen, levels=IDorder)
TR <- ggplot(meltedTrawls, aes(x = `Ambient Prey`, y = Specimen, fill = Relative.Abundance)) + geom_tile() + scale_fill_gradient(low = "white", high = "dark blue", na.value = "grey") + theme_bw() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), axis.title.y=element_blank(),axis.text.y=element_blank(),legend.position = "none", axis.ticks = element_blank())
ggplot(meltedTrawls, aes(x = `Ambient Prey`, y = Specimen, fill = Relative.Abundance)) + geom_tile() + scale_fill_gradient(low = "white", high = "dark blue", na.value = "grey") + theme_bw() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), axis.title.y=element_blank(),axis.text.y=element_blank(),legend.position = "none", axis.ticks = element_blank())
ggplot(meltedTrawls, aes(x = `Ambient Prey`, y = Specimen, fill = Relative.Abundance)) + geom_tile() + scale_fill_gradient(low = "white", high = "dark blue", na.value = "grey") + theme_bw() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
LI
rownames(trawlbyspecimen) = cast_broadiets$Specimen
rownames(cast_broadiets) = cast_broadiets$Specimen
rel_trawls <- t(apply(trawlbyspecimen[,c(-1,-4,-18)],1,function(x){x <- x/sum(x, na.rm = T); return(x)}))  #-4 -18 to get rid of "Animal" and "Egg" concepts
colnames(rel_trawls)[which(!(colnames(rel_trawls) %in% colnames(cast_broadiets)))] #CHECK EVERY TIME!
expanded_broadiets <- data.frame(cast_broadiets, Amphipod = rep(0, nrow(cast_broadiets)),Anthozoa = rep(0, nrow(cast_broadiets)),Barnacle = rep(0, nrow(cast_broadiets)),Brachiopod = rep(0, nrow(cast_broadiets)),Cephalopod = rep(0, nrow(cast_broadiets)),Chaetognath = rep(0, nrow(cast_broadiets)),Cladoceran = rep(0, nrow(cast_broadiets)),Cumacean = rep(0, nrow(cast_broadiets)),Doliolid = rep(0, nrow(cast_broadiets)),Echinoderm = rep(0, nrow(cast_broadiets)), Gastropod = rep(0, nrow(cast_broadiets)), Pyrosome = rep(0, nrow(cast_broadiets)),Siphonophore = rep(0, nrow(cast_broadiets)), Hydromedusa = rep(0, nrow(cast_broadiets)), Isopod = rep(0, nrow(cast_broadiets)), Polychaete = rep(0, nrow(cast_broadiets)), Phyllocarid = rep(0, nrow(cast_broadiets)))
expanded_broadiets <- expanded_broadiets[,match(colnames(rel_trawls), colnames(expanded_broadiets))]
rel_GC <- t(apply(expanded_broadiets,1,function(x){x <- x/sum(x); return(x)}))
selectivity <- as.data.frame(matrix(nrow=nrow(rel_trawls), ncol=ncol(rel_trawls)))
names(selectivity) <- colnames(rel_trawls); rownames(selectivity) <- rownames(rel_GC)
selectivity <- LI(rel_GC, rel_trawls,selectivity)
cast_broadiets$Species[which(cast_broadiets$Species=="Apolemia undescribed sp")] <- "Apolemia sp"
cast_broadiets$Species[which(cast_broadiets$Species=="Nanomia (deep)")] <- "Nanomia sp. deep"
selectivity <- data.frame(selectivity, Species = cast_broadiets$Species, Specimen = cast_broadiets$Specimen)
selectivity_melt <- melt(selectivity, id.vars = c("Specimen", "Species"))
names(selectivity_melt) <- c("Specimen","Species", "Prey", "L.I.")
selectivity_melt$Species <- as.character(selectivity_melt$Species)
selectivity_melt$Species <- factor(selectivity_melt$Species, levels=SPorder[which(SPorder %in% selectivity_melt$Species)])
IDorder <- unique(arrange(selectivity_melt, Species)$Specimen)
selectivity_melt$Specimen <- factor(selectivity_melt$Specimen, levels=IDorder)
selectivity_melt$Prey <- factor(selectivity_melt$Prey, levels=PreyOrderTr)
names(selectivity_melt)[3]<-"Selectivity"
selectivity_melt[,4] <- as.numeric(selectivity_melt[,4])
SEL <- ggplot(selectivity_melt, aes(x = Selectivity, y = Specimen, fill = `L.I.`)) + geom_tile() + scale_fill_gradient2(low = "red", high = "blue", mid = "white", na.value = "grey") + theme_bw() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), axis.title.y=element_blank(), axis.text.y = element_blank(), axis.ticks = element_blank())
SEL
selectivity_spp <- aggregate(selectivity_melt$L.I.~selectivity_melt$Selectivity+selectivity_melt$Species, FUN=function(x){mean(x,na.rm = T)})
names(selectivity_spp) <- c("Prey","Species","L.I.")
GCspecies_melt$Species[which(!(GCspecies_melt$Species %in% selectivity_spp$Species))] %>% unique() -> missing_spp
expand.grid(unique(selectivity_spp$Prey),missing_spp)->missing_entries
missing_entries <- cbind(missing_entries, rep(NA, nrow(missing_entries)))
names(missing_entries) <- names(selectivity_spp)
selectivity_spp <- rbind(selectivity_spp, missing_entries)
SEL_spp <- ggplot(selectivity_spp, aes(x = Prey, y = Species, fill = `L.I.`)) + geom_tile() + scale_fill_gradient2(low = "red", high = "blue", mid = "white", na.value = "grey") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), axis.title.y=element_blank())
SEL_spp
getwd()
pdf("GC-Trawls-SEL.pdf", height = 10, width = 12)
wrap_plots(GC,TR,SEL, widths = c(1,1.7,1.7))
dev.off()
pdf("GC-SEL_spp.pdf", height = 10, width = 12)
wrap_plots(GC_spp,SEL_spp, widths = c(1,1.7))
dev.off()
cast_trawl[13,-1]
cast_trawl[,1]
trawl_to_specimen %>% unique() %>%  .[,3] %>% unique()
library(tidyverse)
library(reshape2)
library(scales)
library(RColorBrewer)
library(forcats)
library(vegan)
library(adegenet)
library(magrittr)
library(plyr)
library(paleotree)
library(phytools)
library(patchwork)
library(ggtree)
library(ggplotify)
library(scatterpie)
barcodes=c("134", "152","166", "179", "261", "272")
runids = c("RUN0","RUN1","RUN2","RUN3", "RUN4","RUN5")
### Analyze Metaxa & Trawl Data
#Read metabarcoding data
setwd("/Volumes/GoogleDrive/My Drive/Metabarcoding_things/")
allsamples <- read.csv("/Volumes/GoogleDrive/My Drive/Metabarcoding_things/siphweb_metabarcoding/AllSamplesParsed.tsv", sep="\t", header = T, stringsAsFactors = F)
allsamples <- allsamples[,-66]
#Parse sequences/feature_names
allseqs <- read.csv("/Volumes/GoogleDrive/My Drive/Metabarcoding_things/siphweb_metabarcoding/seqs-feats.csv", sep="\t", header = F, stringsAsFactors = F)
names(allseqs) <- c("Feature_name","Sequence")
allseqs <- allseqs[which(allseqs$Feature_name %in% unique(allsamples$Feature_name)),]
seqs_samples <- full_join(allsamples,allseqs, by="Feature_name")
#write.table(seqs_samples, "SequencesParsed.tsv", sep="\t", col.names = T, row.names = F)
#Read trawl data
trawls = read.csv("/Volumes/GoogleDrive/My\ Drive/Metabarcoding_things/siphweb_metabarcoding/trawls_data_Nov2020.tsv", header=T, sep="\t", stringsAsFactors = F)
trawls$Broad.group[which(trawls$Broad.group == "Krill")] <- "Euphausid"
trawls$Broad.group[which(trawls$Broad.group == "Gymnosome pteropod")] <- "Gastropod"
trawls$Broad.group[which(trawls$Broad.group == "Appendicularia")] <- "Larvacean"
trawls$Broad.group[which(trawls$Broad.group == "Appendicularian")] <- "Larvacean"
trawls$Broad.group[which(trawls$Broad.group == "Benthic snail")] <- "Gastropod"
trawls$Broad.group[which(trawls$Broad.group == "Copepod ")] <- "Copepod"
samples <- split(trawls, trawls$Sample)
#samples.bygroup <- lapply(samples, function(x){aggregate(x$Representative.count, by = list(x$Broad.group), FUN = sum)})
samples.bygroup <- lapply(samples, function(x){aggregate(x$Count, by = list(x$Broad.group), FUN = sum)})
for(i in 1:length(samples.bygroup)){
samples.bygroup[[i]] <- cbind(rep(names(samples.bygroup)[i], nrow(samples.bygroup[[i]])), samples.bygroup[[i]])
}
broad.taxa <- bind_rows(samples.bygroup)
names(broad.taxa) <- c("Sample", "Broad.group", "Representative.count")
broad.taxa$Representative.count[is.na(broad.taxa$Representative.count)]<-1
#Encode extraction-to-trawl match
ext <- read.csv("/Volumes/GoogleDrive/My Drive/Metabarcoding_things/siphweb_metabarcoding/extractions_GC_Nov2020.tsv", header=T, stringsAsFactors = F, sep="\t" )
trawl_to_specimen <- ext[,c(1,3,13)]
RUN0trawls = data.frame(Extraction..=allsamples$Extraction, Specimen.. = allsamples$Specimen, Corrresponding.prey.field.sample = rep(NA, nrow(allsamples)))[which(allsamples$run == "RUN0"),]
names(RUN0trawls) <- names(trawl_to_specimen)
trawl_to_specimen <- rbind(trawl_to_specimen, RUN0trawls)
dyads_by_specimen = list()
it=0
for(i in unique(allsamples$Specimen)){
dyad_i = list()
dyad_i[[1]] <- allsamples[which(allsamples$Specimen == i),]
tows <- trawl_to_specimen$Corresponding.prey.field.sample[which(trawl_to_specimen$Specimen.. == i)]
trawls_i <- trawls[which(trawls$Sample == tows),]
if(nrow(trawls_i)>0){dyad_i[[2]] <- trawls_i}
else dyad_i[[2]] <- NA
names(dyad_i)=c("Diet", "Preyfield")
it=it+1
dyads_by_specimen[[it]] <- dyad_i
names(dyads_by_specimen)[[it]] <- i
}
dyads_by_specimen$`BIOS19-D2-P1`$Preyfield[,c(2,3,4,7)]
dyads_by_specimen$`BIOS19-D2-P1`$Diet[,c(8:11,48)]
## FINAL FIGURE ###
#row by specimen - #broad GC group set of columns - #broad prey groups in trawl set of columns
#Widen format of GC data
diets_broad <- allsamples[which(allsamples$Interpretation == "Prey"),c("Specimen","Species","Broad.group")] %>% unique()
cast_broadiets <- dcast(diets_broad, Specimen + Species ~ Broad.group)
cast_broadiets[is.na(cast_broadiets)] <- 0
cast_broadiets[,c(3:ncol(cast_broadiets))] <- sapply(cast_broadiets[,c(3:ncol(cast_broadiets))], as.numeric)
cast_broadiets[is.na(cast_broadiets)] <- 1
#Widen format of trawl data
cast_trawl <- dcast(broad.taxa, Sample ~ Broad.group)
cast_trawl[is.na(cast_trawl)] <- 0
#Match trawlcast to specimen
trawlbyspecimen <- cast_trawl[match(trawl_to_specimen$Corresponding.prey.field.sample[match(cast_broadiets$Specimen, trawl_to_specimen$Specimen..)], cast_trawl$Sample),]
names(trawlbyspecimen)[1]<-"Trawl"
trawlbyspecimen <- data.frame(trawlbyspecimen, Phyllocarid = trawlbyspecimen$Stomatopod*0) #add phyllocarid zeroes
#Bind GC and trawls
GC_Trawl_broad <- cbind(cast_broadiets, trawlbyspecimen)
rownames(GC_Trawl_broad)<-GC_Trawl_broad$Specimen
GC_Trawl_broad$Species[which(GC_Trawl_broad$Species=="Apolemia undescribed sp")] <- "Apolemia sp"
GC_Trawl_broad$Species[which(GC_Trawl_broad$Species=="Nanomia (deep)")] <- "Nanomia sp. deep"
GC_Trawl_broad[,c("Cephalopod", "Cumacean")]
#Phylogeny of the species sampled
tree = read.newick(text="(Physalia physalis,((Apolemia sp,Apolemia rubriversa,Apolemia lanosa),((Bargmannia amoena,Bargmannia elongata,Bargmannia lata),(((Undescribed physonect L),(Resomia dunni,(Forskalia sp.,(Lychnagalma utricularia,(Halistemma rubrum,(Nanomia sp. Atlantic,Nanomia sp. shallow,Nanomia sp. deep)))))),(Vogtia serrata,(Desmophyes annectens,(Chuniphyes multidentata,((Sphaeronectes koellikeri,Sphaeronectes christiansonae),((Muggiaea atlantica,(Lensia conoidea,Sulculeolaria chuni)),Diphyes dispar)))))))))));")
### Analyze Metaxa & Trawl Data
#Read metabarcoding data
setwd("/Volumes/GoogleDrive/My Drive/Metabarcoding_things/")
getwd()
### Analyze Metaxa & Trawl Data
#Read metabarcoding data
setwd("smb://localhost/alejandro.damianserrano@yale.edu - Google Drive/My Drive/Metabarcoding_things/")
### Analyze Metaxa & Trawl Data
#Read metabarcoding data
setwd("/smb://localhost/alejandro.damianserrano@yale.edu - Google Drive/My Drive/Metabarcoding_things/")
install.packages("googledrive")
install.packages("googledrive")
library(googledrive)
library(tidyverse)
library(reshape2)
library(scales)
library(RColorBrewer)
library(forcats)
library(vegan)
library(adegenet)
library(magrittr)
library(plyr)
library(paleotree)
library(phytools)
library(patchwork)
library(ggtree)
library(ggplotify)
library(scatterpie)
drive_get(path="/My Drive/Metabarcoding_things")
drive_get(path="My Drive/Metabarcoding_things")
drive_get(path="My Drive/Metabarcoding_things")
drive_get(path="My Drive/Metabarcoding_things")
drive_deauth()
drive_get(path="My Drive/Metabarcoding_things")
install.packages("deeptime")
install.packages("RevGadgets")
#Backbone for Bayesian timetree
treeZ <- read.tree("Documents/salp_ecomorphology/phylogeny/ML/GovUNIONCho-AB921975Mman+news_MUSCLE-gtrig.afa.contree") #Load ML tree since RevBayes one has polytomies
require(ape)
#Backbone for Bayesian timetree
treeZ <- read.tree("Documents/salp_ecomorphology/phylogeny/ML/GovUNIONCho-AB921975Mman+news_MUSCLE-gtrig.afa.contree") #Load ML tree since RevBayes one has polytomies
treeX <- multi2di(treeZ) #remove a single polytomy somewhere - probably in the outgroups rooting
treeX$edge.length[1] <- 0.000001 #set arbitrary small branch length to artificial branch for polytomy
plot(treeX,cex=0.4);nodelabels(cex=0.4) #find rooting node (cephalochordata/vertebrata)
treeY <- reroot(treeX, 96) #set true root
reroot
library(phytools)
treeY <- reroot(treeX, 96) #set true root
plot(treeY)
plot(treeX,cex=0.4);nodelabels(cex=0.4) #find rooting node (cephalochordata/vertebrata)
treeY <- reroot(treeX, 97) #set true root
plot(treeY)
treeU <- treeY %>% chronos() #make tree ultrametric
library(magrittr)
treeU <- treeY %>% chronos() #make tree ultrametric
treeU
plot(treeU)
2*length(treeZ$edge.length)
2*length(treeZ$edge.length)-2
2*length(treeZ$edge.length)-3
2*Ntip(treeZ)-3
treeZ$edge.length %>% length()
treeX$edge.length %>% length()
2*Ntip(treeX)-3
write.tree(treeU, "phylogeny/RevBayes/MLgtrig_Gov2011+Higa+Cint+news_MUSCLE_rooted_multiD_ultra.tree")
write.tree(treeU, "Documents/salp_ecomorphology/phylogeny/RevBayes/MLgtrig_Gov2011+Higa+Cint+news_MUSCLE_rooted_multiD_ultra.tree")
setwd("~/Documents/salp_ecomorphology/")
library(tidyverse)
library(ape)
library(phytools)
library(reshape2)
library(data.table)
library(geiger)
library(corHMM)
library(bayou)
library(surface)
#library(diversitree)
setwd("~/Documents/salp_ecomorphology/")
#LOAD consensus tree
tree_salp <- read.nexus("phylogeny/RevBayes/TIMETREE_Gov2011+Higa+Cint+news_MUSCLE_output/TimeTree_GovUNIONCho-AB921975Mman+news_MUSCLE_mcmc_MAP.tre")
Strees <- read.tree("phylogeny/RevBayes/TOPOLOGY_Gov+H+C_output/Gov+H+C_MAFFT_multitree.trees")
#remove duplicate species and undescribed ingroup
Strees <- lapply(Strees, drop.tip, c("HQ015387.1_Pegea_confoederata","FM244864.1_Cyclosalpa_quadriluminis","HQ015391.1_Cyclosalpa_affinis","HQ015396.1_Cyclosalpa_polae","HQ015395.1_Cyclosalpa_sewelli","FM244866.1_Iasis_cylindrica","HQ015399.1_Iasis_cylindrica","HQ015402.1_Iasis_cylindrica","HQ015401.1_Iasis_cylindrica","HQ015413.1_Thalia_democratica","HQ015414.1_Thalia_democratica","D14366.1_Thalia_democratica","HQ015410.1_Ritteriella_retracta","HQ015404.1_Brooksia_rostrata","HQ015408.1_Salpa_maxima","HQ015406.1_Salpa_thompsoni", "HQ015377.1_Salpidae_gen._nov._sp._nov._A", "FM244865.1_Ihlea_racovitzai", "KR057222.1_Brooksia_lacromae"))
#Remove straneous characters and Accession codes from tip labels
Strees <- lapply(Strees, function(t){t$tip.label %>%
str_remove_all(".+\\..+?_") %>%
str_replace_all("_", " ") -> t$tip.label; return(t)})
#Remove outgroups
Strees <- lapply(Strees, drop.tip, c("Pyrosomella verticillata", "Pyrosoma atlanticum", "Pyrosoma godeauxi","Pyrostremma spinosum", "Clavelina meridionalis", "Pycnoclavella aff. detorta", "Ascidia ceratodes", "Perophora sagamiensis","Megalodicopia hians", "Chelyosoma siboja", "Ciona intestinalis", "Molgula manhattensis", "Oikopleura dioica","Halocynthia igaboja", "Echinorhinus cookei", "Myxine glutinosa", "Branchiostoma floridae", "Doliolum denticulatum", "Doliolum nationalis"))
#correct spelling
Strees <- lapply(Strees, function(t){t$tip.label[which(t$tip.label == "Cyclosalpa floridana")] <- "Cyclosalpa floridiana"; return(t)})
#Ladderize for homogeneity in tip rder
Strees <- lapply(Strees, ladderize)
#Make ultrametric
Strees <- lapply(Strees, chronos)
ape::unique.multiPhylo(Strees, use.tip.label = F)->Strees_Unique
lapply(Strees_Unique, function(t){length(lapply(Strees, function(Tr){all.equal.phylo(t,Tr,use.edge.length = F, use.tip.label = F)}) %>% unlist() %>% .[which(.==TRUE)])}) %>% unlist() -> BSratios
BS_ratios <- (BSratios*100)/sum(BSratios)
round(BS_ratios,2) %>% sort() %>% .[length(BS_ratios):1]
Strees_Unique <- Strees_Unique[order(BS_ratios)[length(BS_ratios):1]]
length(BS_ratios)
par(mfrow=c(5,5),mar=c(0,0,0,0), oma=c(0,0,0,0))
lapply(Strees_Unique,function(t){plot.phylo(t, use.edge.length = F, cex=0.2)})
length(BS_ratios)
BS_ratios
par(mfrow=c(3,7),mar=c(0,0,0,0), oma=c(0,0,0,0))
lapply(Strees_Unique,function(t){plot.phylo(t, use.edge.length = F, cex=0.2)})
round(BS_ratios,2) %>% sort() %>% .[length(BS_ratios):1]
plot(tree_salp)
par(mfrow=c(1,1),mar=c(0,0,0,0), oma=c(0,0,0,0))
plot(tree_salp)
tree_salp$tip.label <- str_remove_all(tree_salp$tip.label, ".+\\..+?_")
tree_salp$tip.label <- str_replace_all(tree_salp$tip.label, "_", " ")
#Correct spellings
tree_salp$tip.label[which(tree_salp$tip.label == "Cyclosalpa floridana")] <- "Cyclosalpa floridiana"
#Remove outgroups
tree_salp <- drop.tip(tree_salp, c("Pyrosomella verticillata", "Pyrosoma atlanticum", "Pyrosoma godeauxi","Pyrostremma spinosum", "Clavelina meridionalis", "Pycnoclavella aff. detorta", "Ascidia ceratodes", "Perophora sagamiensis","Megalodicopia hians", "Chelyosoma siboja", "Ciona intestinalis", "Molgula manhattensis", "Oikopleura dioica","Halocynthia igaboja", "Echinorhinus cookei", "Myxine glutinosa", "Branchiostoma floridae", "Doliolum denticulatum", "Doliolum nationalis"))
plot(tree_salp)
tree_salp <- read.nexus("phylogeny/RevBayes/TIMETREE_Gov2011+Higa+Cint+news_MUSCLE_output/TimeTree_GovUNIONCho-AB921975Mman+news_MUSCLE_mcmc_MAP.tre")
#Remove duplicate and ingroup undescribed salp species
### ATTENTION: MAKE SURE THESE MAXIMIZE BRANCH LENGTHS  ####
tree_salp <- drop.tip(tree_salp, c("HQ015387.1_Pegea_confoederata","FM244864.1_Cyclosalpa_quadriluminis","HQ015391.1_Cyclosalpa_affinis","HQ015396.1_Cyclosalpa_polae","HQ015395.1_Cyclosalpa_sewelli","FM244866.1_Iasis_cylindrica","HQ015399.1_Iasis_cylindrica","HQ015402.1_Iasis_cylindrica","HQ015401.1_Iasis_cylindrica","HQ015413.1_Thalia_democratica","HQ015414.1_Thalia_democratica","D14366.1_Thalia_democratica","HQ015410.1_Ritteriella_retracta","HQ015404.1_Brooksia_rostrata","HQ015408.1_Salpa_maxima","HQ015406.1_Salpa_thompsoni", "HQ015377.1_Salpidae_gen._nov._sp._nov._A", "FM244865.1_Ihlea_racovitzai", "KR057222.1_Brooksia_lacromae"))
#Remove accession codes and _
tree_salp$tip.label <- str_remove_all(tree_salp$tip.label, ".+\\..+?_")
tree_salp$tip.label <- str_replace_all(tree_salp$tip.label, "_", " ")
#Correct spellings
tree_salp$tip.label[which(tree_salp$tip.label == "Cyclosalpa floridana")] <- "Cyclosalpa floridiana"
#Remove outgroups
tree_salp <- drop.tip(tree_salp, c("Pyrosomella verticillata", "Pyrosoma atlanticum", "Pyrosoma godeauxi","Pyrostremma spinosum", "Clavelina meridionalis", "Pycnoclavella aff. detorta", "Ascidia ceratodes", "Perophora sagamiensis","Megalodicopia hians", "Chelyosoma siboja", "Ciona intestinalis", "Molgula manhattensis", "Oikopleura dioica","Halocynthia igaboja", "Echinorhinus cookei", "Myxine glutinosa", "Branchiostoma floridae", "Doliolum denticulatum", "Doliolum nationalis"))
plot(tree_salp)
Strees <- read.tree("phylogeny/RevBayes/TOPOLOGY_Gov2011+HigaCint+New_MUSCLE_output/Gov2011+HigaCint+New_MUSCLE_18S.trees")
#remove duplicate species and undescribed ingroup
Strees <- lapply(Strees, drop.tip, c("HQ015387.1_Pegea_confoederata","FM244864.1_Cyclosalpa_quadriluminis","HQ015391.1_Cyclosalpa_affinis","HQ015396.1_Cyclosalpa_polae","HQ015395.1_Cyclosalpa_sewelli","FM244866.1_Iasis_cylindrica","HQ015399.1_Iasis_cylindrica","HQ015402.1_Iasis_cylindrica","HQ015401.1_Iasis_cylindrica","HQ015413.1_Thalia_democratica","HQ015414.1_Thalia_democratica","D14366.1_Thalia_democratica","HQ015410.1_Ritteriella_retracta","HQ015404.1_Brooksia_rostrata","HQ015408.1_Salpa_maxima","HQ015406.1_Salpa_thompsoni", "HQ015377.1_Salpidae_gen._nov._sp._nov._A", "FM244865.1_Ihlea_racovitzai", "KR057222.1_Brooksia_lacromae"))
#Remove straneous characters and Accession codes from tip labels
Strees <- lapply(Strees, function(t){t$tip.label %>%
str_remove_all(".+\\..+?_") %>%
str_replace_all("_", " ") -> t$tip.label; return(t)})
#Remove outgroups
Strees <- lapply(Strees, drop.tip, c("Pyrosomella verticillata", "Pyrosoma atlanticum", "Pyrosoma godeauxi","Pyrostremma spinosum", "Clavelina meridionalis", "Pycnoclavella aff. detorta", "Ascidia ceratodes", "Perophora sagamiensis","Megalodicopia hians", "Chelyosoma siboja", "Ciona intestinalis", "Molgula manhattensis", "Oikopleura dioica","Halocynthia igaboja", "Echinorhinus cookei", "Myxine glutinosa", "Branchiostoma floridae", "Doliolum denticulatum", "Doliolum nationalis"))
#correct spelling
Strees <- lapply(Strees, function(t){t$tip.label[which(t$tip.label == "Cyclosalpa floridana")] <- "Cyclosalpa floridiana"; return(t)})
#Ladderize for homogeneity in tip order
Strees <- lapply(Strees, ladderize)
#Make ultrametric
Strees <- lapply(Strees, chronos)
#Quantify each unique tree topology
ape::unique.multiPhylo(Strees, use.tip.label = F)->Strees_Unique
lapply(Strees_Unique, function(t){length(lapply(Strees, function(Tr){all.equal.phylo(t,Tr,use.edge.length = F, use.tip.label = F)}) %>% unlist() %>% .[which(.==TRUE)])}) %>% unlist() -> BSratios
BS_ratios <- (BSratios*100)/sum(BSratios)
round(BS_ratios,2) %>% sort() %>% .[length(BS_ratios):1]
Strees_Unique <- Strees_Unique[order(BS_ratios)[length(BS_ratios):1]]
BS_ratios
Strees
plot(Strees[[1]])
plot(Streese[[1]])
plot(Strees_Unique[[1]])
lapply(Strees_Unique, function(t){length(lapply(Strees, function(Tr){all.equal.phylo(t,Tr,use.edge.length = F, use.tip.label = F)}) %>% unlist() %>% .[which(.==TRUE)])})
BSratios
BSratios %>% class()
BSratios %>% as.numeric()
lapply(Strees_Unique, function(t){length(lapply(Strees, function(Tr){all.equal.phylo(t,Tr,use.edge.length = F, use.tip.label = F)}) %>% unlist() %>% .[which(.==TRUE)])}) %>% unlist() %>% as.numeric() -> BSratios
BS_ratios <- (BSratios*100)/sum(BSratios)
round(BS_ratios,2) %>% sort() %>% .[length(BS_ratios):1]
tree_salp <- read.nexus("phylogeny/RevBayes/TIMETREE_Gov2011+Higa+Cint+news_MUSCLE_output/TimeTree_GovUNIONCho-AB921975Mman+news_MUSCLE_mcmc_MAP.tre")
#Remove duplicate and ingroup undescribed salp species
### ATTENTION: MAKE SURE THESE MAXIMIZE BRANCH LENGTHS  ####
tree_salp <- drop.tip(tree_salp, c("HQ015387.1_Pegea_confoederata","HQ015397.1_Cyclosalpa_quadriluminis","HQ015391.1_Cyclosalpa_affinis","HQ015396.1_Cyclosalpa_polae","HQ015398.1_Cyclosalpa_sewelli","FM244866.1_Iasis_cylindrica","HQ015399.1_Iasis_cylindrica","HQ015402.1_Iasis_cylindrica","HQ015401.1_Iasis_cylindrica","HQ015413.1_Thalia_democratica","HQ015414.1_Thalia_democratica","D14366.1_Thalia_democratica","HQ015410.1_Ritteriella_retracta","HQ015404.1_Brooksia_rostrata","HQ015408.1_Salpa_maxima","HQ015406.1_Salpa_thompsoni", "HQ015377.1_Salpidae_gen._nov._sp._nov._A", "FM244865.1_Ihlea_racovitzai", "KR057222.1_Brooksia_lacromae"))
#Remove accession codes and _
tree_salp$tip.label <- str_remove_all(tree_salp$tip.label, ".+\\..+?_")
tree_salp$tip.label <- str_replace_all(tree_salp$tip.label, "_", " ")
#Correct spellings
tree_salp$tip.label[which(tree_salp$tip.label == "Cyclosalpa floridana")] <- "Cyclosalpa floridiana"
#Remove outgroups
tree_salp <- drop.tip(tree_salp, c("Pyrosomella verticillata", "Pyrosoma atlanticum", "Pyrosoma godeauxi","Pyrostremma spinosum", "Clavelina meridionalis", "Pycnoclavella aff. detorta", "Ascidia ceratodes", "Perophora sagamiensis","Megalodicopia hians", "Chelyosoma siboja", "Ciona intestinalis", "Molgula manhattensis", "Oikopleura dioica","Halocynthia igaboja", "Echinorhinus cookei", "Myxine glutinosa", "Branchiostoma floridae", "Doliolum denticulatum", "Doliolum nationalis"))
Strees <- read.tree("phylogeny/RevBayes/TOPOLOGY_Gov2011+HigaCint+New_MUSCLE_output/Gov2011+HigaCint+New_MUSCLE_18S.trees")
#remove duplicate species and undescribed ingroup
Strees <- lapply(Strees, drop.tip, c("HQ015387.1_Pegea_confoederata","HQ015397.1_Cyclosalpa_quadriluminis","HQ015391.1_Cyclosalpa_affinis","HQ015396.1_Cyclosalpa_polae","HQ015398.1_Cyclosalpa_sewelli","FM244866.1_Iasis_cylindrica","HQ015399.1_Iasis_cylindrica","HQ015402.1_Iasis_cylindrica","HQ015401.1_Iasis_cylindrica","HQ015413.1_Thalia_democratica","HQ015414.1_Thalia_democratica","D14366.1_Thalia_democratica","HQ015410.1_Ritteriella_retracta","HQ015404.1_Brooksia_rostrata","HQ015408.1_Salpa_maxima","HQ015406.1_Salpa_thompsoni", "HQ015377.1_Salpidae_gen._nov._sp._nov._A", "FM244865.1_Ihlea_racovitzai", "KR057222.1_Brooksia_lacromae"))
#Remove straneous characters and Accession codes from tip labels
Strees <- lapply(Strees, function(t){t$tip.label %>%
str_remove_all(".+\\..+?_") %>%
str_replace_all("_", " ") -> t$tip.label; return(t)})
#Remove outgroups
Strees <- lapply(Strees, drop.tip, c("Pyrosomella verticillata", "Pyrosoma atlanticum", "Pyrosoma godeauxi","Pyrostremma spinosum", "Clavelina meridionalis", "Pycnoclavella aff. detorta", "Ascidia ceratodes", "Perophora sagamiensis","Megalodicopia hians", "Chelyosoma siboja", "Ciona intestinalis", "Molgula manhattensis", "Oikopleura dioica","Halocynthia igaboja", "Echinorhinus cookei", "Myxine glutinosa", "Branchiostoma floridae", "Doliolum denticulatum", "Doliolum nationalis"))
#correct spelling
Strees <- lapply(Strees, function(t){t$tip.label[which(t$tip.label == "Cyclosalpa floridana")] <- "Cyclosalpa floridiana"; return(t)})
#Ladderize for homogeneity in tip order
Strees <- lapply(Strees, ladderize)
#Make ultrametric
Strees <- lapply(Strees, chronos)
#Quantify each unique tree topology
ape::unique.multiPhylo(Strees, use.tip.label = F)->Strees_Unique
lapply(Strees_Unique, function(t){length(lapply(Strees, function(Tr){all.equal.phylo(t,Tr,use.edge.length = F, use.tip.label = F)}) %>% unlist() %>% .[which(.==TRUE)])}) %>% unlist() %>% as.numeric() -> BSratios
BS_ratios <- (BSratios*100)/sum(BSratios)
round(BS_ratios,2) %>% sort() %>% .[length(BS_ratios):1]
Strees_Unique <- Strees_Unique[order(BS_ratios)[length(BS_ratios):1]]
par(mfrow=c(7,7),mar=c(0,0,0,0), oma=c(0,0,0,0))
lapply(Strees_Unique,function(t){plot.phylo(t, use.edge.length = F, cex=0.2)})
BS_ratios
round(BS_ratios,2) %>% sort() %>% .[length(BS_ratios):1]
#Test proportion of specific nodes
#Make unitary BLs and ultrametric
Strees_clado <- lapply(Strees, function(TREE){TREE$edge.length <- rep(1,length(TREE$edge.length));return(TREE)}) %>%
lapply(Strees_clado, chronos)
Strees_clado <- lapply(Strees, function(TREE){TREE$edge.length <- rep(1,length(TREE$edge.length));return(TREE)}) %>%
lapply(Strees_clado, chronos)
Strees_clado <- lapply(Strees, function(TREE){TREE$edge.length <- rep(1,length(TREE$edge.length));return(TREE)}) %>%
lapply(chronos)
cophenetic(TRE)["Brooksia rostrata","Ritteriella retracta"]>cophenetic(TRE)["Brooksia rostrata","Cyclosalpa polae"] &
cophenetic(TRE)["Salpa aspera","Cyclosalpa polae"]<cophenetic(TRE)["Ritteriella retracta","Cyclosalpa polae"] &
cophenetic(TRE)["Salpa aspera","Cyclosalpa polae"]<cophenetic(TRE)["Brooksia rostrata","Cyclosalpa polae"] &
cophenetic(TRE)["Salpa aspera","Cyclosalpa polae"]<cophenetic(TRE)["Ritteriella retracta","Salpa aspera"] &
cophenetic(TRE)["Salpa aspera","Cyclosalpa polae"]<cophenetic(TRE)["Brooksia rostrata","Salpa aspera"]
}) %>% unlist() %>% table() -> cr; print(cr/30.01)
lapply(strees_clado, function(TRE){
#cophenetic(TRE)["Brooksia rostrata","Ritteriella retracta"]>cophenetic(TRE)["Ritteriella retracta","Cyclosalpa polae"] &
cophenetic(TRE)["Brooksia rostrata","Ritteriella retracta"]>cophenetic(TRE)["Brooksia rostrata","Cyclosalpa polae"] &
cophenetic(TRE)["Salpa aspera","Cyclosalpa polae"]<cophenetic(TRE)["Ritteriella retracta","Cyclosalpa polae"] &
cophenetic(TRE)["Salpa aspera","Cyclosalpa polae"]<cophenetic(TRE)["Brooksia rostrata","Cyclosalpa polae"] &
cophenetic(TRE)["Salpa aspera","Cyclosalpa polae"]<cophenetic(TRE)["Ritteriella retracta","Salpa aspera"] &
cophenetic(TRE)["Salpa aspera","Cyclosalpa polae"]<cophenetic(TRE)["Brooksia rostrata","Salpa aspera"]
}) %>% unlist() %>% table() -> cr; print(cr/30.01)
plot(Strees_clado[[1]])
par(mfrow=c(1,1))
plot(Strees_clado[[1]])
lapply(strees_clado, function(TRE){
#cophenetic(TRE)["Brooksia rostrata","Ritteriella retracta"]>cophenetic(TRE)["Ritteriella retracta","Cyclosalpa polae"] &
cophenetic(TRE)["Brooksia rostrata","Ritteriella retracta"]>cophenetic(TRE)["Brooksia rostrata","Cyclosalpa polae"] &
cophenetic(TRE)["Salpa aspera","Cyclosalpa polae"]<cophenetic(TRE)["Ritteriella retracta","Cyclosalpa polae"] &
cophenetic(TRE)["Salpa aspera","Cyclosalpa polae"]<cophenetic(TRE)["Brooksia rostrata","Cyclosalpa polae"] &
cophenetic(TRE)["Salpa aspera","Cyclosalpa polae"]<cophenetic(TRE)["Ritteriella retracta","Salpa aspera"] &
cophenetic(TRE)["Salpa aspera","Cyclosalpa polae"]<cophenetic(TRE)["Brooksia rostrata","Salpa aspera"]
}) %>% unlist() %>% table() -> cr; print(cr/30.01)
lapply(Strees_clado, function(TRE){
#cophenetic(TRE)["Brooksia rostrata","Ritteriella retracta"]>cophenetic(TRE)["Ritteriella retracta","Cyclosalpa polae"] &
cophenetic(TRE)["Brooksia rostrata","Ritteriella retracta"]>cophenetic(TRE)["Brooksia rostrata","Cyclosalpa polae"] &
cophenetic(TRE)["Salpa aspera","Cyclosalpa polae"]<cophenetic(TRE)["Ritteriella retracta","Cyclosalpa polae"] &
cophenetic(TRE)["Salpa aspera","Cyclosalpa polae"]<cophenetic(TRE)["Brooksia rostrata","Cyclosalpa polae"] &
cophenetic(TRE)["Salpa aspera","Cyclosalpa polae"]<cophenetic(TRE)["Ritteriella retracta","Salpa aspera"] &
cophenetic(TRE)["Salpa aspera","Cyclosalpa polae"]<cophenetic(TRE)["Brooksia rostrata","Salpa aspera"]
}) %>% unlist() %>% table() -> cr; print(cr/30.01)
lapply(Strees_clado, function(TRE){
#cophenetic(TRE)["Brooksia rostrata","Ritteriella retracta"]>cophenetic(TRE)["Ritteriella retracta","Cyclosalpa polae"] &
cophenetic(TRE)["Ihlea racovitzai","Pegea bicaudata"]<cophenetic(TRE)["Ihlea racovitzai","Cyclosalpa polae"] &
#cophenetic(TRE)["Salpa aspera","Cyclosalpa polae"]<cophenetic(TRE)["Ritteriella retracta","Cyclosalpa polae"] &
}) %>% unlist() %>% table() -> cr; print(cr/30.01)
lapply(Strees_clado, function(TRE){
#cophenetic(TRE)["Brooksia rostrata","Ritteriella retracta"]>cophenetic(TRE)["Ritteriella retracta","Cyclosalpa polae"] &
cophenetic(TRE)["Ihlea racovitzai","Pegea bicaudata"]<cophenetic(TRE)["Ihlea racovitzai","Cyclosalpa polae"]
#cophenetic(TRE)["Salpa aspera","Cyclosalpa polae"]<cophenetic(TRE)["Ritteriella retracta","Cyclosalpa polae"] &
}) %>% unlist() %>% table() -> cr; print(cr/30.01)
lapply(Strees_clado, function(TRE){
#cophenetic(TRE)["Brooksia rostrata","Ritteriella retracta"]>cophenetic(TRE)["Ritteriella retracta","Cyclosalpa polae"] &
cophenetic(TRE)["Cyclosalpa polae","Pegea bicaudata"]<cophenetic(TRE)["Ihlea racovitzai","Cyclosalpa polae"]
#cophenetic(TRE)["Salpa aspera","Cyclosalpa polae"]<cophenetic(TRE)["Ritteriella retracta","Cyclosalpa polae"] &
}) %>% unlist() %>% table() -> cr; print(cr/30.01)
plot(Strees_Unique[[2]])
plot(Strees_Unique[[1]])
lapply(Strees_clado, function(TRE){
#cophenetic(TRE)["Brooksia rostrata","Ritteriella retracta"]>cophenetic(TRE)["Ritteriella retracta","Cyclosalpa polae"] &
cophenetic(TRE)["Salpa younti","Salpa thompsoni"]>cophenetic(TRE)["Salpa younti","Salpa aspera"]
#cophenetic(TRE)["Salpa aspera","Cyclosalpa polae"]<cophenetic(TRE)["Ritteriella retracta","Cyclosalpa polae"] &
}) %>% unlist() %>% table() -> cr; print(cr/30.01)
plot(Strees_Unique[[1]])
plot(Strees_Unique[[3]])
plot(Strees_Unique[[4]])
round(BS_ratios,2) %>% sort() %>% .[length(BS_ratios):1]
plot(Strees_Unique[[5]])
lapply(Strees_clado, function(TRE){
#cophenetic(TRE)["Brooksia rostrata","Ritteriella retracta"]>cophenetic(TRE)["Ritteriella retracta","Cyclosalpa polae"] &
cophenetic(TRE)["Salpa younti","Brooksia rostrata"]>cophenetic(TRE)["Cyclosalpa polae","Brooksia rostrata"]
#cophenetic(TRE)["Salpa aspera","Cyclosalpa polae"]<cophenetic(TRE)["Ritteriella retracta","Cyclosalpa polae"] &
}) %>% unlist() %>% table() -> cr; print(cr/30.01)
lapply(Strees_clado, function(TRE){
#cophenetic(TRE)["Brooksia rostrata","Ritteriella retracta"]>cophenetic(TRE)["Ritteriella retracta","Cyclosalpa polae"] &
cophenetic(TRE)["Salpa younti","Cyclosalpa polae"]<cophenetic(TRE)["Salpa younti","Brooksia rostrata"]
#cophenetic(TRE)["Salpa aspera","Cyclosalpa polae"]<cophenetic(TRE)["Ritteriella retracta","Cyclosalpa polae"] &
}) %>% unlist() %>% table() -> cr; print(cr/30.01)
lapply(Strees_clado, function(TRE){
#cophenetic(TRE)["Brooksia rostrata","Ritteriella retracta"]>cophenetic(TRE)["Ritteriella retracta","Cyclosalpa polae"] &
cophenetic(TRE)["Iasis cylindrica","Thalia democratica"]<cophenetic(TRE)["Iasis cylindrica","Brooksia rostrata"]
#cophenetic(TRE)["Salpa aspera","Cyclosalpa polae"]<cophenetic(TRE)["Ritteriella retracta","Cyclosalpa polae"] &
}) %>% unlist() %>% table() -> cr; print(cr/30.01)
lapply(Strees_clado, function(TRE){
#cophenetic(TRE)["Brooksia rostrata","Ritteriella retracta"]>cophenetic(TRE)["Ritteriella retracta","Cyclosalpa polae"] &
cophenetic(TRE)["Thalia democratica","Salpa younti"]<cophenetic(TRE)["Iasis cylindrica","Salpa younti"]
#cophenetic(TRE)["Salpa aspera","Cyclosalpa polae"]<cophenetic(TRE)["Ritteriella retracta","Cyclosalpa polae"] &
}) %>% unlist() %>% table() -> cr; print(cr/30.01)
lapply(Strees_clado, function(TRE){
#cophenetic(TRE)["Brooksia rostrata","Ritteriella retracta"]>cophenetic(TRE)["Ritteriella retracta","Cyclosalpa polae"] &
cophenetic(TRE)["Cyclosalpa polae","Cyclosalpa sewelli"]<cophenetic(TRE)["Cyclosalpa polae","Cyclosalpa quadriluminis"]
#cophenetic(TRE)["Salpa aspera","Cyclosalpa polae"]<cophenetic(TRE)["Ritteriella retracta","Cyclosalpa polae"] &
}) %>% unlist() %>% table() -> cr; print(cr/30.01)
