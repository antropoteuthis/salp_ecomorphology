overlap_vs_diet %>% group_by(Depth_m_binned) %>%
ggplot(aes(y=..frequency.., axis1=predator,axis2=prey))
overlap_vs_diet %>% group_by(Depth_m_binned) %>%
ggplot(aes(axis1=predator,axis2=group_prey))+
geom_stratum()+
geom_flow(alpha=0.5,aes(fill=group_prey))
overlap_vs_diet %>% group_by(Depth_m_binned) %>%
ggplot(aes(axis1=predator,axis2=group_prey))+
geom_stratum()+
geom_flow(alpha=0.5,aes(fill=group_prey))+
theme(panel.grid.major = element_blank(),
panel.background = element_blank(), legend.position = "none",
axis.line = element_line(colour = "black"),
axis.text.x = element_text(angle = 90,hjust = 0.95 , vjust = 0.2))+
facet_wrap("Depth_m_binned",c(5,1), scales = "free_y")
overlap_vs_diet %>% group_by(Depth_m_binned) %>%
ggplot(aes(axis1=predator,axis2=group_prey))+
geom_stratum()+
geom_flow(alpha=0.5,aes(fill=group_prey))+
theme(panel.grid.major = element_blank(),
panel.background = element_blank(), legend.position = "none",
axis.line = element_line(colour = "black"),
axis.text.x = element_text(angle = 90,hjust = 0.95 , vjust = 0.2))+
facet_wrap("Depth_m_binned",c(5,1), scales = "free_y")+
scale_color_gradient(low="white",high="black")+
scale_fill_manual(values = c("purple","purple","purple",
"brown","green",
"yellow", "yellow","yellow",
"blue","red","orange","orange","orange"))+
ylab("Siphonophore species")+
xlab("Prey type")
DietAlluvial <- overlap_vs_diet %>% group_by(Depth_m_binned) %>%
ggplot(aes(axis1=predator,axis2=group_prey))+
geom_stratum() +
geom_text(stat = "stratum", aes(label = after_stat(stratum))) +
scale_x_discrete(limits = c("Siphonophore", "Prey"))+
geom_flow(alpha=0.5,aes(fill=group_prey))+
theme(panel.grid.major = element_blank(),
panel.background = element_blank(), legend.position = "none",
axis.line = element_line(colour = "black"),
axis.text.x = element_text(angle = 90,hjust = 0.95 , vjust = 0.2))+
facet_wrap("Depth_m_binned",c(5,1), scales = "free_y")+
scale_color_gradient(low="white",high="black")+
scale_fill_manual(values = c("purple","purple","purple",
"brown","green",
"yellow", "yellow","yellow",
"blue","red","orange","orange","orange"))+
ylab("Siphonophore species")+
xlab("Prey type")
DietAlluvial <- overlap_vs_diet %>% group_by(Depth_m_binned) %>%
ggplot(aes(axis1=predator,axis2=group_prey))+
geom_stratum() +
geom_text(stat = "stratum", aes(label = after_stat(stratum))) +
scale_x_discrete(limits = c("Siphonophore", "Prey"))+
geom_flow(alpha=0.5,aes(fill=group_prey))+
theme(panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
axis.text.x = element_text(angle = 90,hjust = 0.95 , vjust = 0.2))+
facet_wrap("Depth_m_binned",c(5,1), scales = "free_y")+
scale_color_gradient(low="white",high="black")+
scale_fill_manual(values = c("purple","purple","purple",
"brown","green",
"yellow", "yellow","yellow",
"blue","red","orange","orange","orange"))+
ylab("Siphonophore species")+
xlab("Prey type")
DietAlluvial <- overlap_vs_diet %>% group_by(Depth_m_binned) %>%
ggplot(aes(axis1=predator,axis2=group_prey))+
geom_stratum() +
geom_text(stat = "stratum", aes(label = after_stat(stratum))) +
scale_x_discrete(limits = c("Siphonophore", "Prey"))+
geom_flow(alpha=0.5,aes(fill=group_prey))+
theme(panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
axis.text.x = element_text(angle = 90,hjust = 0.95 , vjust = 0.2))+
facet_wrap("Depth_m_binned",c(5,1), scales = "free_x")+
scale_color_gradient(low="white",high="black")+
scale_fill_manual(values = c("purple","purple","purple",
"brown","green",
"yellow", "yellow","yellow",
"blue","red","orange","orange","orange"))+
ylab("Siphonophore species")+
xlab("Prey type")
DietAlluvial <- overlap_vs_diet %>% group_by(Depth_m_binned) %>%
ggplot(aes(axis1=predator,axis2=group_prey))+
geom_stratum() +
geom_text(stat = "stratum", aes(label = after_stat(stratum))) +
scale_x_discrete(limits = c("Siphonophore", "Prey"))+
geom_flow(alpha=0.5,aes(fill=group_prey))+
theme(panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
axis.text.x = element_text(angle = 90,hjust = 0.95 , vjust = 0.2))+
facet_wrap("Depth_m_binned",c(5,1), scales = "free")+
scale_color_gradient(low="white",high="black")+
scale_fill_manual(values = c("purple","purple","purple",
"brown","green",
"yellow", "yellow","yellow",
"blue","red","orange","orange","orange"))+
ylab("Siphonophore species")+
xlab("Prey type")
DietAlluvial <- overlap_vs_diet %>% group_by(Depth_m_binned) %>%
ggplot(aes(axis1=predator,axis2=group_prey))+
geom_stratum() +
geom_text(stat = "stratum", aes(label = after_stat(stratum))) +
scale_x_discrete(limits = c("Siphonophore", "Prey"))+
geom_flow(alpha=0.5,aes(fill=group_prey))+
theme(panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
axis.text.x = element_text(angle = 90,hjust = 0.95 , vjust = 0.2))+
facet_wrap("Depth_m_binned",c(5,1))+
scale_color_gradient(low="white",high="black")+
scale_fill_manual(values = c("purple","purple","purple",
"brown","green",
"yellow", "yellow","yellow",
"blue","red","orange","orange","orange"))+
ylab("Siphonophore species")+
xlab("Prey type")
DietAlluvial <- overlap_vs_diet %>% group_by(Depth_m_binned) %>%
ggplot(aes(axis1=predator,axis2=group_prey))+
geom_stratum() +
geom_text(stat = "stratum", aes(label = stratum)) +
scale_x_discrete(limits = c("Siphonophore", "Prey"))+
geom_flow(alpha=0.5,aes(fill=group_prey))+
theme(panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
axis.text.x = element_text(angle = 90,hjust = 0.95 , vjust = 0.2))+
facet_wrap("Depth_m_binned",c(5,1))+
scale_fill_manual(values = c("purple","purple","purple",
"brown","green",
"yellow", "yellow","yellow",
"blue","red","orange","orange","orange"))+
ylab("Siphonophore species")+
xlab("Prey type")
DietAlluvial <- overlap_vs_diet %>% group_by(Depth_m_binned) %>%
ggplot(aes(axis1=predator,axis2=group_prey))+
geom_stratum() +
geom_text(stat = "stratum", aes(label = after_stat(stratum))) +
scale_x_discrete(limits = c("Siphonophore", "Prey"))+
geom_flow(alpha=0.5,aes(fill=group_prey))+
theme(panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
axis.text.x = element_text(angle = 90,hjust = 0.95 , vjust = 0.2))+
facet_wrap("Depth_m_binned",c(5,1))+
scale_fill_manual(values = c("purple","purple","purple",
"brown","green",
"yellow", "yellow","yellow",
"blue","red","orange","orange","orange"))
DietAlluvial
DietAlluvial <- overlap_vs_diet %>% group_by(Depth_m_binned) %>%
ggplot(aes(axis1=predator,axis2=group_prey))+
geom_stratum() +
geom_text(stat = "stratum", aes(label = after_stat(stratum))) +
scale_x_discrete(limits = c("Siphonophore", "Prey"))+
geom_flow(alpha=0.5,aes(fill=group_prey))+
theme(panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
axis.text.x = element_text(angle = 90,hjust = 0.95 , vjust = 0.2))+
facet_wrap("Depth_m_binned",c(5,1),scales="free")+
scale_fill_manual(values = c("purple","purple","purple",
"brown","green",
"yellow", "yellow","yellow",
"blue","red","orange","orange","orange"))
overlap_vs_diet %>% group_by(Depth_m_binned) %>%
ggplot(aes(axis1=predator,axis2=group_prey))+
geom_stratum() +
geom_text(stat = "stratum", aes(label = after_stat(stratum))) +
scale_x_discrete(limits = c("Siphonophore", "Prey"))+
geom_flow(alpha=0.5,aes(fill=group_prey))+
theme(panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
axis.text.x = element_text(angle = 90,hjust = 0.95 , vjust = 0.2))+
facet_wrap("Depth_m_binned",c(5,1),scales="free")+
scale_fill_manual(values = c("purple","purple","purple",
"brown","green",
"yellow", "yellow","yellow",
"blue","red","orange","orange","orange"))
overlap_vs_diet %>% group_by(Depth_m_binned) %>%
ggplot(aes(axis1=predator,axis2=group_prey))+
geom_stratum() +
geom_text(stat = "stratum", aes(label = after_stat(stratum)), cex=0.4) +
scale_x_discrete(limits = c("Siphonophore", "Prey"))+
geom_flow(alpha=0.5,aes(fill=group_prey))+
theme(panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
axis.text.x = element_text(angle = 90,hjust = 0.95 , vjust = 0.2))+
facet_wrap("Depth_m_binned",c(5,1),scales="free")+
scale_fill_manual(values = c("purple","purple","purple",
"brown","green",
"yellow", "yellow","yellow",
"blue","red","orange","orange","orange"))
overlap_vs_diet %>% group_by(Depth_m_binned) %>%
ggplot(aes(axis1=predator,axis2=group_prey))+
geom_stratum() +
geom_text(stat = "stratum", aes(label = after_stat(stratum)), cex=2) +
scale_x_discrete(limits = c("Siphonophore", "Prey"))+
geom_flow(alpha=0.5,aes(fill=group_prey))+
theme(panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
axis.text.x = element_text(angle = 90,hjust = 0.95 , vjust = 0.2))+
facet_wrap("Depth_m_binned",c(5,1),scales="free")+
scale_fill_manual(values = c("purple","purple","purple",
"brown","green",
"yellow", "yellow","yellow",
"blue","red","orange","orange","orange"))
overlap_vs_diet %>% group_by(Depth_m_binned) %>%
ggplot(aes(axis1=predator,axis2=group_prey))+
geom_stratum(aes(fill=group_prey)) +
geom_text(stat = "stratum", aes(label = after_stat(stratum)), cex=2) +
scale_x_discrete(limits = c("Siphonophore", "Prey"))+
geom_flow(alpha=0.5,aes(fill=group_prey))+
theme(panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
axis.text.x = element_text(angle = 90,hjust = 0.95 , vjust = 0.2))+
facet_wrap("Depth_m_binned",c(5,1),scales="free")+
scale_fill_manual(values = c("purple","purple","purple",
"brown","green",
"yellow", "yellow","yellow",
"blue","red","orange","orange","orange"))
overlap_vs_diet %>% group_by(Depth_m_binned) %>%
ggplot(aes(axis1=predator,axis2=group_prey))+
geom_stratum(aes(fill=group_prey)) +
geom_text(stat = "stratum", aes(label = after_stat(stratum)), cex=2) +
scale_x_discrete(limits = c("Siphonophore", "Prey"))+
geom_flow(aes(fill=group_prey))+
theme(panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))+
facet_wrap("Depth_m_binned",c(5,1),scales="free")+
scale_fill_manual(values = c("purple","purple","purple",
"brown","green",
"yellow", "yellow","yellow",
"blue","red","orange","orange","orange"))
library(tidyverse)
library(wql)
library(ggrepel)
library(patchwork)
require(data.table)
library(mgcv)
setwd("~/salp_ecomorphology/")
#Load data and label: control rows, paired specimens
presens <- read.csv("respirometry_Kona21-22s.tsv", header = T, sep = "\t", stringsAsFactors = F)
presens$Species[which(is.na(presens$Species))] <- "Control"
presens$Specimen[which(is.na(presens$Specimen))] <- "Control"
presens <- mutate(presens, is.paired=ifelse(Measurement.notes=="Paired", "Yes", "No"))
as.numeric(as.factor(presens$Injection.time)) -> presens$Injection.time
#Filter to get only plastic and non-mgcl2 blastozooid measurements
presens <- presens[which(presens$Container=="Plastic" & presens$Treatment != "MgCl2"),]
presens <- presens[which(presens$Stage=="Blastozooid" | is.na(presens$Stage)),]
#Estimate absolute oxygen mg
ggplot(presens,aes(x=Specimen,y=O2..mg.L.))+geom_point(aes(col=Time.point..min.))+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
presens <- mutate(presens, abs_O2.mg. = O2..mg.L.*Container.volume..ml./1000)
ggplot(presens,aes(x=Specimen,y=abs_O2.mg.))+geom_point(aes(col=Container.volume..ml. %>% log()))+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
#Colony volume imputation for those specimens where we didn't measure the specimen biovolume in the field
imputed_vols <- data.frame(imputed_vol = round(presens[which(!is.na(presens$Colony.volume..ml.)),"Number.of.zooids"]*pi*presens[which(!is.na(presens$Colony.volume..ml.)),"Zooid.length..mm."]*((presens[which(!is.na(presens$Colony.volume..ml.)),"Zooid.length..mm."]/2)^2)*0.001,1),
real_vol = presens[which(!is.na(presens$Colony.volume..ml.)),"Colony.volume..ml."],
Number.of.zooids = presens[which(!is.na(presens$Colony.volume..ml.)), "Number.of.zooids"],
Zooid.length..mm. = presens[which(!is.na(presens$Colony.volume..ml.)),"Zooid.length..mm."],
Species = presens[which(!is.na(presens$Colony.volume..ml.)),"Species"])
#try out an imputation fit by hand using a 3D ellipsoid formula
mutate(imputed_vols, estimate_vol=Number.of.zooids*(ifelse(Species=="Salpa maxima",0.00005,0.00015)*pi*Zooid.length..mm.*((0.35*Zooid.length..mm.)^2 - ((0.25*Zooid.length..mm.)^2)))) %>%
ggplot(aes(x=real_vol, y=estimate_vol)) +
geom_point(aes(col=Species))
#try a GAM-based modeling for the imputation
fit3 = gam(real_vol~Zooid.length..mm.+Number.of.zooids, data = imputed_vols)
fit3$coefficients[1] <- 0
unknown=as.data.frame(presens[which(is.na(presens$Colony.volume..ml.) & presens$Species != "Control"),c("Number.of.zooids","Zooid.length..mm.")])
presens$Colony.volume..ml.[which(is.na(presens$Colony.volume..ml.) & presens$Species != "Control")] <- predict.gam(fit3, unknown) %>% as.vector()
#Match each measurement with its relevant control
presens$abs_O2.mg._control <- presens$Measurement #placeholder column
#Match each measurement with its relevant control
presens$abs_O2.mg._control <- presens$Measurement #placeholder column
for(i in 1:nrow(presens)){
if(!is.na(presens$Relevant.control[i]) & presens$Specimen[i] != "Control"){
presens$abs_O2.mg._control[i] <- presens$abs_O2.mg.[which(presens$Measurement == presens$Relevant.control[i])]
}
}
#remove control rows
rename(as_tibble(presens) %>% filter(presens$Specimen != "Control"), abs_O2.mg._animal=abs_O2.mg.) %>% as.data.frame() -> presens
View(presens)
#Factorize specimen and species concepts
factSPsp <- function(df){
df$Species <- as.factor(df$Species)
df$Specimen <- as.factor(df$Specimen)
df$Experiment <- as.factor(df$Specimen)
}
factSPsp(presens)
ggplot(presens, aes(x=Time.point..min., y=abs_O2.mg._control)) +
geom_point() +
ylab("O2 (mg) Controls Intact") +
theme_bw()
#SLOPE CALCULATIONS
slopes <- as.data.frame(matrix(ncol=12,nrow=length(unique(paste0(join_presens$Specimen,join_presens$Treatment)))))
names(slopes) <- c("Species","Specimen","Colony.volume..ml.","Zooid.length..mm.","Number.of.zooids","Slope_O2", "Slope_O2.control", "Slope_O2_dif", "Timespan","Temperature_range","Treatment","Paired")
for(i in 1:length(unique(paste0(presens$Specimen,presens$Treatment)))){
spm_i <- unique(paste(presens$Specimen,presens$Treatment),sep=" ")[i] %>%
str_split(pattern=" ") %>%
.[[1]] %>% .[1]
treat_i <- unique(paste(presens$Specimen,presens$Treatment),sep=" ")[i] %>%
str_split(pattern=" ") %>%
.[[1]] %>% .[2]
series_i <- presens[which(presens$Specimen==spm_i & presens$Treatment==treat_i),c("Specimen","Species","Zooid.length..mm.","Number.of.zooids","Colony.volume..ml.","Time.point..min.","Temperature...C.","abs_O2.mg._animal","abs_O2.mg._control","Treatment","is.paired")]
lm_animal <- lm(abs_O2.mg._animal~Time.point..min., series_i)
lm_control <- lm(abs_O2.mg._control~Time.point..min., series_i)
print(series_i$Specimen[1] %>% as.character());print(series_i$Species[1] %>% as.character());print(lm_animal$coefficients);print(lm_control$coefficients)
time.span_i <- max(series_i$Time.point..min.)-min(series_i$Time.point..min.)
#"Species","Specimen","Colony.volume..ml.","Zooid.length..mm.","Number.of.zooids",
slopes[i,1] <- series_i$Species[1] %>% as.character()
slopes[i,2] <- series_i$Specimen[1] %>% as.character()
slopes[i,3] <- series_i$Colony.volume..ml.[1] %>% as.numeric()
slopes[i,4] <- series_i$Zooid.length..mm.[1] %>% as.numeric()
slopes[i,5] <- series_i$Number.of.zooids[1] %>% as.numeric()
#"Slope_O2", "Slope_O2.control", "Slope_O2_dif"
slopes[i,6] <- lm_animal$coefficients[2]
slopes[i,7] <- lm_control$coefficients[2]
slopes[i,8] <- lm_animal$coefficients[2] - lm_control$coefficients[2]
#"Timespan","Temperature_range","Treatment","Paired"
slopes[i,9] <- time.span_i
slopes[i,10] <- if(!is.na(mean(series_i$Temperature...C., na.rm = T))){max(series_i$Temperature...C., na.rm=T) - min(series_i$Temperature...C., na.rm=T)} else NA
print(series_i$Treatment)
slopes[i,11] <- series_i$Treatment %>% unique()
slopes[i,12] <- series_i$is.paired %>% unique()
}
#SLOPE CALCULATIONS
slopes <- as.data.frame(matrix(ncol=12,nrow=length(unique(paste0(join_presens$Specimen,join_presens$Treatment)))))
#SLOPE CALCULATIONS
slopes <- as.data.frame(matrix(ncol=12,nrow=length(unique(paste0(join_presens$Specimen,join_presens$Treatment)))))
#SLOPE CALCULATIONS
slopes <- as.data.frame(matrix(ncol=12,nrow=length(unique(paste0(presens$Specimen,join_presens$Treatment)))))
#SLOPE CALCULATIONS
slopes <- as.data.frame(matrix(ncol=12,nrow=length(unique(paste0(presens$Specimen,presens$Treatment)))))
names(slopes) <- c("Species","Specimen","Colony.volume..ml.","Zooid.length..mm.","Number.of.zooids","Slope_O2", "Slope_O2.control", "Slope_O2_dif", "Timespan","Temperature_range","Treatment","Paired")
for(i in 1:length(unique(paste0(presens$Specimen,presens$Treatment)))){
spm_i <- unique(paste(presens$Specimen,presens$Treatment),sep=" ")[i] %>%
str_split(pattern=" ") %>%
.[[1]] %>% .[1]
treat_i <- unique(paste(presens$Specimen,presens$Treatment),sep=" ")[i] %>%
str_split(pattern=" ") %>%
.[[1]] %>% .[2]
series_i <- presens[which(presens$Specimen==spm_i & presens$Treatment==treat_i),c("Specimen","Species","Zooid.length..mm.","Number.of.zooids","Colony.volume..ml.","Time.point..min.","Temperature...C.","abs_O2.mg._animal","abs_O2.mg._control","Treatment","is.paired")]
lm_animal <- lm(abs_O2.mg._animal~Time.point..min., series_i)
lm_control <- lm(abs_O2.mg._control~Time.point..min., series_i)
print(series_i$Specimen[1] %>% as.character());print(series_i$Species[1] %>% as.character());print(lm_animal$coefficients);print(lm_control$coefficients)
time.span_i <- max(series_i$Time.point..min.)-min(series_i$Time.point..min.)
#"Species","Specimen","Colony.volume..ml.","Zooid.length..mm.","Number.of.zooids",
slopes[i,1] <- series_i$Species[1] %>% as.character()
slopes[i,2] <- series_i$Specimen[1] %>% as.character()
slopes[i,3] <- series_i$Colony.volume..ml.[1] %>% as.numeric()
slopes[i,4] <- series_i$Zooid.length..mm.[1] %>% as.numeric()
slopes[i,5] <- series_i$Number.of.zooids[1] %>% as.numeric()
#"Slope_O2", "Slope_O2.control", "Slope_O2_dif"
slopes[i,6] <- lm_animal$coefficients[2]
slopes[i,7] <- lm_control$coefficients[2]
slopes[i,8] <- lm_animal$coefficients[2] - lm_control$coefficients[2]
#"Timespan","Temperature_range","Treatment","Paired"
slopes[i,9] <- time.span_i
slopes[i,10] <- if(!is.na(mean(series_i$Temperature...C., na.rm = T))){max(series_i$Temperature...C., na.rm=T) - min(series_i$Temperature...C., na.rm=T)} else NA
print(series_i$Treatment)
slopes[i,11] <- series_i$Treatment %>% unique()
slopes[i,12] <- series_i$is.paired %>% unique()
}
#Normalize by colony volume, transform to PicoGrams of O2
slopes %>% mutate(Slope_normalized = 1000000*Slope_O2/Colony.volume..ml., Slope_O2_dif_normalized = 1000000*Slope_O2_dif/Colony.volume..ml.) -> slopes
#Get carbon estimates
#Estimate Carbon content for each species and recalculate carbon-based rawCOT
mm_to_carbon <- read.csv("Madin1981_salpcarbon.tsv", header=T, stringsAsFactors = F, sep='\t')
mm_to_carbon$Generation[mm_to_carbon$Species=="Iasis (Weelia) cylindrica"] <- "a" ##PROXY
mm_to_carbon$Species[mm_to_carbon$Species=="Thalia democratica"] <- "Thalia sp."  #### amalgamation!
#Normalize by carbon
slopes %>% left_join(mm_to_carbon[which(mm_to_carbon$Generation=="a"),c(1,4,5)], by="Species") %>%
mutate(mgC = Regression_b*Zooid.length..mm.^Regression_a) %>%
mutate(Slopes_mgC = 1000000*Slope_O2/mgC, Slopes_dif_mgC = 1000000*Slope_O2_dif/mgC) -> slopes
slopes$Species %>% factor(levels=c("Pegea sp.", "Helicosalpa virgula","Cyclosalpa affinis",
"Cyclosalpa bakeri", "Cyclosalpa quadriluminis","Cyclosalpa polae",
"Cyclosalpa sewelli", "Ritteriella sp.", "Ritteriella amboinensis",
"Brooksia rostrata", "Thalia sp.", "Metcalfina hexagona", "Salpa fusiformis", "Salpa aspera", "Salpa maxima",
"Iasis (Weelia) cylindrica", "Soestia zonaria")) -> slopes$Species
### COST OF TRANSPORT ###
#Get swimming speeds
salplit <- read.csv("salplit.tsv", sep='\t', stringsAsFactors = F)
swimraw <- salplit[,c(1,2,4)] %>% filter(Variable=="Mean swimming speed cms")
swim <- data.frame(Species=swimraw$Species, Speed.cm.s=as.numeric(swimraw$Value))
swim <- read.csv("SalpPreliminaryPass.tsv",sep='\t', stringsAsFactors = F)[,c(1,15)]
swim <- swim[!is.na(swim$Speed..cm.s.),]
names(swim)[2] <- "Speed.cm.s"
#### CAUTION ##### WE ARE SWAPPING NAMES HERE
swim$Species[swim$Species=="Helicosalpa younti"] <- "Helicosalpa virgula"
swim$Species[swim$Species=="Pegea socia"] <- "Pegea sp."
swim$Species[swim$Species=="Ritteriella retracta"] <- "Ritteriella sp."
swim$Species[swim$Species=="Rittereilla amboinensis"] <- "Ritteriella amboinensis"
swim$Species[swim$Species=="Thalia democratica"] <- "Thalia sp."
energetics <- mutate(slopes, Species=as.character(Species))
energetics$Species[energetics$Species=="Iasis (Weelia) cylindrica"] <- "Iasis cylindrica"
energetics <- left_join(energetics, swim, by="Species")
energetics$Zooid.length..mm. <- as.numeric(energetics$Zooid.length..mm.)
energetics$Number.of.zooids <- as.numeric(energetics$Number.of.zooids)
energetics %>% mutate(Speed.body.s = 10*Speed.cm.s/Zooid.length..mm.) -> energetics #speed per body lengths
energetics %>% group_by(Species) %>% summarize(-Slope_O2_dif_normalized %>% mean(na.rm=T))
#Define COST of LIVING: COT.abs as mgO2/(Zooid.vol*cm_moved)  v.v. COT.rel as mgO2/(Zooid.vol*bodylength)
energetics %>% filter(energetics$Treatment=="Intact") %>%
mutate(COT.abs.ml = -Slope_O2_dif_normalized/(Speed.cm.s*60),
COT.rel.ml = -Slope_O2_dif_normalized/(Speed.body.s*60),
COT.abs.mgC = -Slope_O2_dif_normalized/(Speed.cm.s*60),
COT.rel.mgC = -Slope_O2_dif_normalized/(Speed.body.s*60)) -> COT_intact
COT_intact <- COT_intact[which(!is.na(COT_intact$COT.abs.ml)),]
COT_intact$Species %>% factor(levels=c("Pegea sp.", "Helicosalpa virgula","Cyclosalpa affinis",
"Cyclosalpa bakeri", "Cyclosalpa quadriluminis","Cyclosalpa polae",
"Cyclosalpa sewelli", "Ritteriella sp.", "Ritteriella amboinensis",
"Brooksia rostrata", "Thalia sp.", "Metcalfina hexagona", "Salpa fusiformis", "Salpa aspera", "Salpa maxima",
"Iasis cylindrica", "Soestia zonaria")) -> COT_intact$Species
#raw cost of living by volume per cm
pdf("Figures_respirometry/Kona2022/rawCOT_intact_abs.pdf", height=6, width=10)
COT_intact %>% filter(!is.na(COT.abs.ml)) %>%
ggplot(aes(x=Species,y=COT.abs.ml))+
geom_boxplot(aes(fill=Speed.cm.s))+
theme_bw()+theme(axis.text.x = element_text(angle = 90))+ylab("Gross Cost of Transport (pgO2/Biovolume per cm moved)") #+ ylim(c(0, 7e-05))
dev.off()
COT_intact %>% filter(!is.na(COT.abs.ml)) %>%
ggplot(aes(x=Species,y=COT.abs.ml))+
geom_boxplot(aes(fill=Speed.cm.s))+
theme_bw()+theme(axis.text.x = element_text(angle = 90))+ylab("Gross Cost of Transport (pgO2/Biovolume per cm moved)") #+ ylim(c(0, 7e-05))
#COT for paired species
COT <- energetics[,c("Species","Specimen","Colony.volume..ml.","Zooid.length..mm.","Number.of.zooids","Treatment","Paired","Slope_O2_dif_normalized","Slopes_dif_mgC","Speed.cm.s","Speed.body.s")]
##### WARNING ##### SKETCHY STUFF TO REMOVE NEGATIVES !!!!
COT$Slope_O2_dif_normalized[which(COT$Slope_O2_dif_normalized>0)] <- 0
COT %>% filter(Paired=="Yes") %>%
pivot_wider(names_from = Treatment, values_from = c(Slope_O2_dif_normalized, Slopes_dif_mgC)) %>%
mutate(COT.abs.ml = -(Slope_O2_dif_normalized_Intact-Slope_O2_dif_normalized_Anesthetized)/(Speed.cm.s*60),
COT.rel.ml = -(Slope_O2_dif_normalized_Intact-Slope_O2_dif_normalized_Anesthetized)/(Speed.body.s*60)) %>%
mutate(COT.abs.mgC = -(Slopes_dif_mgC_Intact-Slopes_dif_mgC_Anesthetized)/(Speed.cm.s*60),
COT.rel.mgC = -(Slopes_dif_mgC_Intact-Slopes_dif_mgC_Anesthetized)/(Speed.body.s*60)) -> COT_paired
#COT by biovolume per cm across species
COT_paired %>% filter(!is.na(COT.abs.ml)) %>%
ggplot(aes(x=Species,y=(COT.abs.ml) ))+
geom_boxplot(aes(col=Speed.cm.s, fill= Speed.cm.s))+
theme_bw()+
theme(axis.text.x = element_text(angle = 90))+
ylab("Net cost of Transport (pgO2/ml per cm moved)")
#COT by biovolume per zooid length across species
COT_paired %>% filter(!is.na(COT.rel.ml)) %>%
ggplot(aes(x=Species,y=(COT.rel.ml) ))+
geom_boxplot(aes(col=Speed.cm.s, fill= Speed.cm.s))+
theme_bw()+
theme(axis.text.x = element_text(angle = 90))+
ylab("Net cost of Transport (pgO2/ml per zooid length moved)")
#COT by mgC per cm across species
COT_paired %>% filter(!is.na(COT.abs.mgC)) %>%
ggplot(aes(x=Species,y=(COT.abs.mgC) ))+
geom_boxplot()+
theme_bw()+
theme(axis.text.x = element_text(angle = 90))+
ylab("Net cost of Transport (pgO2/mgC per cm moved)")
#COT by mgC per zooid length across species
COT_paired %>% filter(!is.na(COT.rel.mgC)) %>%
ggplot(aes(x=Species,y=COT.rel.mgC ))+
geom_boxplot()+
theme_bw()+
theme(axis.text.x = element_text(angle = 90))+
ylab("Net cost of Transport (pgO2/mgC per zooid length moved)")
###  COT paired by species   ###
COT %>% filter(!is.na(Species)) %>%
pivot_wider(names_from = Treatment, values_from = c(Slope_O2_dif_normalized, Slopes_dif_mgC)) %>%
group_by(Species) %>%
summarise_at(vars("Speed.cm.s", "Speed.body.s", "Slope_O2_dif_normalized_Intact", "Slope_O2_dif_normalized_Anesthetized", "Slopes_dif_mgC_Intact", "Slopes_dif_mgC_Anesthetized", "Zooid.length..mm."),
function(x){median(x, na.rm=T)}) %>% as.data.frame() -> COT_species
#Systemic corrections
COT_species[,c(1,4,5)] -> playDF
playDF[which(playDF$Slope_O2_dif_normalized_Intact>
playDF$Slope_O2_dif_normalized_Anesthetized),"Slope_O2_dif_normalized_Intact"]
playDF$Slope_O2_dif_normalized_Intact
playDF[which(playDF$Slope_O2_dif_normalized_Intact>
playDF$Slope_O2_dif_normalized_Anesthetized),"Slope_O2_dif_normalized_Anesthetized"]
playDF
max(playDF[which(playDF$Slope_O2_dif_normalized_Intact>
playDF$Slope_O2_dif_normalized_Anesthetized),"Slope_O2_dif_normalized_Intact"]-
playDF[which(playDF$Slope_O2_dif_normalized_Intact>
playDF$Slope_O2_dif_normalized_Anesthetized),"Slope_O2_dif_normalized_Anesthetized"])
playDF[which(playDF$Slope_O2_dif_normalized_Intact>
playDF$Slope_O2_dif_normalized_Anesthetized),"Slope_O2_dif_normalized_Intact"]-
playDF[which(playDF$Slope_O2_dif_normalized_Intact>
playDF$Slope_O2_dif_normalized_Anesthetized),"Slope_O2_dif_normalized_Anesthetized"]
playDF$Slope_O2_dif_normalized_Intact-playDF$Slope_O2_dif_normalized_Anesthetized
###  COT paired by species   ###
COT %>% filter(!is.na(Species)) %>%
pivot_wider(names_from = Treatment, values_from = c(Slope_O2_dif_normalized, Slopes_dif_mgC)) %>%
group_by(Species) %>%
summarise_at(vars("Speed.cm.s", "Speed.body.s", "Slope_O2_dif_normalized_Intact", "Slope_O2_dif_normalized_Anesthetized", "Slopes_dif_mgC_Intact", "Slopes_dif_mgC_Anesthetized", "Zooid.length..mm."),
function(x){median(x, na.rm=T)}) %>% as.data.frame() -> COT_species
View(COT)
View(energetics)
View(slopes)
## Calculate maximum anesthetized slope
max(playDF$Slope_O2_dif_normalized_Anesthetized, na.rm = T) -> Anesthetized_systemic_correction
playDF$Slope_O2_dif_normalized_Anesthetized <- playDF$Slope_O2_dif_normalized_Anesthetized - Anesthetized_systemic_correction
playDF$Slope_O2_dif_normalized_Anesthetized
playDF$Slope_O2_dif_normalized_Intact
playDF$Slope_O2_dif_normalized_Anesthetized
max(playDF$Slope_O2_dif_normalized_Anesthetized, na.rm = T)
## Calculate maximum anesthetized slope
max(playDF$Slope_O2_dif_normalized_Anesthetized, na.rm = T) -> Anesthetized_systemic_correction
playDF$Slope_O2_dif_normalized_Anesthetized - Anesthetized_systemic_correction
playDF$Slope_O2_dif_normalized_Anesthetized
