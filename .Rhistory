ggplot(nosiph_samples, aes(x = Species, y = log(abundance), fill = Broad.group)) + geom_bar(position = "fill",stat = "identity") + theme_bw() + theme(legend.key.size = unit(1,"line"), legend.text = element_text(size=5),legend.position="bottom", axis.text.x = element_text(angle = 90, hjust = 1)) + scale_fill_manual(values=c(colorRampPalette(brewer.pal(8, "Set2"))(16), colorRampPalette(brewer.pal(8, "Set1"))(16), colorRampPalette(brewer.pal(8, "Dark2"))(23))) + guides(shape = guide_legend(override.aes = list(size = 1)))
#############
#Without siph signal
nosiph_samples <- ref_samples[which(ref_samples$Interpretation == "Prey"),]
ggplot(nosiph_samples, aes(x = Species, y = log(abundance), fill = Broad.group)) + geom_bar(position = "fill",stat = "identity") + theme_bw() + theme(legend.key.size = unit(1,"line"), legend.text = element_text(size=5),legend.position="bottom", axis.text.x = element_text(angle = 90, hjust = 1)) + scale_fill_manual(values=c(colorRampPalette(brewer.pal(8, "Set2"))(16), colorRampPalette(brewer.pal(8, "Set1"))(16), colorRampPalette(brewer.pal(8, "Dark2"))(23))) + guides(shape = guide_legend(override.aes = list(size = 1)))
ggplot(prey_samples, aes(x = Species, y = log(abundance), fill = Broad.group)) + geom_bar(position = "fill",stat = "identity") + theme_bw() + theme(legend.key.size = unit(1,"line"), legend.text = element_text(size=5),legend.position="bottom", axis.text.x = element_text(angle = 90, hjust = 1)) + scale_fill_manual(values=c(colorRampPalette(brewer.pal(8, "Dark2"))(23))) + guides(shape = guide_legend(override.aes = list(size = 1)))
#############
#Without siph signal
prey_samples <- ref_samples[which(ref_samples$Interpretation == "Prey"),]
ggplot(prey_samples, aes(x = Species, y = log(abundance), fill = Broad.group)) + geom_bar(position = "fill",stat = "identity") + theme_bw() + theme(legend.key.size = unit(1,"line"), legend.text = element_text(size=5),legend.position="bottom", axis.text.x = element_text(angle = 90, hjust = 1)) + scale_fill_manual(values=c(colorRampPalette(brewer.pal(8, "Dark2"))(23))) + guides(shape = guide_legend(override.aes = list(size = 1)))
ggplot(prey_samples, aes(x = Species, y = log(abundance), fill = Broad.group)) + geom_bar(position = "fill",stat = "identity") + theme_bw() + theme(legend.key.size = unit(1,"line"), legend.text = element_text(size=5),legend.position="bottom", axis.text.x = element_text(angle = 90, hjust = 1)) + scale_fill_manual(values=c(colorRampPalette(brewer.pal(8, "Dark2"))(14))) + guides(shape = guide_legend(override.aes = list(size = 1)))
ggplot(prey_samples, aes(x = Species, y = log(abundance), fill = Broad.group)) + geom_bar(position = "fill",stat = "identity") + theme_bw() + theme(legend.key.size = unit(1,"line"), legend.text = element_text(size=5),legend.position="bottom", axis.text.x = element_text(angle = 90, hjust = 1)) + scale_fill_manual(values=c(colorRampPalette(brewer.pal(8, "Set2"))(14))) + guides(shape = guide_legend(override.aes = list(size = 1)))
ggplot(prey_samples, aes(x = Species, y = log(abundance), fill = Broad.group)) + geom_bar(position = "fill",stat = "identity") + theme_bw() + theme(legend.key.size = unit(1,"line"), legend.text = element_text(size=5),legend.position="bottom", axis.text.x = element_text(angle = 90, hjust = 1)) + scale_fill_manual(values=c(colorRampPalette(brewer.pal(8, "Set1"))(14))) + guides(shape = guide_legend(override.aes = list(size = 1)))
ggplot(prey_samples, aes(x = Species, y = log(abundance), fill = Broad.group)) + geom_bar(position = "fill",stat = "identity") + theme_bw() + theme(legend.key.size = unit(1,"line"), legend.text = element_text(size=5),legend.position="bottom", axis.text.x = element_text(angle = 90, hjust = 1)) + scale_fill_manual(values=c(colorRampPalette(brewer.pal(6, "Set1"))(14))) + guides(shape = guide_legend(override.aes = list(size = 1)))
ggplot(prey_samples, aes(x = Species, y = log(abundance), fill = Broad.group)) + geom_bar(position = "fill",stat = "identity") + theme_bw() + theme(legend.key.size = unit(1,"line"), legend.text = element_text(size=5),legend.position="bottom", axis.text.x = element_text(angle = 90, hjust = 1)) + scale_fill_manual(values=c(colorRampPalette(brewer.pal(6, "Set1"))(14))) + guides(shape = guide_legend(override.aes = list(size = 1))) +  facet_grid(.~barcode)
ggplot(prey_samples, aes(x = paste(Species, Specimen), y = log(abundance), fill = Broad.group)) + geom_bar(position = "fill",stat = "identity") + theme_bw() + theme(legend.key.size = unit(1,"line"), legend.text = element_text(size=5),legend.position="bottom", axis.text.x = element_text(angle = 90, hjust = 1)) + scale_fill_manual(values=c(colorRampPalette(brewer.pal(6, "Set1"))(14))) + guides(shape = guide_legend(override.aes = list(size = 1)))
ggplot(prey_samples, aes(x = paste(Species, Specimen), y = log(abundance), fill = Broad.group)) + geom_bar(position = "fill",stat = "identity") + theme_bw() + theme(legend.key.size = unit(1,"line"), legend.text = element_text(size=5),legend.position="bottom", axis.text.x = element_text(angle = 90, hjust = 1)) + scale_fill_manual(values=c(colorRampPalette(brewer.pal(6, "Set1"))(14))) + guides(shape = guide_legend(override.aes = list(size = 1)))  + facet_wrap(.~barcode, nrow=6, ncol=1)
pdf("SM_spp_broadgroup_prey.pdf", width = 20, height = 10)
ggplot(prey_samples, aes(x = Species, y = log(abundance), fill = Broad.group)) + geom_bar(position = "fill",stat = "identity") + theme_bw() + theme(legend.key.size = unit(1,"line"), legend.text = element_text(size=5),legend.position="bottom", axis.text.x = element_text(angle = 90, hjust = 1)) + scale_fill_manual(values=c(colorRampPalette(brewer.pal(6, "Set1"))(14))) + guides(shape = guide_legend(override.aes = list(size = 1)))
dev.off()
#species by broad group and barcode
pdf("SM_spp_broadgroup_barcode_prey.pdf", width = 20, height = 10)
ggplot(prey_samples, aes(x = Species, y = log(abundance), fill = Broad.group)) + geom_bar(position = "fill",stat = "identity") + theme_bw() + theme(legend.key.size = unit(1,"line"), legend.text = element_text(size=5),legend.position="bottom", axis.text.x = element_text(angle = 90, hjust = 1)) + scale_fill_manual(values=c(colorRampPalette(brewer.pal(6, "Set1"))(14))) + guides(shape = guide_legend(override.aes = list(size = 1))) +  facet_grid(.~barcode)
dev.off()
#specimens by broad group
pdf("SM_ind_broadgroup_prey.pdf", width = 20, height = 10)
ggplot(prey_samples, aes(x = paste(Species, Specimen), y = log(abundance), fill = Broad.group)) + geom_bar(position = "fill",stat = "identity") + theme_bw() + theme(legend.key.size = unit(1,"line"), legend.text = element_text(size=5),legend.position="bottom", axis.text.x = element_text(angle = 90, hjust = 1)) + scale_fill_manual(values=c(colorRampPalette(brewer.pal(6, "Set1"))(14))) + guides(shape = guide_legend(override.aes = list(size = 1)))
dev.off()
#specimens by broad group and barcode
pdf("SM_ind_broadgroup_barcode_prey.pdf", width = 20, height = 30)
ggplot(prey_samples, aes(x = paste(Species, Specimen), y = log(abundance), fill = Broad.group)) + geom_bar(position = "fill",stat = "identity") + theme_bw() + theme(legend.key.size = unit(1,"line"), legend.text = element_text(size=5),legend.position="bottom", axis.text.x = element_text(angle = 90, hjust = 1)) + scale_fill_manual(values=c(colorRampPalette(brewer.pal(6, "Set1"))(14))) + guides(shape = guide_legend(override.aes = list(size = 1)))  + facet_wrap(.~barcode, nrow=6, ncol=1)
dev.off()
pdf("SM_spp_broadgroup_barcode_prey.pdf", width = 20, height = 6)
ggplot(prey_samples, aes(x = Species, y = log(abundance), fill = Broad.group)) + geom_bar(position = "fill",stat = "identity") + theme_bw() + theme(legend.key.size = unit(1,"line"), legend.text = element_text(size=5),legend.position="bottom", axis.text.x = element_text(angle = 90, hjust = 1)) + scale_fill_manual(values=c(colorRampPalette(brewer.pal(6, "Set1"))(14))) + guides(shape = guide_legend(override.aes = list(size = 1))) +  facet_grid(.~barcode)
dev.off()
pdf("SM_ind_broadgroup_barcode_prey.pdf", width = 20, height = 6)
ggplot(prey_samples, aes(x = paste(Species, Specimen), y = log(abundance), fill = Broad.group)) + geom_bar(position = "fill",stat = "identity") + theme_bw() + theme(legend.key.size = unit(1,"line"), legend.text = element_text(size=5),legend.position="bottom", axis.text.x = element_text(angle = 90, hjust = 1)) + scale_fill_manual(values=c(colorRampPalette(brewer.pal(6, "Set1"))(14))) + guides(shape = guide_legend(override.aes = list(size = 1)))  + facet_wrap(.~barcode, nrow=6, ncol=1)
dev.off()
pdf("SM_ind_broadgroup_barcode_prey.pdf", width = 20, height = 10)
ggplot(prey_samples, aes(x = paste(Species, Specimen), y = log(abundance), fill = Broad.group)) + geom_bar(position = "fill",stat = "identity") + theme_bw() + theme(legend.key.size = unit(1,"line"), legend.text = element_text(size=5),legend.position="bottom", axis.text.x = element_text(angle = 90, hjust = 1)) + scale_fill_manual(values=c(colorRampPalette(brewer.pal(6, "Set1"))(14))) + guides(shape = guide_legend(override.aes = list(size = 1)))  + facet_wrap(.~barcode, nrow=6, ncol=1)
dev.off()
rel_trawls
as.data.frame(rel_trawls)$Actinopteri
as.data.frame(rel_trawls)$Actinopteri[is.na(as.data.frame(rel_trawls)$Actinopteri)]
as.data.frame(rel_trawls)$Actinopteri[is.na(as.data.frame(rel_trawls)$Actinopteri)] %>% length()
as.data.frame(rel_trawls)$Actinopteri[!is.na(as.data.frame(rel_trawls)$Actinopteri)] %>% length()
trawlbyspecimen
GC_Trawl_broad
cast_trawl
cast_trawl[1:5,] %>% plot
cast_trawl[2:5,] %>% plot
cast_trawl[2,] %>% histogram()
cast_trawl[2,] %>% hist()
cast_trawl[2,] %>% plot
cast_trawl[2,]
cast_trawl[2,] %>% sort()
cast_trawl[2,-1] %>% sort()
cast_trawl[3,-1] %>% sort()
cast_trawl[3,] %>% sort()
cast_trawl[3,-1] %>% sort()
cast_trawl[4,-1] %>% sort()
cast_trawl[5,-1] %>% sort()
cast_trawl$Sample
cast_trawl[17,-1] %>% sort()
cast_trawl[18,-1] %>% sort()
trawl_to_specimen$Corresponding.prey.field.sample
cast_trawl[18,-1] %>% sort()
cast_trawl[17,-1] %>% sort()
trawl_to_specimen$Corresponding.prey.field.sample %>% View()
trawl_to_specimen %>% View()
trawl_to_specimen %>% unique() %>% View()
cast_trawl[,1] %>% sort()
cast_trawl[15,-1] %>% sort()
cast_trawl[11,-1] %>% sort()
trawl_to_specimen %>% unique() .[,3] %>% unique()
trawl_to_specimen %>% unique() %>%  .[,3] %>% unique()
cast_trawl[,1] %>% sort()
cast_trawl[11,-1] %>% sort()
cast_trawl[13,-1] %>% sort()
cast_trawl[14,-1] %>% sort()
cast_trawl[15,-1] %>% sort()
cast_trawl[16,-1] %>% sort()
cast_trawl[11,-1]
cast_trawl[13,-1]
cast_trawl[5-10,-1]
cast_trawl[6-10,-1]
cast_trawl[6:10,-1]
cast_trawl[6:10,-1] %>% colSums()
cast_trawl[6:10,-1] %>% colSums()Msort()
cast_trawl[6:10,-1] %>% colSums() %>% sort()
trawl_to_specimen %>% unique() %>%  .[,3] %>% unique()
trawl_to_specimen %>% unique()
trawl_to_specimen %>% unique() %>%  .[,3] %>% unique()
trawl_to_specimen %>% unique() %>%  .[,3] %>% unique()Msort()
trawl_to_specimen %>% unique() %>%  .[,3] %>% unique() %>% sort()
ext <- read.csv("/Volumes/GoogleDrive/My Drive/Metabarcoding_things/siphweb_metabarcoding/extractions_GC_Nov2020.tsv", header=T, stringsAsFactors = F, sep="\t" )
trawl_to_specimen <- ext[,c(1,3,13)]
RUN0trawls = data.frame(Extraction..=allsamples$Extraction, Specimen.. = allsamples$Specimen, Corrresponding.prey.field.sample = rep(NA, nrow(allsamples)))[which(allsamples$run == "RUN0"),]
names(RUN0trawls) <- names(trawl_to_specimen)
trawl_to_specimen <- rbind(trawl_to_specimen, RUN0trawls)
dyads_by_specimen = list()
it=0
for(i in unique(allsamples$Specimen)){
dyad_i = list()
dyad_i[[1]] <- allsamples[which(allsamples$Specimen == i),]
tows <- trawl_to_specimen$Corresponding.prey.field.sample[which(trawl_to_specimen$Specimen.. == i)]
trawls_i <- trawls[which(trawls$Sample == tows),]
if(nrow(trawls_i)>0){dyad_i[[2]] <- trawls_i}
else dyad_i[[2]] <- NA
names(dyad_i)=c("Diet", "Preyfield")
it=it+1
dyads_by_specimen[[it]] <- dyad_i
names(dyads_by_specimen)[[it]] <- i
}
dyads_by_specimen$`BIOS19-D2-P1`$Preyfield[,c(2,3,4,7)]
dyads_by_specimen$`BIOS19-D2-P1`$Diet[,c(8:11,48)]
diets_broad <- allsamples[which(allsamples$Interpretation == "Prey"),c("Specimen","Species","Broad.group")] %>% unique()
cast_broadiets <- dcast(diets_broad, Specimen + Species ~ Broad.group)
cast_broadiets[is.na(cast_broadiets)] <- 0
cast_broadiets[,c(3:ncol(cast_broadiets))] <- sapply(cast_broadiets[,c(3:ncol(cast_broadiets))], as.numeric)
cast_broadiets[is.na(cast_broadiets)] <- 1
#Widen format of trawl data
cast_trawl <- dcast(broad.taxa, Sample ~ Broad.group)
cast_trawl[is.na(cast_trawl)] <- 0
#Match trawlcast to specimen
trawlbyspecimen <- cast_trawl[match(trawl_to_specimen$Corresponding.prey.field.sample[match(cast_broadiets$Specimen, trawl_to_specimen$Specimen..)], cast_trawl$Sample),]
names(trawlbyspecimen)[1]<-"Trawl"
trawlbyspecimen <- data.frame(trawlbyspecimen, Phyllocarid = trawlbyspecimen$Stomatopod*0) #add phyllocarid zeroes
#Bind GC and trawls
GC_Trawl_broad <- cbind(cast_broadiets, trawlbyspecimen)
rownames(GC_Trawl_broad)<-GC_Trawl_broad$Specimen
GC_Trawl_broad$Species[which(GC_Trawl_broad$Species=="Apolemia undescribed sp")] <- "Apolemia sp"
GC_Trawl_broad$Species[which(GC_Trawl_broad$Species=="Nanomia (deep)")] <- "Nanomia sp. deep"
GC_Trawl_broad[,c("Cephalopod", "Cumacean")]
meltedGC = melt(GC_Trawl_broad[,1:16])
names(meltedGC)[3:4] <- c("Gut Content Prey", "Presence")
meltedGC$Species <- factor(meltedGC$Species, levels=SPorder)
IDorder <- unique(arrange(meltedGC, Species)$Specimen)
meltedGC$Specimen <- factor(meltedGC$Specimen, levels=IDorder)
PreyOrder <- c("Copepod", "Decapod", "Euphausid", "Mysid", "Lophogastrid","Stomatopod", "Amphipod", "Ostracod", "Bivalve", "Gastropod", "Larvacean", "Salp", "Scyphomedusa", "Ctenophore", "Actinopteri")
meltedGC$`Gut Content Prey` <- factor(meltedGC$`Gut Content Prey`, levels=PreyOrder)
GC <- ggplot(meltedGC, aes(x = `Gut Content Prey`, y = Specimen, fill = Presence)) + geom_tile(color="grey") +scale_fill_gradient(low = "white", high = "black") + theme_bw() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), legend.position = "none") + ylab("Specimen")
GC
ggplot(meltedGC, aes(x = `Gut Content Prey`, y = Specimen, fill = Presence)) + geom_tile(color="grey") +scale_fill_gradient(low = "white", high = "black") + theme_bw() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), legend.position = "none") + ylab("Specimen")
meltedGC
meltedGC %>% head()
ggplot(meltedGC, aes(x = `Gut Content Prey`, y = Specimen, fill = Presence)) + geom_tile(color="grey")
ggplot(meltedGC, aes(x = `Gut Content Prey`, y = Specimen, fill = Presence)) + geom_tile(color="grey") +scale_fill_gradient(low = "white", high = "black") + theme_bw() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), legend.position = "none") + ylab("Specimen")
dev.off()
ggplot(meltedGC, aes(x = `Gut Content Prey`, y = Specimen, fill = Presence)) + geom_tile(color="grey") +scale_fill_gradient(low = "white", high = "black") + theme_bw() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), legend.position = "none") + ylab("Specimen")
GC <- ggplot(meltedGC, aes(x = `Gut Content Prey`, y = Specimen, fill = Presence)) + geom_tile(color="grey") +scale_fill_gradient(low = "white", high = "black") + theme_bw() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), legend.position = "none") + ylab("Specimen")
## by species
GCspecies <- aggregate(x = GC_Trawl_broad[,3:16], by = list(GC_Trawl_broad$Species), FUN = "sum")
names(GCspecies)[1] <- "Species"
GCspecies_melt = melt(GCspecies)
names(GCspecies_melt)[2:3] <- c("Gut Content Prey","N")
GCspecies_melt$Species <- factor(GCspecies_melt$Species, levels=SPorder)
GCspecies_melt$`Gut Content Prey` <- factor(GCspecies_melt$`Gut Content Prey`, levels=PreyOrder)
GC_spp <- ggplot(GCspecies_melt, aes(x = `Gut Content Prey`, y = Species, fill = log(N+1))) + geom_tile(color="grey") + scale_fill_gradient(low = "white", high = "black") + geom_text(aes(label=N), col="red") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + ylab("Species")
meltedTrawls = melt(GC_Trawl_broad[,c(1,2,17:ncol(GC_Trawl_broad))])
names(meltedTrawls)[4:5] <- c("Prey", "Abundance")
meltedTrawls <- ddply(meltedTrawls, .(Specimen), transform, Relative.Abundance = scale(log(Abundance+1)))
meltedTrawls <- meltedTrawls[which(!(meltedTrawls$Prey %in% c("Animal", "Egg"))),]
names(meltedTrawls)[4]<-"Ambient Prey"
PreyOrderTr <- c("Copepod", "Decapod", "Euphausid", "Mysid", "Lophogastrid", "Stomatopod",  "Ostracod", "Bivalve","Larvacean", "Salp",  "Scyphomedusa", "Ctenophore", "Actinopteri", "Cladoceran", "Amphipod", "Isopod", "Barnacle", "Cumacean", "Phyllocarid", "Brachiopod", "Echinoderm","Polychaete", "Chaetognath", "Gastropod", "Cephalopod", "Doliolid", "Pyrosome", "Hydromedusa", "Siphonophore", "Anthozoa")
meltedTrawls$`Ambient Prey` <- factor(meltedTrawls$`Ambient Prey`, levels=PreyOrderTr)
meltedTrawls$Species <- factor(meltedTrawls$Species, levels=SPorder)
IDorder <- unique(arrange(meltedTrawls, Species)$Specimen)
meltedTrawls$Specimen <- factor(meltedTrawls$Specimen, levels=IDorder)
TR <- ggplot(meltedTrawls, aes(x = `Ambient Prey`, y = Specimen, fill = Relative.Abundance)) + geom_tile() + scale_fill_gradient(low = "white", high = "dark blue", na.value = "grey") + theme_bw() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), axis.title.y=element_blank(),axis.text.y=element_blank(),legend.position = "none", axis.ticks = element_blank())
ggplot(meltedTrawls, aes(x = `Ambient Prey`, y = Specimen, fill = Relative.Abundance)) + geom_tile() + scale_fill_gradient(low = "white", high = "dark blue", na.value = "grey") + theme_bw() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), axis.title.y=element_blank(),axis.text.y=element_blank(),legend.position = "none", axis.ticks = element_blank())
ggplot(meltedTrawls, aes(x = `Ambient Prey`, y = Specimen, fill = Relative.Abundance)) + geom_tile() + scale_fill_gradient(low = "white", high = "dark blue", na.value = "grey") + theme_bw() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
LI
rownames(trawlbyspecimen) = cast_broadiets$Specimen
rownames(cast_broadiets) = cast_broadiets$Specimen
rel_trawls <- t(apply(trawlbyspecimen[,c(-1,-4,-18)],1,function(x){x <- x/sum(x, na.rm = T); return(x)}))  #-4 -18 to get rid of "Animal" and "Egg" concepts
colnames(rel_trawls)[which(!(colnames(rel_trawls) %in% colnames(cast_broadiets)))] #CHECK EVERY TIME!
expanded_broadiets <- data.frame(cast_broadiets, Amphipod = rep(0, nrow(cast_broadiets)),Anthozoa = rep(0, nrow(cast_broadiets)),Barnacle = rep(0, nrow(cast_broadiets)),Brachiopod = rep(0, nrow(cast_broadiets)),Cephalopod = rep(0, nrow(cast_broadiets)),Chaetognath = rep(0, nrow(cast_broadiets)),Cladoceran = rep(0, nrow(cast_broadiets)),Cumacean = rep(0, nrow(cast_broadiets)),Doliolid = rep(0, nrow(cast_broadiets)),Echinoderm = rep(0, nrow(cast_broadiets)), Gastropod = rep(0, nrow(cast_broadiets)), Pyrosome = rep(0, nrow(cast_broadiets)),Siphonophore = rep(0, nrow(cast_broadiets)), Hydromedusa = rep(0, nrow(cast_broadiets)), Isopod = rep(0, nrow(cast_broadiets)), Polychaete = rep(0, nrow(cast_broadiets)), Phyllocarid = rep(0, nrow(cast_broadiets)))
expanded_broadiets <- expanded_broadiets[,match(colnames(rel_trawls), colnames(expanded_broadiets))]
rel_GC <- t(apply(expanded_broadiets,1,function(x){x <- x/sum(x); return(x)}))
selectivity <- as.data.frame(matrix(nrow=nrow(rel_trawls), ncol=ncol(rel_trawls)))
names(selectivity) <- colnames(rel_trawls); rownames(selectivity) <- rownames(rel_GC)
selectivity <- LI(rel_GC, rel_trawls,selectivity)
cast_broadiets$Species[which(cast_broadiets$Species=="Apolemia undescribed sp")] <- "Apolemia sp"
cast_broadiets$Species[which(cast_broadiets$Species=="Nanomia (deep)")] <- "Nanomia sp. deep"
selectivity <- data.frame(selectivity, Species = cast_broadiets$Species, Specimen = cast_broadiets$Specimen)
selectivity_melt <- melt(selectivity, id.vars = c("Specimen", "Species"))
names(selectivity_melt) <- c("Specimen","Species", "Prey", "L.I.")
selectivity_melt$Species <- as.character(selectivity_melt$Species)
selectivity_melt$Species <- factor(selectivity_melt$Species, levels=SPorder[which(SPorder %in% selectivity_melt$Species)])
IDorder <- unique(arrange(selectivity_melt, Species)$Specimen)
selectivity_melt$Specimen <- factor(selectivity_melt$Specimen, levels=IDorder)
selectivity_melt$Prey <- factor(selectivity_melt$Prey, levels=PreyOrderTr)
names(selectivity_melt)[3]<-"Selectivity"
selectivity_melt[,4] <- as.numeric(selectivity_melt[,4])
SEL <- ggplot(selectivity_melt, aes(x = Selectivity, y = Specimen, fill = `L.I.`)) + geom_tile() + scale_fill_gradient2(low = "red", high = "blue", mid = "white", na.value = "grey") + theme_bw() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), axis.title.y=element_blank(), axis.text.y = element_blank(), axis.ticks = element_blank())
SEL
selectivity_spp <- aggregate(selectivity_melt$L.I.~selectivity_melt$Selectivity+selectivity_melt$Species, FUN=function(x){mean(x,na.rm = T)})
names(selectivity_spp) <- c("Prey","Species","L.I.")
GCspecies_melt$Species[which(!(GCspecies_melt$Species %in% selectivity_spp$Species))] %>% unique() -> missing_spp
expand.grid(unique(selectivity_spp$Prey),missing_spp)->missing_entries
missing_entries <- cbind(missing_entries, rep(NA, nrow(missing_entries)))
names(missing_entries) <- names(selectivity_spp)
selectivity_spp <- rbind(selectivity_spp, missing_entries)
SEL_spp <- ggplot(selectivity_spp, aes(x = Prey, y = Species, fill = `L.I.`)) + geom_tile() + scale_fill_gradient2(low = "red", high = "blue", mid = "white", na.value = "grey") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), axis.title.y=element_blank())
SEL_spp
getwd()
pdf("GC-Trawls-SEL.pdf", height = 10, width = 12)
wrap_plots(GC,TR,SEL, widths = c(1,1.7,1.7))
dev.off()
pdf("GC-SEL_spp.pdf", height = 10, width = 12)
wrap_plots(GC_spp,SEL_spp, widths = c(1,1.7))
dev.off()
cast_trawl[13,-1]
cast_trawl[,1]
trawl_to_specimen %>% unique() %>%  .[,3] %>% unique()
library(tidyverse)
library(reshape2)
library(scales)
library(RColorBrewer)
library(forcats)
library(vegan)
library(adegenet)
library(magrittr)
library(plyr)
library(paleotree)
library(phytools)
library(patchwork)
library(ggtree)
library(ggplotify)
library(scatterpie)
barcodes=c("134", "152","166", "179", "261", "272")
runids = c("RUN0","RUN1","RUN2","RUN3", "RUN4","RUN5")
### Analyze Metaxa & Trawl Data
#Read metabarcoding data
setwd("/Volumes/GoogleDrive/My Drive/Metabarcoding_things/")
allsamples <- read.csv("/Volumes/GoogleDrive/My Drive/Metabarcoding_things/siphweb_metabarcoding/AllSamplesParsed.tsv", sep="\t", header = T, stringsAsFactors = F)
allsamples <- allsamples[,-66]
#Parse sequences/feature_names
allseqs <- read.csv("/Volumes/GoogleDrive/My Drive/Metabarcoding_things/siphweb_metabarcoding/seqs-feats.csv", sep="\t", header = F, stringsAsFactors = F)
names(allseqs) <- c("Feature_name","Sequence")
allseqs <- allseqs[which(allseqs$Feature_name %in% unique(allsamples$Feature_name)),]
seqs_samples <- full_join(allsamples,allseqs, by="Feature_name")
#write.table(seqs_samples, "SequencesParsed.tsv", sep="\t", col.names = T, row.names = F)
#Read trawl data
trawls = read.csv("/Volumes/GoogleDrive/My\ Drive/Metabarcoding_things/siphweb_metabarcoding/trawls_data_Nov2020.tsv", header=T, sep="\t", stringsAsFactors = F)
trawls$Broad.group[which(trawls$Broad.group == "Krill")] <- "Euphausid"
trawls$Broad.group[which(trawls$Broad.group == "Gymnosome pteropod")] <- "Gastropod"
trawls$Broad.group[which(trawls$Broad.group == "Appendicularia")] <- "Larvacean"
trawls$Broad.group[which(trawls$Broad.group == "Appendicularian")] <- "Larvacean"
trawls$Broad.group[which(trawls$Broad.group == "Benthic snail")] <- "Gastropod"
trawls$Broad.group[which(trawls$Broad.group == "Copepod ")] <- "Copepod"
samples <- split(trawls, trawls$Sample)
#samples.bygroup <- lapply(samples, function(x){aggregate(x$Representative.count, by = list(x$Broad.group), FUN = sum)})
samples.bygroup <- lapply(samples, function(x){aggregate(x$Count, by = list(x$Broad.group), FUN = sum)})
for(i in 1:length(samples.bygroup)){
samples.bygroup[[i]] <- cbind(rep(names(samples.bygroup)[i], nrow(samples.bygroup[[i]])), samples.bygroup[[i]])
}
broad.taxa <- bind_rows(samples.bygroup)
names(broad.taxa) <- c("Sample", "Broad.group", "Representative.count")
broad.taxa$Representative.count[is.na(broad.taxa$Representative.count)]<-1
#Encode extraction-to-trawl match
ext <- read.csv("/Volumes/GoogleDrive/My Drive/Metabarcoding_things/siphweb_metabarcoding/extractions_GC_Nov2020.tsv", header=T, stringsAsFactors = F, sep="\t" )
trawl_to_specimen <- ext[,c(1,3,13)]
RUN0trawls = data.frame(Extraction..=allsamples$Extraction, Specimen.. = allsamples$Specimen, Corrresponding.prey.field.sample = rep(NA, nrow(allsamples)))[which(allsamples$run == "RUN0"),]
names(RUN0trawls) <- names(trawl_to_specimen)
trawl_to_specimen <- rbind(trawl_to_specimen, RUN0trawls)
dyads_by_specimen = list()
it=0
for(i in unique(allsamples$Specimen)){
dyad_i = list()
dyad_i[[1]] <- allsamples[which(allsamples$Specimen == i),]
tows <- trawl_to_specimen$Corresponding.prey.field.sample[which(trawl_to_specimen$Specimen.. == i)]
trawls_i <- trawls[which(trawls$Sample == tows),]
if(nrow(trawls_i)>0){dyad_i[[2]] <- trawls_i}
else dyad_i[[2]] <- NA
names(dyad_i)=c("Diet", "Preyfield")
it=it+1
dyads_by_specimen[[it]] <- dyad_i
names(dyads_by_specimen)[[it]] <- i
}
dyads_by_specimen$`BIOS19-D2-P1`$Preyfield[,c(2,3,4,7)]
dyads_by_specimen$`BIOS19-D2-P1`$Diet[,c(8:11,48)]
## FINAL FIGURE ###
#row by specimen - #broad GC group set of columns - #broad prey groups in trawl set of columns
#Widen format of GC data
diets_broad <- allsamples[which(allsamples$Interpretation == "Prey"),c("Specimen","Species","Broad.group")] %>% unique()
cast_broadiets <- dcast(diets_broad, Specimen + Species ~ Broad.group)
cast_broadiets[is.na(cast_broadiets)] <- 0
cast_broadiets[,c(3:ncol(cast_broadiets))] <- sapply(cast_broadiets[,c(3:ncol(cast_broadiets))], as.numeric)
cast_broadiets[is.na(cast_broadiets)] <- 1
#Widen format of trawl data
cast_trawl <- dcast(broad.taxa, Sample ~ Broad.group)
cast_trawl[is.na(cast_trawl)] <- 0
#Match trawlcast to specimen
trawlbyspecimen <- cast_trawl[match(trawl_to_specimen$Corresponding.prey.field.sample[match(cast_broadiets$Specimen, trawl_to_specimen$Specimen..)], cast_trawl$Sample),]
names(trawlbyspecimen)[1]<-"Trawl"
trawlbyspecimen <- data.frame(trawlbyspecimen, Phyllocarid = trawlbyspecimen$Stomatopod*0) #add phyllocarid zeroes
#Bind GC and trawls
GC_Trawl_broad <- cbind(cast_broadiets, trawlbyspecimen)
rownames(GC_Trawl_broad)<-GC_Trawl_broad$Specimen
GC_Trawl_broad$Species[which(GC_Trawl_broad$Species=="Apolemia undescribed sp")] <- "Apolemia sp"
GC_Trawl_broad$Species[which(GC_Trawl_broad$Species=="Nanomia (deep)")] <- "Nanomia sp. deep"
GC_Trawl_broad[,c("Cephalopod", "Cumacean")]
#Phylogeny of the species sampled
tree = read.newick(text="(Physalia physalis,((Apolemia sp,Apolemia rubriversa,Apolemia lanosa),((Bargmannia amoena,Bargmannia elongata,Bargmannia lata),(((Undescribed physonect L),(Resomia dunni,(Forskalia sp.,(Lychnagalma utricularia,(Halistemma rubrum,(Nanomia sp. Atlantic,Nanomia sp. shallow,Nanomia sp. deep)))))),(Vogtia serrata,(Desmophyes annectens,(Chuniphyes multidentata,((Sphaeronectes koellikeri,Sphaeronectes christiansonae),((Muggiaea atlantica,(Lensia conoidea,Sulculeolaria chuni)),Diphyes dispar)))))))))));")
### Analyze Metaxa & Trawl Data
#Read metabarcoding data
setwd("/Volumes/GoogleDrive/My Drive/Metabarcoding_things/")
getwd()
### Analyze Metaxa & Trawl Data
#Read metabarcoding data
setwd("smb://localhost/alejandro.damianserrano@yale.edu - Google Drive/My Drive/Metabarcoding_things/")
### Analyze Metaxa & Trawl Data
#Read metabarcoding data
setwd("/smb://localhost/alejandro.damianserrano@yale.edu - Google Drive/My Drive/Metabarcoding_things/")
install.packages("googledrive")
install.packages("googledrive")
library(googledrive)
library(tidyverse)
library(reshape2)
library(scales)
library(RColorBrewer)
library(forcats)
library(vegan)
library(adegenet)
library(magrittr)
library(plyr)
library(paleotree)
library(phytools)
library(patchwork)
library(ggtree)
library(ggplotify)
library(scatterpie)
drive_get(path="/My Drive/Metabarcoding_things")
drive_get(path="My Drive/Metabarcoding_things")
drive_get(path="My Drive/Metabarcoding_things")
drive_get(path="My Drive/Metabarcoding_things")
drive_deauth()
drive_get(path="My Drive/Metabarcoding_things")
library(tidyverse)
library(ape)
library(phytools)
library(reshape2)
library(data.table)
library(geiger)
library(corHMM)
#library(diversitree)
setwd("~/Documents/salp_ecomorphology/")
#LOAD consensus tree
tree_salp <- read.nexus("phylogeny/RevBayes/TIMETREE_Chordata_output/TimeTree_chordata_mcmc_MAP.tre")
tree_salp$tip.label <- str_remove_all(tree_salp$tip.label, ".+\\..+?_")
tree_salp$tip.label <- str_replace_all(tree_salp$tip.label, "_", " ")
tree_salp$tip.label[which(tree_salp$tip.label == "Cyclosalpa floridana")] <- "Cyclosalpa floridiana"
tree_salp <- drop.tip(tree_salp, c(32:52)) #drop outgroups
tree_salp <- drop.tip(tree_salp, c(1,2,6,9,14,16,18,19,20,22,23,27)) #drop duplicate species
#Load phylogenetic uncertainty
Strees <- read.tree("phylogeny/RevBayes/TIMETREE_Chordata_output/TimeTree_chordata_multitree.trees")
Strees <- lapply(Strees, drop.tip, c("HQ015387.1_Pegea_confoederata","HQ015391.1_Cyclosalpa_affinis","HQ015394.1_Cyclosalpa_polae","HQ015395.1_Cyclosalpa_sewelli","HQ015399.1_Iasis_cylindrica","HQ015402.1_Iasis_cylindrica","HQ015401.1_Iasis_cylindrica","HQ015413.1_Thalia_democratica","HQ015414.1_Thalia_democratica","HQ015410.1_Ritteriella_retracta","HQ015404.1_Brooksia_rostrata","HQ015408.1_Salpa_maxima"))
Strees <- lapply(Strees, function(t){t$tip.label %>%
str_remove_all(".+\\..+?_") %>%
str_replace_all("_", " ") -> t$tip.label; return(t)})
Strees <- lapply(Strees, drop.tip, c("Pyrosomella verticillata", "Pyrosoma atlanticum", "Pyrosoma godeauxi","Pyrostremma spinosum", "Clavelina meridionalis", "Pycnoclavella aff. detorta", "Ascidia ceratodes", "Perophora sagamiensis","Megalodicopia hians", "Chelyosoma siboja", "Ciona intestinalis", "Molgula manhattensis", "Oikopleura dioica","Halocynthia igaboja", "Echinorhinus cookei", "Myxine glutinosa", "Branchiostoma floridae", "Doliolum denticulatum"))
Strees <- lapply(Strees, function(t){t$tip.label[which(t$tip.label == "Cyclosalpa floridana")] <- "Cyclosalpa floridiana"; return(t)})
#Load literature data
traits <- read.csv("salplit.tsv", sep="\t", stringsAsFactors = F)
traits$Species[which(traits$Species == "Iasis (Weelia) cylindrica")] <- "Iasis cylindrica"
traits$Species[which(traits$Species == "Soestia (Iasis) zonaria")] <- "Soestia zonaria"
tree_salp_pruned <- drop.tip(tree_salp, which(!(tree_salp$tip.label %in% unique(traits$Species))))
pruned_traits <- traits[which(traits$Species %in% tree_salp$tip.label),]
unique_traits <- unique(pruned_traits)
#### [1] #### Whole colony architecture #####
morph <- setNames(unique_traits[which(unique_traits$Variable=="Chain architecture"),4], unique_traits[which(unique_traits$Variable=="Chain architecture"),1])
morph <- c(morph,setNames("Linear", "Soestia zonaria"),setNames("Oblique", "Thalia orientalis"),setNames("Transversal", "Pegea confoederata"),setNames("Whorl","Cyclosalpa quadriluminis"))
tree_salp_morph <- drop.tip(tree_salp, which(!(tree_salp$tip.label %in% names(morph))))
STree_morph <- lapply(Strees, function(t){drop.tip(t,which(!(t$tip.label %in% names(morph))))})
morph <- morph[which(names(morph) %in% tree_salp_morph$tip.label)]
morph[match(tree_salp_morph$tip.label,names(morph))] -> morph
binTransits <- transits
binTransits$TO <- as.numeric(as.factor(binTransits$TO))-1
binTransits$OL <- as.numeric(as.factor(binTransits$OL))
binTransits$OL[which(binTransits$OL == 2)] <- 0
binTransits$TW <- as.numeric(as.factor(binTransits$TW))-1
binTransits$WC <- as.numeric(as.factor(binTransits$WC))
binTransits$WC[which(binTransits$WC == 2)] <- 0
#### [3] #### BINARY Developmental transitions from Transversal budding ####
transits <- read.csv("Transitions_Salps.tsv", sep='\t', header = T, stringsAsFactors = F)[-4]
binTransits <- transits
binTransits$TO <- as.numeric(as.factor(binTransits$TO))-1
binTransits$OL <- as.numeric(as.factor(binTransits$OL))
binTransits$OL[which(binTransits$OL == 2)] <- 0
binTransits$TW <- as.numeric(as.factor(binTransits$TW))-1
binTransits$WC <- as.numeric(as.factor(binTransits$WC))
binTransits$WC[which(binTransits$WC == 2)] <- 0
for(ch in 2:ncol(binTransits)){
print(names(binTransits)[ch])
lapply(STree_morph, function(t){phylosig(t, setNames(binTransits[,ch], binTransits$Species))}) %>% unlist() %>% summary() %>% print()
lapply(STree_morph, function(t){fastAnc(t, setNames(binTransits[,ch], binTransits$Species))["20"]}) %>% unlist() %>% summary() %>% print()
}
fastAnc(tree_salp_morph, setNames(binTransits[,2], binTransits$Species))["20"]
fastAnc(tree_salp_morph, setNames(binTransits[,3], binTransits$Species))["20"]
#### [7] #### Continuous characters from the literature #####
cast_num <- dcast(pruned_traits[which(pruned_traits$Class=="number"),], Species~Variable, value.var="Value", fun.aggregate = function(x){mean(as.numeric(x), na.rm = T)})
expected_angles <- read.csv("expected_angles.tsv",sep="\t",header = T, row.names = 1, stringsAsFactors = F)[,-c(7,8)] #remove variables with all zeroes
setNames(expected_angles$DVN_Stolon.Zooid, row.names(expected_angles))
lapply(Strees, function(t){
treeI = drop.tip(t,which(!(t$tip.label %in% row.names(expected_angles))))
PS <- phylosig(treeI, setNames(expected_angles$DVN_Stolon.Zooid, row.names(expected_angles)))
return(PS)
}) %>% unlist() %>% summary()
phylosig(drop.tip(tree_salp,which(!(tree_salp$tip.label %in% row.names(expected_angles)))), setNames(expected_angles$DVN_Stolon.Zooid, row.names(expected_angles)))
#MRCA
fastAnc(drop.tip(tree_salp,which(!(tree_salp$tip.label %in% row.names(expected_angles)))), setNames(expected_angles$DVN_Stolon.Zooid, row.names(expected_angles)))[20]
drop.tip(tree_salp,which(!(tree_salp$tip.label %in% row.names(expected_angles))))
setNames(expected_angles$DVN_Stolon.Zooid, row.names(expected_angles))
fastAnc(drop.tip(tree_salp,which(!(tree_salp$tip.label %in% row.names(expected_angles)))), setNames(expected_angles$DVN_Stolon.Zooid, row.names(expected_angles)))
#MRCA
fastAnc(drop.tip(tree_salp,which(!(tree_salp$tip.label %in% row.names(expected_angles)))), setNames(expected_angles$DVN_Stolon.Zooid, row.names(expected_angles)))["20"]
lapply(Strees, function(t){
treeI = drop.tip(t,which(!(t$tip.label %in% row.names(expected_angles))))
MRCA <- fastAnc(treeI, setNames(expected_angles$DVN_Stolon.Zooid, row.names(expected_angles)))["20"]
return(MRCA)
}) %>% unlist() %>% summary()
ape::unique.multiPhylo(STree_morph)
ape::unique.multiPhylo(STree_morph) %>% length()
ape::unique.multiPhylo(STree_morph) %>% lapply(plot)
ape::unique.multiPhylo(STree_morph) %>% lapply(ladderize) %>% lapply(plot)
ape::unique.multiPhylo(STrees)->Strees_Unique
ape::unique.multiPhylo(Strees)->Strees_Unique
ape::unique.multiPhylo(Strees %>% lapply(ladderize))->Strees_Unique
length(Strees_Unique)
ape::unique.multiPhylo(Strees %>% lapply(ladderize), use.tip.label = F)->Strees_Unique
length(Strees_Unique)
ape::unique.multiPhylo(Strees %>% lapply(ladderize), use.tip.label = F)->Strees_Unique
lapply(Strees_Unique,plot)
#Load phylogenetic uncertainty
Strees <- read.nexus("phylogeny/ML/GovUNIONCho-AB921975Mman_aligned.fa-gb.splits.nex")
#Load phylogenetic uncertainty
Strees <- read.tree("phylogeny/RevBayes/TOPOLOGY_Chordata_output/Salps18S_chordata_multitree.trees")
Strees <- lapply(Strees, drop.tip, c("HQ015387.1_Pegea_confoederata","HQ015391.1_Cyclosalpa_affinis","HQ015394.1_Cyclosalpa_polae","HQ015395.1_Cyclosalpa_sewelli","HQ015399.1_Iasis_cylindrica","HQ015402.1_Iasis_cylindrica","HQ015401.1_Iasis_cylindrica","HQ015413.1_Thalia_democratica","HQ015414.1_Thalia_democratica","HQ015410.1_Ritteriella_retracta","HQ015404.1_Brooksia_rostrata","HQ015408.1_Salpa_maxima"))
Strees <- lapply(Strees, function(t){t$tip.label %>%
str_remove_all(".+\\..+?_") %>%
str_replace_all("_", " ") -> t$tip.label; return(t)})
Strees <- lapply(Strees, drop.tip, c("Pyrosomella verticillata", "Pyrosoma atlanticum", "Pyrosoma godeauxi","Pyrostremma spinosum", "Clavelina meridionalis", "Pycnoclavella aff. detorta", "Ascidia ceratodes", "Perophora sagamiensis","Megalodicopia hians", "Chelyosoma siboja", "Ciona intestinalis", "Molgula manhattensis", "Oikopleura dioica","Halocynthia igaboja", "Echinorhinus cookei", "Myxine glutinosa", "Branchiostoma floridae", "Doliolum denticulatum"))
Strees <- lapply(Strees, function(t){t$tip.label[which(t$tip.label == "Cyclosalpa floridana")] <- "Cyclosalpa floridiana"; return(t)})
ape::unique.multiPhylo(Strees %>% lapply(ladderize), use.tip.label = F)->Strees_Unique
lapply(Strees_Unique,plot)
Strees[[3]]==Strees[[7]]
all.equal.phylo(Strees[[1]],Strees[[2]])
all.equal.phylo(Strees[[1]],Strees[[22]])
all.equal.phylo(Strees[[1]],Strees[[1]])
Strees <- lapply(ladderize(Strees))
Strees <- lapply(Strees, ladderize)
lapply(Strees_Unique, function(t){length(lapply(Strees, function(Tr){all.equal.phylo(t,Tr)}))})
lapply(Strees_Unique, function(t){length(lapply(Strees, function(Tr){all.equal.phylo(t,Tr)}) %>% unlist() %>% .[which(.==TRUE)])})
lapply(Strees_Unique, function(t){length(lapply(Strees, function(Tr){all.equal.phylo(t,Tr,use.edge.length = F, use.tip.label = F)}) %>% unlist() %>% .[which(.==TRUE)])})
lapply(Strees_Unique, function(t){length(lapply(Strees, function(Tr){all.equal.phylo(t,Tr,use.edge.length = F, use.tip.label = F)}) %>% unlist() %>% .[which(.==TRUE)])}) %>% unlist() %>% 100*./sum(.)
lapply(Strees_Unique, function(t){length(lapply(Strees, function(Tr){all.equal.phylo(t,Tr,use.edge.length = F, use.tip.label = F)}) %>% unlist() %>% .[which(.==TRUE)])}) %>% unlist()
lapply(Strees_Unique, function(t){length(lapply(Strees, function(Tr){all.equal.phylo(t,Tr,use.edge.length = F, use.tip.label = F)}) %>% unlist() %>% .[which(.==TRUE)])}) %>% unlist() -> BSratios
(BSratios*100)/sum(BSratios)
(BSratios*100)/sum(BSratios) %>% round(3)
(BSratios*100)/sum(BSratios) %>% round(3)
(BSratios*100)/sum(BSratios) %>% round()
BS_ratios <- (BSratios*100)/sum(BSratios)
BS_ratios
round(BS_ratios,2)
par(mfrow=c(4,5))
lapply(Strees_Unique,plot)
lapply(Strees_Unique,plotTree)
lapply(Strees_Unique,function(t){plot,phylo(t, use.edge.length = F)})
lapply(Strees_Unique,function(t){plot.phylo(t, use.edge.length = F)})
lapply(Strees_Unique,function(t){plot.phylo(t, use.edge.length = F, cex=0.5)})
lapply(Strees_Unique,function(t){plot.phylo(t, use.edge.length = F, cex=0.5)})
par(mfrow=c(5,4))
lapply(Strees_Unique,function(t){plot.phylo(t, use.edge.length = F, cex=0.5)})
lapply(Strees_Unique,function(t){plot.phylo(t, use.edge.length = F, cex=0.3)})
par(mfrow=c(4,5))
lapply(Strees_Unique,function(t){plot.phylo(t, use.edge.length = F, cex=0.3)})
lapply(Strees_Unique,function(t){plot.phylo(t, use.edge.length = F, cex=0.6)})
lapply(Strees_Unique,function(t){plot.phylo(t, use.edge.length = T, cex=0.6)})
par(mfrow=c(4,5))
lapply(Strees_Unique,function(t){plot.phylo(t, use.edge.length = T, cex=0.6)})
par(mfrow=c(4,5),mar=c(0,0,0,0), oma=c(0,0,0,0))
lapply(Strees_Unique,function(t){plot.phylo(t, use.edge.length = T, cex=0.6)})
Strees <- lapply(Strees, chronos)
ape::unique.multiPhylo(Strees, use.tip.label = F)->Strees_Unique
lapply(Strees_Unique, function(t){length(lapply(Strees, function(Tr){all.equal.phylo(t,Tr,use.edge.length = F, use.tip.label = F)}) %>% unlist() %>% .[which(.==TRUE)])}) %>% unlist() -> BSratios
BS_ratios <- (BSratios*100)/sum(BSratios)
round(BS_ratios,2)
par(mfrow=c(4,5),mar=c(0,0,0,0), oma=c(0,0,0,0))
lapply(Strees_Unique,function(t){plot.phylo(t, use.edge.length = T, cex=0.6)})
par(mfrow=c(4,5),mar=c(0,0,0,0), oma=c(0,0,0,0))
lapply(Strees_Unique,function(t){plot.phylo(t, use.edge.length = F, cex=0.6)})
par(mfrow=c(4,5),mar=c(0,0,0,0), oma=c(0,0,0,0))
lapply(Strees_Unique,function(t){plot.phylo(t, use.edge.length = F, cex=0.2)})
round(BS_ratios,2)
STree_morph <- lapply(Strees, function(t){drop.tip(t,which(!(t$tip.label %in% names(morph))))})
for(ch in 2:ncol(binTransits)){
print(names(binTransits)[ch])
lapply(STree_morph, function(t){phylosig(t, setNames(binTransits[,ch], binTransits$Species))}) %>% unlist() %>% summary() %>% print()
lapply(STree_morph, function(t){fastAnc(t, setNames(binTransits[,ch], binTransits$Species))["20"]}) %>% unlist() %>% summary() %>% print()
}
lapply(Strees, function(t){
treeI = drop.tip(t,which(!(t$tip.label %in% row.names(expected_angles))))
MRCA <- fastAnc(treeI, setNames(expected_angles$DVN_Stolon.Zooid, row.names(expected_angles)))["20"]
return(MRCA)
}) %>% unlist() %>% summary()
lapply(Strees, function(t){
treeI = drop.tip(t,which(!(t$tip.label %in% row.names(expected_angles))))
PS <- phylosig(treeI, setNames(expected_angles$DVN_Stolon.Zooid, row.names(expected_angles)))
return(PS)
}) %>% unlist() %>% summary()
