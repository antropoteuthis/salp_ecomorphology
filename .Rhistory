legend("topright",c("Smoothing Spline with 3 df","Cubic Spline"),col=c("red","darkgreen"),lwd=2)
fit3 = smooth.spline(x=imputed_vols$Zooid_length,y=imputed_vols$real_vol, df=2)
plot(imputed_vols$Zooid_length,imputed_vols$real_vol,col="grey",xlab="Zooid length (mm)",ylab="Colony volume (ml)")
lines(fit3,col="red",lwd=2)
legend("topright",c("Smoothing Spline with 3 df","Cubic Spline"),col=c("red","darkgreen"),lwd=2)
fit3 = smooth.spline(x=imputed_vols$Zooid_length,y=imputed_vols$real_vol, df=4)
plot(imputed_vols$Zooid_length,imputed_vols$real_vol,col="grey",xlab="Zooid length (mm)",ylab="Colony volume (ml)")
lines(fit3,col="red",lwd=2)
legend("topright",c("Smoothing Spline with 3 df","Cubic Spline"),col=c("red","darkgreen"),lwd=2)
library(mgcv)
plot(imputed_vols$Zooid_length,imputed_vols$real_vol,col="grey",xlab="Zooid length (mm)",ylab="Colony volume (ml)")
lines(fit3,col="red",lwd=2)
legend("topright","Smoothing Spline with 3 df",col="red",lwd=2)
fit3 = gam(real_vol~Zooid_length+ZooidNum, data = imputed_vols)
plot(imputed_vols$Zooid_length,imputed_vols$real_vol,col="grey",xlab="Zooid length (mm)",ylab="Colony volume (ml)")
lines(fit3,col="red",lwd=2)
fit3
fit3$fitted.values
smooth.spline(x=imputed_vols$Zooid_length,y=imputed_vols$real_vol, df=4)
plot(fit3)
termplot(fit3)
cbind(imputed_vols$real_vol,fit3$fitted.values) %>% plot()
mutate(imputed_vols, estimate_vol= 18*ZooidNum^(0.01*Zooid_length)) %>% .[,c(6,2)] %>% plot()
mutate(imputed_vols, estimate_vol= 18*ZooidNum*(0.001*Zooid_length^3)) %>% .[,c(6,2)] %>% plot()
mutate(imputed_vols, estimate_vol= ZooidNum*(0.00001*Zooid_length^3)) %>% .[,c(6,2)] %>% plot()
mutate(imputed_vols, estimate_vol= ZooidNum*(0.00003*Zooid_length^3)) %>% .[,c(6,2)] %>% plot()
mutate(imputed_vols, estimate_vol= ZooidNum*(0.000025*Zooid_length^3)) %>% .[,c(6,2)] %>% plot()
mutate(imputed_vols, estimate_vol= ZooidNum*(0.0025*Zooid_length^2)) %>% .[,c(6,2)] %>% plot()
mutate(imputed_vols, estimate_vol= ZooidNum*(0.000000025*Zooid_length^4)) %>% .[,c(6,2)] %>% plot()
mutate(imputed_vols, estimate_vol= 3*ZooidNum*(0.000025*Zooid_length^3)) %>% .[,c(6,2)] %>% plot()
mutate(imputed_vols, estimate_vol= 30*ZooidNum*(0.0001*Zooid_length^3)) %>% .[,c(6,2)] %>% plot()
mutate(imputed_vols, estimate_vol= 30*ZooidNum*(0.00001*Zooid_length^3)) %>% .[,c(6,2)] %>% plot()
mutate(imputed_vols, estimate_vol= 300*ZooidNum*(0.00001*Zooid_length^3)) %>% .[,c(6,2)] %>% plot()
mutate(imputed_vols, estimate_vol= 300*ZooidNum*(0.001*Zooid_length^3)) %>% .[,c(6,2)] %>% plot()
mutate(imputed_vols, estimate_vol= 300*ZooidNum*(0.01*Zooid_length^3)) %>% .[,c(6,2)] %>% plot()
mutate(imputed_vols, estimate_vol= 300*ZooidNum*(0.000001*Zooid_length^3)) %>% .[,c(6,2)] %>% plot()
mutate(imputed_vols, estimate_vol= 300*ZooidNum*(0.0000001*Zooid_length^3)) %>% .[,c(6,2)] %>% plot()
mutate(imputed_vols, estimate_vol=ZooidNum*(0.00034*Zooid_length^3)) %>% .[,c(6,2)] %>% plot()
mutate(imputed_vols, estimate_vol=ZooidNum*(0.000034*Zooid_length^3)) %>% .[,c(6,2)] %>% plot()
mutate(imputed_vols, estimate_vol=ZooidNum*(0.000024*Zooid_length^3)) %>% .[,c(6,2)] %>% plot()
mutate(imputed_vols, estimate_vol=ZooidNum*(0.000024*(Zooid_length^3)) %>% .[,c(6,2)] %>% plot()
mutate(imputed_vols, estimate_vol=ZooidNum*(0.000024*(Zooid_length^3)) %>% .[,c(6,2)] %>% plot()
mutate(imputed_vols, estimate_vol=ZooidNum*(0.000084*(0.5Zooid_length^3)) %>% .[,c(6,2)] %>% plot()
mutate(imputed_vols, estimate_vol=ZooidNum*(0.000084*(0.5*Zooid_length^3)) %>% .[,c(6,2)] %>% plot()
mutate(imputed_vols, estimate_vol=ZooidNum*(0.000084*(0.5*Zooid_length^3))) %>% .[,c(6,2)] %>% plot()
mutate(imputed_vols, estimate_vol=ZooidNum*(0.000084*(0.5*Zooid_length^3))) %>% .[,c(6,2)] %>% plot()
mutate(imputed_vols, estimate_vol=ZooidNum*(0.000084*(0.4*Zooid_length^3))) %>% .[,c(6,2)] %>% plot()
mutate(imputed_vols, estimate_vol=ZooidNum*(0.000064*(0.4*Zooid_length^3))) %>% .[,c(6,2)] %>% plot()
mutate(imputed_vols, estimate_vol=ZooidNum*0.000064*(0.4*Zooid_length)^3) %>% .[,c(6,2)] %>% plot()
mutate(imputed_vols, estimate_vol=ZooidNum*0.000064*(2*Zooid_length)^3) %>% .[,c(6,2)] %>% plot()
mutate(imputed_vols, estimate_vol=ZooidNum*0.000064*(Zooid_length^2)) %>% .[,c(6,2)] %>% plot()
mutate(imputed_vols, estimate_vol=ZooidNum*(0.00064*(Zooid_length^2))+Zooid_length) %>% .[,c(6,2)] %>% plot()
mutate(imputed_vols, estimate_vol=ZooidNum*(0.00064*(Zooid_length^2))+0.0001*Zooid_length^3) %>% .[,c(6,2)] %>% plot()
mutate(imputed_vols, estimate_vol=ZooidNum*(0.00064*(Zooid_length^2))+0.0001*Zooid_length^3) %>%
ggplot(aes(x=estimate_vol, y=real_vol)) +
geom_point(aes(col=Species))
mutate(imputed_vols, estimate_vol=ZooidNum*(0.00064*(Zooid_length^2)+0.0001*Zooid_length^3)) %>%
ggplot(aes(x=estimate_vol, y=real_vol)) +
geom_point(aes(col=Species))
mutate(imputed_vols, estimate_vol=ZooidNum*(0.00034*(Zooid_length^2)+0.0001*Zooid_length^3)) %>%
ggplot(aes(x=estimate_vol, y=real_vol)) +
geom_point(aes(col=Species))
mutate(imputed_vols, estimate_vol=ZooidNum*(0.00034*(Zooid_length^2)+0.00001*Zooid_length^3)) %>%
ggplot(aes(x=estimate_vol, y=real_vol)) +
geom_point(aes(col=Species))
mutate(imputed_vols, estimate_vol=ZooidNum*(0.00034*(Zooid_length^2)+0.00005*Zooid_length^3)) %>%
ggplot(aes(x=estimate_vol, y=real_vol)) +
geom_point(aes(col=Species))
mutate(imputed_vols, estimate_vol=ZooidNum*(0.00024*(Zooid_length^2)+0.00005*Zooid_length^3)) %>%
ggplot(aes(x=estimate_vol, y=real_vol)) +
geom_point(aes(col=Species))
mutate(imputed_vols, estimate_vol=ZooidNum*(0.00014*(Zooid_length^2)+0.00005*Zooid_length^3)) %>%
ggplot(aes(x=estimate_vol, y=real_vol)) +
geom_point(aes(col=Species))
mutate(imputed_vols, estimate_vol=ZooidNum*(0.0001*(Zooid_length^2)+0.00005*Zooid_length^3)) %>%
ggplot(aes(x=estimate_vol, y=real_vol)) +
geom_point(aes(col=Species))
mutate(imputed_vols, estimate_vol=ZooidNum*(0.00005*(Zooid_length^2)+0.00005*Zooid_length^3)) %>%
ggplot(aes(x=estimate_vol, y=real_vol)) +
geom_point(aes(col=Species))
mutate(imputed_vols, estimate_vol=ZooidNum*(0.00001*(Zooid_length^2)+0.00009*Zooid_length^3)) %>%
ggplot(aes(x=estimate_vol, y=real_vol)) +
geom_point(aes(col=Species))
mutate(imputed_vols, estimate_vol=ZooidNum*(0.000005*(Zooid_length^2)+0.00009*Zooid_length^3)) %>%
ggplot(aes(x=estimate_vol, y=real_vol)) +
geom_point(aes(col=Species))
mutate(imputed_vols, estimate_vol=ZooidNum*(0.000005*(Zooid_length^2)+0.00019*Zooid_length^3)) %>%
ggplot(aes(x=estimate_vol, y=real_vol)) +
geom_point(aes(col=Species))
mutate(imputed_vols, estimate_vol=ZooidNum*(0.000005*(Zooid_length^2)+0.0001*Zooid_length^3)) %>%
ggplot(aes(x=estimate_vol, y=real_vol)) +
geom_point(aes(col=Species))
mutate(imputed_vols, estimate_vol=ZooidNum*(0.000001*(Zooid_length^2)+0.0001*Zooid_length^3)) %>%
ggplot(aes(x=estimate_vol, y=real_vol)) +
geom_point(aes(col=Species))
mutate(imputed_vols, estimate_vol=ZooidNum*(0.0000001*(Zooid_length^2)+0.0001*Zooid_length^3)) %>%
ggplot(aes(x=estimate_vol, y=real_vol)) +
geom_point(aes(col=Species))
mutate(imputed_vols, estimate_vol=ZooidNum*(0.00000001*(Zooid_length^2)+0.0001*Zooid_length^3)) %>%
ggplot(aes(x=estimate_vol, y=real_vol)) +
geom_point(aes(col=Species))
mutate(imputed_vols, estimate_vol=ZooidNum*(0.000001*(Zooid_length^2)+0.00001*Zooid_length^3)) %>%
ggplot(aes(x=estimate_vol, y=real_vol)) +
geom_point(aes(col=Species))
mutate(imputed_vols, estimate_vol=ZooidNum*(0.000001*(Zooid_length^2)+0.00003*Zooid_length^3)) %>%
ggplot(aes(x=estimate_vol, y=real_vol)) +
geom_point(aes(col=Species))
mutate(imputed_vols, estimate_vol=ZooidNum*(0.000001*(Zooid_length^2)+0.000024*Zooid_length^3)) %>%
ggplot(aes(x=estimate_vol, y=real_vol)) +
geom_point(aes(col=Species))
mutate(imputed_vols, estimate_vol=ZooidNum*(0.000001*(Zooid_length^2)+0.000023*Zooid_length^3)) %>%
ggplot(aes(x=estimate_vol, y=real_vol)) +
geom_point(aes(col=Species))
mutate(imputed_vols, estimate_vol=ZooidNum*(Zooid_length+0.000001*(Zooid_length^2)+0.000023*Zooid_length^3)) %>%
ggplot(aes(x=estimate_vol, y=real_vol)) +
geom_point(aes(col=Species))
mutate(imputed_vols, estimate_vol=ZooidNum*(0.1*Zooid_length+0.000001*(Zooid_length^2)+0.000023*Zooid_length^3)) %>%
ggplot(aes(x=estimate_vol, y=real_vol)) +
geom_point(aes(col=Species))
mutate(imputed_vols, estimate_vol=ZooidNum*(0.01*Zooid_length+0.000001*(Zooid_length^2)+0.000023*Zooid_length^3)) %>%
ggplot(aes(x=estimate_vol, y=real_vol)) +
geom_point(aes(col=Species))
mutate(imputed_vols, estimate_vol=ZooidNum*(0.05*Zooid_length+0.000001*(Zooid_length^2)+0.000023*Zooid_length^3)) %>%
ggplot(aes(x=estimate_vol, y=real_vol)) +
geom_point(aes(col=Species))
mutate(imputed_vols, estimate_vol=ZooidNum*(pi*Zooid_length*((0.3*Zooid_length)^2 - ((0.2*Zooid_length)^2)))) %>%
ggplot(aes(x=estimate_vol, y=real_vol)) +
geom_point(aes(col=Species))
mutate(imputed_vols, estimate_vol=ZooidNum*(0.001*pi*Zooid_length*((0.3*Zooid_length)^2 - ((0.2*Zooid_length)^2)))) %>%
ggplot(aes(x=estimate_vol, y=real_vol)) +
geom_point(aes(col=Species))
mutate(imputed_vols, estimate_vol=ZooidNum*(0.0001*pi*Zooid_length*((0.3*Zooid_length)^2 - ((0.2*Zooid_length)^2)))) %>%
ggplot(aes(x=estimate_vol, y=real_vol)) +
geom_point(aes(col=Species))
mutate(imputed_vols, estimate_vol=ZooidNum*(0.00015*pi*Zooid_length*((0.3*Zooid_length)^2 - ((0.2*Zooid_length)^2)))) %>%
ggplot(aes(x=estimate_vol, y=real_vol)) +
geom_point(aes(col=Species))
mutate(imputed_vols, estimate_vol=ZooidNum*(0.00015*pi*Zooid_length*((0.3*Zooid_length)^2 - ((0.1*Zooid_length)^2)))) %>%
ggplot(aes(x=estimate_vol, y=real_vol)) +
geom_point(aes(col=Species))
mutate(imputed_vols, estimate_vol=ZooidNum*(0.0001*pi*Zooid_length*((0.3*Zooid_length)^2 - ((0.1*Zooid_length)^2)))) %>%
ggplot(aes(x=estimate_vol, y=real_vol)) +
geom_point(aes(col=Species))
mutate(imputed_vols, estimate_vol=ZooidNum*(0.00015*pi*Zooid_length*((0.3*Zooid_length)^2 - ((0.2*Zooid_length)^2)))) %>%
ggplot(aes(x=estimate_vol, y=real_vol)) +
geom_point(aes(col=Species))
fit3 = gam(real_vol~Zooid_length+ZooidNum, data = imputed_vols)
cbind(imputed_vols$real_vol,fit3$fitted.values) %>% plot()
predict(fit3, join_presens[which(is.na(join_presens$Colony.volume..ml.)),"Zooid.length..mm."])
join_presens[which(is.na(join_presens$Colony.volume..ml.)),"Zooid.length..mm."]
predict.gam(fit3, join_presens[which(is.na(join_presens$Colony.volume..ml.)),"Zooid.length..mm."])
predict.gam(fit3, newdata=join_presens[which(is.na(join_presens$Colony.volume..ml.)),"Zooid.length..mm."])
join_presens[which(is.na(join_presens$Colony.volume..ml.)),"Zooid.length..mm."]
predict.gam(fit3, newdata=as.data.frame(join_presens[which(is.na(join_presens$Colony.volume..ml.)),"Zooid.length..mm."]))
as.data.frame(join_presens[which(is.na(join_presens$Colony.volume..ml.)),"Zooid.length..mm."])
predict.gam(fit3, newdata=as.data.frame(join_presens[which(is.na(join_presens$Colony.volume..ml.)),c("Number.of.zooids","Zooid.length..mm."])))
predict.gam(fit3, newdata=as.data.frame(join_presens[which(is.na(join_presens$Colony.volume..ml.)),c("Number.of.zooids","Zooid.length..mm."]))
predict.gam(fit3, newdata=as.data.frame(join_presens[which(is.na(join_presens$Colony.volume..ml.)),c("Number.of.zooids","Zooid.length..mm.")]))
unknown=as.data.frame(join_presens[which(is.na(join_presens$Colony.volume..ml.)),c("Number.of.zooids","Zooid.length..mm.")])
names(unknown)
predict.gam(fit3, unknown)
mutate(imputed_vols, estimate_vol=Number.of.zooids*(0.00015*pi*Zooid.length..mm.*((0.3*Zooid.length..mm.)^2 - ((0.2*Zooid.length..mm.)^2)))) %>%
ggplot(aes(x=estimate_vol, y=real_vol)) +
geom_point(aes(col=Species))
fit3 = gam(real_vol~Zooid.length..mm.+Number.of.zooids, data = imputed_vols)
unknown=as.data.frame(join_presens[which(is.na(join_presens$Colony.volume..ml.)),c("Number.of.zooids","Zooid.length..mm.")])
names(unknown)
source("~/Documents/salp_ecomorphology/respirometry_revamp.R", echo=TRUE)
predict.gam(fit3, unknown))
predict.gam(fit3, unknown)
join_presens$Colony.volume..ml.[which(is.na(join_presens$Colony.volume..ml.))] <- predict.gam(fit3, unknown)
join_presens$Colony.volume..ml.
join_presens$Colony.volume..ml.
join_presens
View(join_presens)
join_presens$Colony.volume..ml.[which(is.na(join_presens$Colony.volume..ml.))]
join_presens <- full_join(specimens, controls[c("Measurement","Date","Experiment","Time.point..min.","abs_O2.mg.","Container.volume..ml.")],
by=c("Experiment","Time.point..min."), suffix=c("_animal","_control"))
join_presens <- mutate(join_presens, abs_O2.mg.specific = abs_O2.mg._animal-(abs_O2.mg._control*(Container.volume..ml._animal/Container.volume..ml._control)))
unknown=as.data.frame(join_presens[which(is.na(join_presens$Colony.volume..ml.)),c("Number.of.zooids","Zooid.length..mm.")])
unknown
predict.gam(fit3, unknown)
predicted_vols<- predict.gam(fit3, unknown)
class(predicted_vols)
dim(predicted_vols)
predict.gam(fit3, unknown) %>% as.vector()
join_presens$Colony.volume..ml.[which(is.na(join_presens$Colony.volume..ml.))] <- predict.gam(fit3, unknown) %>% as.vector()
join_presens$Colony.volume..ml.
norm_presens$Specimen <- as.factor(norm_presens$Specimen)
norm_presens$Species <- as.factor(norm_presens$Species)
norm_presens$Experiment <- as.factor(norm_presens$Experiment)
#Zooid N & Size corrected O2 % saturation
CorrSatControl <- ggplot(norm_presens, aes(x=Time.point..min., y=corr_sat_O2.control)) + geom_point(aes(col=Species)) + ylab("Corrected Sat O2 (%) from T0 - Controls") + geom_line(aes(col = Species, group=Specimen)) + theme_bw() + theme(legend.position = "none")
slopes <- as.data.frame(matrix(ncol=8,nrow=length(unique(norm_presens$Specimen))))
names(slopes) <- c("Species","Specimen","Colony.volume..ml.","Zooid.length..mm.","Number.of.zooids","Slope_O2","Timespan","Temperature...C.")
for(i in 1:length(unique(norm_presens$Specimen))){
spm_i <- unique(norm_presens$Specimen)[i]
series_i <- norm_presens[which(norm_presens$Specimen==spm_i),c("Specimen","Species","Zooid.length..mm.","Number.of.zooids","Colony.volume..ml.","Time.point..min.","Temperature...C.","abs_O2.mg.specific")]
lm_i <- lm(abs_O2.mg.specific~Time.point..min., series_i)
print(series_i$Specimen[1] %>% as.character());print(series_i$Species[1] %>% as.character());print(lm_i$coefficients)
time.span_i <- max(series_i$Time.point..min.)-min(series_i$Time.point..min.)
slopes[i,1] <- series_i$Species[1] %>% as.character()
slopes[i,2] <- series_i$Specimen[1] %>% as.character()
slopes[i,3] <- series_i$Colony.volume..ml.[1] %>% as.numeric()
slopes[i,4] <- series_i$Zooid.length..mm.[1] %>% as.numeric()
slopes[i,5] <- series_i$Number.of.zooids[1] %>% as.numeric()
slopes[i,6] <- lm_i$coefficients[2] %>% as.numeric()
slopes[i,7] <- time.span_i
slopes[i,8] <- series_i$Temperature...C. %>% mean()
}
View(norm_presens)
presens <- read.csv("respirometry_Kona22.tsv", header = T, sep = "\t", stringsAsFactors = F)
presens$Species[which(is.na(presens$Species))] <- "Control"
presens$Specimen[which(is.na(presens$Specimen))] <- "Control"
#Filter by plastic and intact treatments
presens <- presens[which(presens$Container=="Plastic" & presens$Treatment == "Intact"),]
#Filter by blastozooids
presens <- presens[which(presens$Stage != "Oozoid" & presens$Stage != "Oozoid+Stolon"),]
#Fill in contained volume
presens$Container.volume..ml.[which(is.na(presens$Container.volume..ml.) & presens$Sensor.ID %in% c("P1","P2","P4","P5"))] <- 170
presens$Container.volume..ml.[which(is.na(presens$Container.volume..ml.) & presens$Sensor.ID == "P3 control")] <- 72
#Estimate absolute oxygen mg
ggplot(presens,aes(x=Specimen,y=O2..mg.L.))+geom_point(aes(col=Time.point..min.))+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
presens <- mutate(presens, abs_O2.mg. = O2..mg.L.*Container.volume..ml./1000)
ggplot(presens,aes(x=Specimen,y=abs_O2.mg.))+geom_point(aes(col=Container.volume..ml. %>% log()))+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
#Correct for O2 saturation limit wit temperature
#presens$Temperature...C.[which(is.na(presens$Temperature...C.))]<-29 #### MAKING SHIT UP ####
#presens <- mutate(presens, sat_O2 = O2..mg.L./oxySol(presens$Temperature...C., 30.1, 1))
#Subset controls and specimen measures
controls <- presens[which(presens$Specimen=="Control"),]
specimens <- presens[which(presens$Specimen != "Control"),]
specimens
controls <- controls %>%
group_by(Experiment, Time.point..min.) %>%
filter(Container.volume..ml. == max(Container.volume..ml.) & O2..mg.L. == max(O2..mg.L.))
controls
presens$Stage
presens <- read.csv("respirometry_Kona22.tsv", header = T, sep = "\t", stringsAsFactors = F)
presens$Species[which(is.na(presens$Species))] <- "Control"
presens$Specimen[which(is.na(presens$Specimen))] <- "Control"
#Filter by plastic and intact treatments
presens <- presens[which(presens$Container=="Plastic" & presens$Treatment == "Intact"),]
#Filter by blastozooids
presens <- presens[which(presens$Stage != "Oozoid" | presens$Stage != "Oozoid+Stolon"),]
presens$Stage
presens <- read.csv("respirometry_Kona22.tsv", header = T, sep = "\t", stringsAsFactors = F)
presens$Species[which(is.na(presens$Species))] <- "Control"
presens$Specimen[which(is.na(presens$Specimen))] <- "Control"
#Filter by plastic and intact treatments
presens <- presens[which(presens$Container=="Plastic" & presens$Treatment == "Intact"),]
#Filter by blastozooids
presens <- presens[which(presens$Stage != "Oozoid" & presens$Stage != "Oozoid+Stolon" | is.na(presens$Stage)),]
presens$Stage
presens$Container.volume..ml.[which(is.na(presens$Container.volume..ml.) & presens$Sensor.ID %in% c("P1","P2","P4","P5"))] <- 170
presens$Container.volume..ml.[which(is.na(presens$Container.volume..ml.) & presens$Sensor.ID == "P3 control")] <- 72
#Estimate absolute oxygen mg
ggplot(presens,aes(x=Specimen,y=O2..mg.L.))+geom_point(aes(col=Time.point..min.))+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
presens <- mutate(presens, abs_O2.mg. = O2..mg.L.*Container.volume..ml./1000)
ggplot(presens,aes(x=Specimen,y=abs_O2.mg.))+geom_point(aes(col=Container.volume..ml. %>% log()))+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
#Correct for O2 saturation limit wit temperature
#presens$Temperature...C.[which(is.na(presens$Temperature...C.))]<-29 #### MAKING SHIT UP ####
#presens <- mutate(presens, sat_O2 = O2..mg.L./oxySol(presens$Temperature...C., 30.1, 1))
#Subset controls and specimen measures
controls <- presens[which(presens$Specimen=="Control"),]
specimens <- presens[which(presens$Specimen != "Control"),]
#Keep only controls with the largest jar volume and in case of a tie, those that report the highest O2 concentration (purportedly those with least organic matter decay).
controls <- controls %>%
group_by(Experiment, Time.point..min.) %>%
filter(Container.volume..ml. == max(Container.volume..ml.) & O2..mg.L. == max(O2..mg.L.))
controls
#Join Specimens+Controls and subtract correcting for the difference in volume for specific O2 measurements
join_presens <- full_join(specimens, controls[c("Measurement","Date","Experiment","Time.point..min.","abs_O2.mg.","Container.volume..ml.")],
by=c("Experiment","Time.point..min."), suffix=c("_animal","_control"))
join_presens <- mutate(join_presens, abs_O2.mg.specific = abs_O2.mg._animal-(abs_O2.mg._control*(Container.volume..ml._animal/Container.volume..ml._control)))
join_presens %>%
mutate(exbool = as.character(Experiment)) %>%
ggplot(aes(x=Time.point..min., y=abs_O2.mg.specific)) +
geom_point(aes(col= Species)) + ylab("O2 (mg)") +
geom_line(aes(col = Species, group=Specimen)) +
theme_bw()
join_presens %>%
mutate(exbool = as.character(Experiment)) %>%
ggplot(aes(x=Time.point..min., y=abs_O2.mg.specific)) +
geom_point(aes(col= Species)) + ylab("O2 (mg)") +
geom_line(aes(col = Species, group=Specimen)) +
theme_bw()
join_presens %>%
mutate(exbool = as.character(Experiment)) %>%
ggplot(aes(x=Time.point..min., y=abs_O2.mg.specific)) +
geom_point(aes(col= Species)) + ylab("O2 (mg)") +
geom_line(aes(col = Species, group=Specimen)) +
theme_bw()
join_presens
join_presens %>%
mutate(exbool = as.character(Experiment)) %>%
ggplot(aes(x=Time.point..min., y=abs_O2.mg.specific)) +
geom_point(aes(col= Species)) + ylab("O2 (mg)") +
geom_line(aes(col = Species, group=Specimen)) +
theme_bw()
join_presens %>%
mutate(exbool = as.character(Experiment)) %>%
ggplot(aes(x=Time.point..min., y=abs_O2.mg.specific)) +
geom_point(aes(col= Species)) + ylab("O2 (mg)") +
geom_line(aes(col = Species, group=Specimen)) +
theme_bw()
join_presens %>%
mutate(exbool = as.character(Experiment))
join_presens %>%
mutate(exbool = as.character(Experiment)) %>%
ggplot(aes(x=Time.point..min., y=abs_O2.mg.specific))
dev.off()
join_presens %>%
mutate(exbool = as.character(Experiment)) %>%
ggplot(aes(x=Time.point..min., y=abs_O2.mg.specific)) +
geom_point(aes(col= Species)) + ylab("O2 (mg)") +
geom_line(aes(col = Species, group=Specimen)) +
theme_bw()
imputed_vols <- data.frame(imputed_vol = round(join_presens[which(!is.na(join_presens$Colony.volume..ml.)),"Number.of.zooids"]*pi*join_presens[which(!is.na(join_presens$Colony.volume..ml.)),"Zooid.length..mm."]*((join_presens[which(!is.na(join_presens$Colony.volume..ml.)),"Zooid.length..mm."]/2)^2)*0.001,1),
real_vol = join_presens[which(!is.na(join_presens$Colony.volume..ml.)),"Colony.volume..ml."],
Number.of.zooids = join_presens[which(!is.na(join_presens$Colony.volume..ml.)), "Number.of.zooids"],
Zooid.length..mm. = join_presens[which(!is.na(join_presens$Colony.volume..ml.)),"Zooid.length..mm."],
Species = join_presens[which(!is.na(join_presens$Colony.volume..ml.)),"Species"])
mutate(imputed_vols, estimate_vol=Number.of.zooids*(0.00015*pi*Zooid.length..mm.*((0.3*Zooid.length..mm.)^2 - ((0.2*Zooid.length..mm.)^2)))) %>%
ggplot(aes(x=estimate_vol, y=real_vol)) +
geom_point(aes(col=Species))
fit3 = gam(real_vol~Zooid.length..mm.+Number.of.zooids, data = imputed_vols)
unknown=as.data.frame(join_presens[which(is.na(join_presens$Colony.volume..ml.)),c("Number.of.zooids","Zooid.length..mm.")])
join_presens$Colony.volume..ml.[which(is.na(join_presens$Colony.volume..ml.))] <- predict.gam(fit3, unknown) %>% as.vector()
norm_presens <- join_presens
norm_presens$Specimen <- as.factor(norm_presens$Specimen)
norm_presens$Species <- as.factor(norm_presens$Species)
norm_presens$Experiment <- as.factor(norm_presens$Experiment)
### PLOTS ###
#Raw O2 plots
rawControl <- ggplot(norm_presens, aes(x=Time.point..min., y=abs_O2.mg._control)) + geom_point(aes(cex=log(Container.volume..ml._control))) + ylab("O2 (mg) Controls") + geom_line(aes(group=Specimen)) + theme_bw()
rawAnimal <- ggplot(norm_presens, aes(x=Time.point..min., y=abs_O2.mg._animal)) + geom_point(aes(col=Species)) + ylab("O2 (mg) Animals") + geom_line(aes(col = Species, group=Specimen)) + theme_bw()+ theme(legend.position = "none")
rawDifference <- ggplot(norm_presens, aes(x=Time.point..min., y=abs_O2.mg.specific)) + geom_point(aes(col=Species)) + ylab("O2 (mg) Difference") + geom_line(aes(col = Species, group=Specimen)) + theme_bw()
wrap_plots(rawControl,rawAnimal,rawDifference)
slopes <- as.data.frame(matrix(ncol=8,nrow=length(unique(norm_presens$Specimen))))
names(slopes) <- c("Species","Specimen","Colony.volume..ml.","Zooid.length..mm.","Number.of.zooids","Slope_O2","Timespan","Temperature...C.")
for(i in 1:length(unique(norm_presens$Specimen))){
spm_i <- unique(norm_presens$Specimen)[i]
series_i <- norm_presens[which(norm_presens$Specimen==spm_i),c("Specimen","Species","Zooid.length..mm.","Number.of.zooids","Colony.volume..ml.","Time.point..min.","Temperature...C.","abs_O2.mg.specific")]
lm_i <- lm(abs_O2.mg.specific~Time.point..min., series_i)
print(series_i$Specimen[1] %>% as.character());print(series_i$Species[1] %>% as.character());print(lm_i$coefficients)
time.span_i <- max(series_i$Time.point..min.)-min(series_i$Time.point..min.)
slopes[i,1] <- series_i$Species[1] %>% as.character()
slopes[i,2] <- series_i$Specimen[1] %>% as.character()
slopes[i,3] <- series_i$Colony.volume..ml.[1] %>% as.numeric()
slopes[i,4] <- series_i$Zooid.length..mm.[1] %>% as.numeric()
slopes[i,5] <- series_i$Number.of.zooids[1] %>% as.numeric()
slopes[i,6] <- lm_i$coefficients[2] %>% as.numeric()
slopes[i,7] <- time.span_i
slopes[i,8] <- series_i$Temperature...C. %>% mean()
}
i
length(unique(norm_presens$Specimen))
slopes
norm_presens$Specimen
ggplot(slopes,aes(x=Species,y=-Slope_O2))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90))
slopes %>% mutate(Slope_normalized = Slope_O2/Colony.volume..ml.) -> slopes
ggplot(slopes,aes(x=Species,y=-Slope_normalized))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90))
ggplot(slopes,aes(x=Species,y=-Slope_O2))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90))+theme_bw()
View(specimens)
#Join Specimens+Controls and subtract correcting for the difference in volume for specific O2 measurements
join_presens <- full_join(specimens, controls[c("Measurement","Date","Experiment","Time.point..min.","abs_O2.mg.","Container.volume..ml.")],
by=c("Experiment","Time.point..min."), suffix=c("_animal","_control"))
specimens$Measurement
join_presens$Measurement_animal
specimens$Measurement %>% unique()
join_presens$Measurement_animal %>% unique()
#Join Specimens+Controls and subtract correcting for the difference in volume for specific O2 measurements
join_presens <- full_join(specimens, controls[c("Date","Experiment","Time.point..min.","abs_O2.mg.","Container.volume..ml.")],
by=c("Experiment","Time.point..min."), suffix=c("_animal","_control"))
join_presens$Measurement %>% unique()
join_presens$Measurement
#Join Specimens+Controls and subtract correcting for the difference in volume for specific O2 measurements
join_presens <- full_join(specimens, controls[c("Experiment","abs_O2.mg.","Container.volume..ml.")],
by=c("Experiment","Time.point..min.","Date"), suffix=c("_animal","_control"))
#Join Specimens+Controls and subtract correcting for the difference in volume for specific O2 measurements
join_presens <- full_join(specimens, controls[c("Date","Experiment","Time.point..min.","abs_O2.mg.","Container.volume..ml.")],
by=c("Experiment","Time.point..min.","Date"), suffix=c("_animal","_control"))
join_presens$Measurement_animal %>% unique()
join_presens$Measurement %>% unique()
join_presens$Measurement
join_presens$Measurement %>% repeat
()
join_presens$Measurement %>% duplicated()
join_presens$Measurement %>% duplicated()
specimens[342,]
specimens[Measurement==342]
specimens[specimens$Measurement==342]
specimens[specimens$Measurement==342,]
#Keep only controls with the largest jar volume and in case of a tie, those that report the highest O2 concentration (purportedly those with least organic matter decay).
controls <- controls %>%
group_by(Experiment, Time.point..min.) %>%
filter(Container.volume..ml. == max(Container.volume..ml.) & O2..mg.L. == max(O2..mg.L.) & Sensor.ID==mode(Sensor.ID))
#Keep only controls with the largest jar volume and in case of a tie, those that report the highest O2 concentration (purportedly those with least organic matter decay).
controls <- controls %>%
group_by(Experiment, Time.point..min.) %>%
filter(Container.volume..ml. == max(Container.volume..ml.) & O2..mg.L. == max(O2..mg.L.)) %>% .[,-Sensor.ID]
#Keep only controls with the largest jar volume and in case of a tie, those that report the highest O2 concentration (purportedly those with least organic matter decay).
controls <- controls %>%
group_by(Experiment, Time.point..min.) %>%
filter(Container.volume..ml. == max(Container.volume..ml.) & O2..mg.L. == max(O2..mg.L.)) %>% .[,-c("Sensor.ID")]
#Keep only controls with the largest jar volume and in case of a tie, those that report the highest O2 concentration (purportedly those with least organic matter decay).
controls <- controls %>%
group_by(Experiment, Time.point..min.) %>%
filter(Container.volume..ml. == max(Container.volume..ml.) & O2..mg.L. == max(O2..mg.L.)) %>% .[,-which(names(.=="Sensor.ID")))]
#Keep only controls with the largest jar volume and in case of a tie, those that report the highest O2 concentration (purportedly those with least organic matter decay).
controls <- controls %>%
group_by(Experiment, Time.point..min.) %>%
filter(Container.volume..ml. == max(Container.volume..ml.) & O2..mg.L. == max(O2..mg.L.)) %>% .[,-which(names(.)=="Sensor.ID"))]
#Keep only controls with the largest jar volume and in case of a tie, those that report the highest O2 concentration (purportedly those with least organic matter decay).
controls <- controls %>%
group_by(Experiment, Time.point..min.) %>%
filter(Container.volume..ml. == max(Container.volume..ml.) & O2..mg.L. == max(O2..mg.L.)) %>% .[,-which(names(control)=="Sensor.ID"))]
#Keep only controls with the largest jar volume and in case of a tie, those that report the highest O2 concentration (purportedly those with least organic matter decay).
controls <- controls %>%
group_by(Experiment, Time.point..min.) %>%
filter(Container.volume..ml. == max(Container.volume..ml.) & O2..mg.L. == max(O2..mg.L.)) %>% .[,-which(names(.)=="Sensor.ID")]
#Keep only controls with the largest jar volume and in case of a tie, those that report the highest O2 concentration (purportedly those with least organic matter decay).
controls <- controls %>%
group_by(Experiment, Time.point..min.) %>%
filter(Container.volume..ml. == max(Container.volume..ml.) & O2..mg.L. == max(O2..mg.L.)) %>% .[,-which(names(control)=="Sensor.ID")]
#Keep only controls with the largest jar volume and in case of a tie, those that report the highest O2 concentration (purportedly those with least organic matter decay).
controls <- controls %>%
group_by(Experiment, Time.point..min.) %>%
filter(Container.volume..ml. == max(Container.volume..ml.) & O2..mg.L. == max(O2..mg.L.)) %>% .[,-which(names(controls)=="Sensor.ID")]
#Keep only controls with the largest jar volume and in case of a tie, those that report the highest O2 concentration (purportedly those with least organic matter decay).
controls <- controls %>%
group_by(Experiment, Time.point..min.) %>%
filter(Container.volume..ml. == max(Container.volume..ml.) & O2..mg.L. == max(O2..mg.L.))
#Subset controls and specimen measures
controls <- presens[which(presens$Specimen=="Control"),]
#Keep only controls with the largest jar volume and in case of a tie, those that report the highest O2 concentration (purportedly those with least organic matter decay).
controls <- controls %>%
group_by(Experiment, Time.point..min.) %>%
filter(Container.volume..ml. == max(Container.volume..ml.) & O2..mg.L. == max(O2..mg.L.)) %>% .[,-which(names(.)=="Sensor.ID")]
controls
dim(controls)
dim(controls %>% unique())
filter(Container.volume..ml. == max(Container.volume..ml.) & O2..mg.L. == max(O2..mg.L.)) %>% .[,-which(names(.)=="Sensor.ID" | which(names(.)=="Measurement")]
#Keep only controls with the largest jar volume and in case of a tie, those that report the highest O2 concentration (purportedly those with least organic matter decay).
controls <- controls %>%
group_by(Experiment, Time.point..min.) %>%
filter(Container.volume..ml. == max(Container.volume..ml.) & O2..mg.L. == max(O2..mg.L.)) %>% .[,-which(names(.)=="Sensor.ID" | names(.)=="Measurement")]
dim(controls %>% unique())
controls=unique(controls)
#Join Specimens+Controls and subtract correcting for the difference in volume for specific O2 measurements
join_presens <- full_join(specimens, controls[c("Date","Experiment","Time.point..min.","abs_O2.mg.","Container.volume..ml.")],
by=c("Experiment","Time.point..min.","Date"), suffix=c("_animal","_control"))
join_presens <- mutate(join_presens, abs_O2.mg.specific = abs_O2.mg._animal-(abs_O2.mg._control*(Container.volume..ml._animal/Container.volume..ml._control)))
controls
join_presens$Measurement %>% duplicated()
join_presens$Measurement
specimens$Measurement
join_presens <- join_presens[which(!is.na(join_presens$Measurement)),]
join_presens$Measurement
ggplot(join_presens,aes(x=Specimen,y=abs_O2.mg.specific))+geom_point(aes(col=Container.volume..ml._animal %>% log()))+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(join_presens,aes(x=Date_animal,y=abs_O2.mg._control))+geom_point(aes(col=Container.volume..ml._control %>% log()))+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(join_presens,aes(x=Specimen,y=abs_O2.mg.specific))+geom_point(aes(col=Container.volume..ml._animal %>% log()))+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
join_presens %>%
mutate(exbool = as.character(Experiment)) %>%
ggplot(aes(x=Time.point..min., y=abs_O2.mg.specific)) +
geom_point(aes(col= Species)) + ylab("O2 (mg)") +
geom_line(aes(col = Species, group=Specimen)) +
theme_bw()
imputed_vols <- data.frame(imputed_vol = round(join_presens[which(!is.na(join_presens$Colony.volume..ml.)),"Number.of.zooids"]*pi*join_presens[which(!is.na(join_presens$Colony.volume..ml.)),"Zooid.length..mm."]*((join_presens[which(!is.na(join_presens$Colony.volume..ml.)),"Zooid.length..mm."]/2)^2)*0.001,1),
real_vol = join_presens[which(!is.na(join_presens$Colony.volume..ml.)),"Colony.volume..ml."],
Number.of.zooids = join_presens[which(!is.na(join_presens$Colony.volume..ml.)), "Number.of.zooids"],
Zooid.length..mm. = join_presens[which(!is.na(join_presens$Colony.volume..ml.)),"Zooid.length..mm."],
Species = join_presens[which(!is.na(join_presens$Colony.volume..ml.)),"Species"])
mutate(imputed_vols, estimate_vol=Number.of.zooids*(0.00015*pi*Zooid.length..mm.*((0.3*Zooid.length..mm.)^2 - ((0.2*Zooid.length..mm.)^2)))) %>%
ggplot(aes(x=estimate_vol, y=real_vol)) +
geom_point(aes(col=Species))
fit3 = gam(real_vol~Zooid.length..mm.+Number.of.zooids, data = imputed_vols)
unknown=as.data.frame(join_presens[which(is.na(join_presens$Colony.volume..ml.)),c("Number.of.zooids","Zooid.length..mm.")])
join_presens$Colony.volume..ml.[which(is.na(join_presens$Colony.volume..ml.))] <- predict.gam(fit3, unknown) %>% as.vector()
norm_presens <- join_presens
slopes <- as.data.frame(matrix(ncol=8,nrow=length(unique(norm_presens$Specimen))))
names(slopes) <- c("Species","Specimen","Colony.volume..ml.","Zooid.length..mm.","Number.of.zooids","Slope_O2","Timespan","Temperature...C.")
for(i in 1:length(unique(norm_presens$Specimen))){
spm_i <- unique(norm_presens$Specimen)[i]
series_i <- norm_presens[which(norm_presens$Specimen==spm_i),c("Specimen","Species","Zooid.length..mm.","Number.of.zooids","Colony.volume..ml.","Time.point..min.","Temperature...C.","abs_O2.mg.specific")]
lm_i <- lm(abs_O2.mg.specific~Time.point..min., series_i)
print(series_i$Specimen[1] %>% as.character());print(series_i$Species[1] %>% as.character());print(lm_i$coefficients)
time.span_i <- max(series_i$Time.point..min.)-min(series_i$Time.point..min.)
slopes[i,1] <- series_i$Species[1] %>% as.character()
slopes[i,2] <- series_i$Specimen[1] %>% as.character()
slopes[i,3] <- series_i$Colony.volume..ml.[1] %>% as.numeric()
slopes[i,4] <- series_i$Zooid.length..mm.[1] %>% as.numeric()
slopes[i,5] <- series_i$Number.of.zooids[1] %>% as.numeric()
slopes[i,6] <- lm_i$coefficients[2] %>% as.numeric()
slopes[i,7] <- time.span_i
slopes[i,8] <- series_i$Temperature...C. %>% mean()
}
ggplot(slopes,aes(x=Species,y=-Slope_O2))+geom_boxplot()+theme_bw()+theme(axis.text.x = element_text(angle = 90))
ggplot(slopes,aes(x=Species,y=-Slope_normalized))+geom_boxplot()+theme_bw()+theme(axis.text.x = element_text(angle = 90))
slopes %>% mutate(Slope_normalized = Slope_O2/Colony.volume..ml.) -> slopes
ggplot(slopes,aes(x=Species,y=-Slope_normalized))+geom_boxplot()+theme_bw()+theme(axis.text.x = element_text(angle = 90))
ggplot(slopes,aes(x=Species,y=-Slope_normalized))+geom_boxplot()+ylab("-Slope / Specimen biovolume (ml)")+theme_bw()+theme(axis.text.x = element_text(angle = 90))
pdf("Figures_respirometry/Kona2022/slopes_SatO2.pdf", height=6, width=10)
ggplot(slopes,aes(x=Species,y=-Slope_O2))+geom_boxplot()+theme_bw()+theme(axis.text.x = element_text(angle = 90))
dev.off()
slopes %>% mutate(Slope_normalized = Slope_O2/Colony.volume..ml.) -> slopes
pdf("Figures_respirometry/Kona2022/slopes_Corrected.pdf", height=6, width=10)
ggplot(slopes,aes(x=Species,y=-Slope_normalized))+geom_boxplot()+ylab("-Slope / Specimen biovolume (ml)")+theme_bw()+theme(axis.text.x = element_text(angle = 90))
dev.off()
pdf("Figures_respirometry/Kona2022/RawO2.pdf", height=4, width=14)
wrap_plots(rawControl,rawAnimal,rawDifference)
dev.off()
