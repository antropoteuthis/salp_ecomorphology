keyvars %>% pivot_wider(
names_from = Number,
values_from = c("X..mm.","Y..mm.","Z..mm."),
names_prefix = "Zooid_"
)
keyvars
keyvars %>% pivot_wider(
names_from = Number,
values_from = c("X..mm.","Y..mm.","Z..mm."),
names_prefix = "Zooid_"
)
keyvars %>% pivot_wider(
names_from = Number,
values_from = c("X..mm.","Y..mm.","Z..mm."),
names_prefix = "Zooid_"
) %>% names()
keyvars %>% pivot_wider(
names_from = Number,
values_from = c("X..mm.","Y..mm.","Z..mm."),
names_prefix = "Zooid_"
) %>% View()
raw <- read.csv("~/salp_ecomorphology/A001C0167_20210709184129_0001.csv", sep=',', header = T, stringsAsFactors = F, skip=4)
keyvars <- raw[,c(1:3,6:8,31)]
mutate(keyvars, is_junk = (1/Number<Inf) == FALSE) -> keyvars
keyvars %>% pivot_wider(
names_from = Number,
values_from = c("X..mm.","Y..mm.","Z..mm."),
names_prefix = "Zooid_"
)
raw <- read.csv("~/salp_ecomorphology/A001C0167_20210709184129_0001.csv", sep=',', header = T, stringsAsFactors = F, skip=4)
keyvars <- raw[,c(1:3,6:8,31)]
keyvars %>% pivot_wider(
names_from = Number,
values_from = c("X..mm.","Y..mm.","Z..mm."),
names_prefix = "Zooid_"
)
keyvars %>% pivot_wider(
names_from = Number,
values_from = c("X..mm.","Y..mm.","Z..mm."),
names_prefix = "Zooid_"
) -> keyvars
raw <- read.csv("~/salp_ecomorphology/A001C0167_20210709184129_0001.csv", sep=',', header = T, stringsAsFactors = F, skip=4)
keyvars <- raw[,c(1:3,6:8,31)]
keyvars %>% pivot_wider(
names_from = Number,
values_from = c("X..mm.","Y..mm.","Z..mm."),
names_prefix = "Zooid_"
) -> keyvars
keyvars
zooid_list <- list()
group_by(keyvars, Number)
group_by(keyvars, keyvars$Number)
raw <- read.csv("~/salp_ecomorphology/A001C0167_20210709184129_0001.csv", sep=',', header = T, stringsAsFactors = F, skip=4)
keyvars <- raw[,c(1:3,6:8,31)]
group_by(keyvars, keyvars$Number)
group_by(keyvars, Number)
group_split(keyvars, Number)
zooid_list <- group_split(keyvars, Number)
mutate(keyvars, is_junk = (1/Number<Inf) == FALSE) -> keyvars
keyvars$is_junk <- as.numeric(keyvars$is_junk)
keyvars %>% pivot_wider(
names_from = is_junk,
values_from = c("X..mm.","Y..mm.","Z..mm."),
) -> keyvars
keyvars
keyvars
keyvars <- raw[,c(1:3,6:8,31)]
mutate(keyvars, is_junk = (1/Number<Inf) == FALSE) -> keyvars
keyvars$is_junk <- as.numeric(keyvars$is_junk)
keyvars
keyvars %>% pivot_wider(
names_from = is_junk,
values_from = c("X..mm.","Y..mm.","Z..mm."),
) -> keyvars
keyvars <- raw[,c(1:3,6:8,31)]
mutate(keyvars, is_junk = (1/Number<Inf) == FALSE) -> keyvars
keyvars
rename(keyvars)
names(keyvars)
keyvars %>% pivot_wider(
names_from = is_junk,
values_from = c("X..mm.","Y..mm.","Z..mm."),
) -> keyvars
names(keyvars)
mutate(keyvars, is_junk = (1/Number<Inf) == FALSE) -> keyvars
keyvars$is_junk <- as.numeric(keyvars$is_junk)
keyvars %>% pivot_wider(
names_from = is_junk,
values_from = c("X..mm.","Y..mm.","Z..mm."),
) -> keyvars
names(keyvars)
names(keyvars) %>% str_replace_all("TRUE", "Junk") %>% str_replace_all("FALSE", "Zooid")
keyvars
names(keyvars) %>% str_replace_all("TRUE", "Junk") %>% str_replace_all("FALSE", "Zooid") -> names(keyvars)
keyvars
keyvars %>% pivot_wider(
id_cols = Time..mins.,
names_from = is_junk,
values_from = c("X..mm.","Y..mm.","Z..mm."),
) -> keyvars
keyvars <- raw[,c(1:3,6:8,31)]
mutate(keyvars, is_junk = (1/Number<Inf) == FALSE) -> keyvars
keyvars %>% pivot_wider(
id_cols = Time..mins.,
names_from = is_junk,
values_from = c("X..mm.","Y..mm.","Z..mm."),
) -> keyvars
keyvars
keyvars <- raw[,c(1:3,6:8,31)]
mutate(keyvars, is_junk = (1/Number<Inf) == FALSE) -> keyvars
keyvars %>% pivot_wider(
names_from = is_junk,
values_from = c("X..mm.","Y..mm.","Z..mm."),
) -> keyvars
View(keyvars)
names(keyvars) %>% str_replace_all("TRUE", "Junk") %>% str_replace_all("FALSE", "Zooid") -> names(keyvars)
left_join(group_split(keyvars, is_junk)[[1]], group_split(keyvars, is_junk)[[2]])
keyvars <- raw[,c(1:3,6:8,31)] %>% mutate(is_junk = (1/Number<Inf) == FALSE) -> keyvars
raw[,c(1:3,6:8,31)] %>% mutate(is_junk = (1/Number<Inf) == FALSE) -> keyvars
left_join(group_split(keyvars, is_junk)[[1]], group_split(keyvars, is_junk)[[2]])
full_join(group_split(keyvars, is_junk)[[1]], group_split(keyvars, is_junk)[[2]])
group_split(keyvars, is_junk)[[2]]
full_join(group_split(keyvars, is_junk)[[1]][,1:7], group_split(keyvars, is_junk)[[2]][,1:7])
full_join(group_split(keyvars, is_junk)[[1]][,1:7], group_split(keyvars, is_junk)[[2]][,1:7], suffix= c("Junk","Zooid"))
full_join(group_split(keyvars, is_junk)[[1]][,1:7], group_split(keyvars, is_junk)[[2]][,1:7], by=c("Filename","Frame","Time..mins."), suffix= c("Junk","Zooid"))
full_join(group_split(keyvars, is_junk)[[1]][,1:7], group_split(keyvars, is_junk)[[2]][,1:7], by=c("Filename","Frame","Time..mins.","Number"), suffix= c("Junk","Zooid"))
full_join(group_split(keyvars, is_junk)[[1]][,1:7], group_split(keyvars, is_junk)[[2]][,1:7], by=c("Filename","Frame","Time..mins."), suffix= c("Junk","Zooid"))
full_join(group_split(keyvars, is_junk)[[1]][,1:7],
group_split(keyvars, is_junk)[[2]][,1:7],
by=c("Filename","Frame","Time..mins."),
suffix= c("Junk","Zooid")) %>%
as.data.frame()
full_join(group_split(keyvars, is_junk)[[1]][,1:7],
group_split(keyvars, is_junk)[[2]][,1:7],
by=c("Filename","Frame","Time..mins."),
suffix= c("Junk","Zooid")) %>%
as.data.frame() %>% .[,c(-7,-11)]
full_join(group_split(keyvars, is_junk)[[1]][,1:7],
group_split(keyvars, is_junk)[[2]][,1:7],
by=c("Filename","Frame","Time..mins."),
suffix= c("Junk","Zooid")) %>%
as.data.frame() %>% .[,c(-7)]
full_join(group_split(keyvars, is_junk)[[1]][,1:7],
group_split(keyvars, is_junk)[[2]][,1:7],
by=c("Filename","Frame","Time..mins."),
suffix= c("Zooid","Junk")) %>%
as.data.frame() %>% .[,c(-7)]
full_join(group_split(keyvars, is_junk)[[1]][,1:7],
group_split(keyvars, is_junk)[[2]][,1:7],
by=c("Filename","Frame","Time..mins."),
suffix= c("Zooid","Junk")) %>%
as.data.frame()
full_join(group_split(keyvars, is_junk)[[1]][,1:7],
group_split(keyvars, is_junk)[[2]][,1:7],
by=c("Filename","Frame","Time..mins."),
suffix= c("Zooid","Junk")) %>%
as.data.frame() %>% .[,c(-11)]
tidy <- full_join(group_split(keyvars, is_junk)[[1]][,1:7],
group_split(keyvars, is_junk)[[2]][,1:7],
by=c("Filename","Frame","Time..mins."),
suffix= c("Zooid","Junk")) %>%
as.data.frame() %>% .[,c(-11)]
zooid_list <- group_split(tidy, NumberZooid)
zooid_list
z1 <- zooid_list[[1]]
z1
z1 %>% arrange(Frame) %>%
mutate(diff = Time..mins. - lag(Time..mins., default = first(Time..mins.)))
z1 %>% arrange(Frame) %>%
mutate(Delta_time_s = Time..mins. - lag(Time..mins., default = first(Time..mins.)))
z1 %>% arrange(Frame) %>%
mutate(Delta_time_s = Time..mins. - lag(Time..mins., default = first(Time..mins.))) %>%
mutate(Xd_mm = X..mm.Zooid - X..mm.Junk, Yd_mm = Y..mm.Zooid - Y..mm.Junk, Zd_mm =  Z..mm.Zooid - Z..mm.Junk)
z1 %>% arrange(Frame) %>%
mutate(Delta_time_s = Time..mins. - lag(Time..mins., default = first(Time..mins.))) %>%
mutate(Xd_mm = X..mm.Zooid - X..mm.Junk, Yd_mm = Y..mm.Zooid - Y..mm.Junk, Zd_mm =  Z..mm.Zooid - Z..mm.Junk) %>%
mutate(Delta_X_mm = Xd_mm - lag(Xd_mm, default = first(Xd_mm)),
Delta_Y_mm = Yd_mm - lag(Yd_mm, default = first(Yd_mm)),
Delta_Z_mm = Zd_mm - lag(Zd_mm, default = first(Zd_mm)))
z1 %>% arrange(Frame) %>%
mutate(Delta_time_s = Time..mins. - lag(Time..mins., default = first(Time..mins.))) %>%
mutate(Xd_mm = X..mm.Zooid - X..mm.Junk, Yd_mm = Y..mm.Zooid - Y..mm.Junk, Zd_mm =  Z..mm.Zooid - Z..mm.Junk) %>%
mutate(Delta_X_mm = Xd_mm - lag(Xd_mm, default = first(Xd_mm)),
Delta_Y_mm = Yd_mm - lag(Yd_mm, default = first(Yd_mm)),
Delta_Z_mm = Zd_mm - lag(Zd_mm, default = first(Zd_mm))) %>% View()
z1 %>% arrange(Frame) %>%
mutate(Delta_time_s = Time..mins. - lag(Time..mins., default = first(Time..mins.))) %>%
mutate(Xd_mm = X..mm.Zooid - X..mm.Junk, Yd_mm = Y..mm.Zooid - Y..mm.Junk, Zd_mm =  Z..mm.Zooid - Z..mm.Junk) %>%
mutate(Delta_X_mm = Xd_mm - lag(Xd_mm, default = first(Xd_mm)),
Delta_Y_mm = Yd_mm - lag(Yd_mm, default = first(Yd_mm)),
Delta_Z_mm = Zd_mm - lag(Zd_mm, default = first(Zd_mm))) %>%
mutate(Distance_mm = sqrt(Delta_X_mm^2 + Delta_Y_mm^2 + Delta_Z_mm^2))
z1 %>% arrange(Frame) %>%
mutate(Delta_time_s = Time..mins. - lag(Time..mins., default = first(Time..mins.))) %>%
mutate(Xd_mm = X..mm.Zooid - X..mm.Junk, Yd_mm = Y..mm.Zooid - Y..mm.Junk, Zd_mm =  Z..mm.Zooid - Z..mm.Junk) %>%
mutate(Delta_X_mm = Xd_mm - lag(Xd_mm, default = first(Xd_mm)),
Delta_Y_mm = Yd_mm - lag(Yd_mm, default = first(Yd_mm)),
Delta_Z_mm = Zd_mm - lag(Zd_mm, default = first(Zd_mm))) %>%
mutate(Distance_mm = sqrt(Delta_X_mm^2 + Delta_Y_mm^2 + Delta_Z_mm^2)) %>% View()
z1 %>% arrange(Frame) %>%
mutate(Delta_time_s = Time..mins. - lag(Time..mins., default = first(Time..mins.))) %>%
mutate(Xd_mm = X..mm.Zooid - X..mm.Junk, Yd_mm = Y..mm.Zooid - Y..mm.Junk, Zd_mm =  Z..mm.Zooid - Z..mm.Junk) %>%
mutate(Delta_X_mm = Xd_mm - lag(Xd_mm, default = first(Xd_mm)),
Delta_Y_mm = Yd_mm - lag(Yd_mm, default = first(Yd_mm)),
Delta_Z_mm = Zd_mm - lag(Zd_mm, default = first(Zd_mm))) %>%
mutate(Distance_mm = sqrt(Delta_X_mm^2 + Delta_Y_mm^2 + Delta_Z_mm^2)) %>%
mutate(Speed_mm_s = Distance_mm/Delta_time_s)
wrangle <- function(df){
df %>% arrange(Frame) %>%
mutate(Delta_time_s = Time..mins. - lag(Time..mins., default = first(Time..mins.))) %>%
mutate(Xd_mm = X..mm.Zooid - X..mm.Junk, Yd_mm = Y..mm.Zooid - Y..mm.Junk, Zd_mm =  Z..mm.Zooid - Z..mm.Junk) %>%
mutate(Delta_X_mm = Xd_mm - lag(Xd_mm, default = first(Xd_mm)),
Delta_Y_mm = Yd_mm - lag(Yd_mm, default = first(Yd_mm)),
Delta_Z_mm = Zd_mm - lag(Zd_mm, default = first(Zd_mm))) %>%
mutate(Distance_mm = sqrt(Delta_X_mm^2 + Delta_Y_mm^2 + Delta_Z_mm^2)) %>%
mutate(Speed_mm_s = Distance_mm/Delta_time_s) %>% return()
}
lapply(zooid_list,df)
lapply(zooid_list,wrangle)
wrangled_list <- lapply(zooid_list,wrangle)
View(wrangled_list)
wrangled_list[[1]]
wrangled_list[[1]] %>% View()
do.call(wrangled_list, rbind)
do.call(rbind, wrangled_list)
speed_data <- do.call(rbind, wrangled_list)
ggplot(speed_data, aes(Time..mins., Speed_mm_s))+geom_point(aes(color=NumberZooid))
ggplot(speed_data, aes(Time..mins., Speed_mm_s))+geom_point(aes(color=NumberZooid %>% as.factor()))
ggplot(speed_data, aes(Time..mins., Speed_mm_s))+geom_line(aes(color=NumberZooid %>% as.factor()))
wrangle <- function(df){
df %>% arrange(Frame) %>%
mutate(Delta_time_s = Time..mins. - lag(Time..mins., default = first(Time..mins.))) %>%
mutate(Xd_mm = X..mm.Zooid - X..mm.Junk, Yd_mm = Y..mm.Zooid - Y..mm.Junk, Zd_mm =  Z..mm.Zooid - Z..mm.Junk) %>%
mutate(Delta_X_mm = Xd_mm - lag(Xd_mm, default = first(Xd_mm)),
Delta_Y_mm = Yd_mm - lag(Yd_mm, default = first(Yd_mm)),
Delta_Z_mm = Zd_mm - lag(Zd_mm, default = first(Zd_mm))) %>%
mutate(Distance_mm = sqrt(Delta_X_mm^2 + Delta_Y_mm^2 + Delta_Z_mm^2)) %>%
mutate(Speed_cm_s = 0.1*Distance_mm/Delta_time_s) %>% return()
}
wrangled_list <- lapply(zooid_list,wrangle)
speed_data <- do.call(rbind, wrangled_list)
ggplot(speed_data, aes(Time..mins., Speed_cm_s))+geom_line(aes(color=NumberZooid %>% as.factor()))
library(ape)
help(ape)
library(tidyverse)
#library(corHMM)
library(bayou)
# Load necessary libraries
library(lavaan)
install.packages("lavaan")
# Load necessary libraries
library(lavaan)
library(tidyverse)
# Define simulation parameters
n_simulations <- 1000   # Number of simulations
sample_sizes <- seq(100, 500, by = 50)  # Range of sample sizes to test
alpha_level <- 0.05
power_target <- 0.99
simulate_data <- function(n, beta = 0.5, sigma = 1) {
# Generate predictor
predictor <- rnorm(n, mean = 0, sd = 1)
# Simulate latent growth factors (intercept and slope)
intercept <- rnorm(n, mean = 0, sd = sigma)
slope <- rnorm(n, mean = 0, sd = sigma)
# Generate observed values for three timepoints
T1 <- intercept + 0 * slope + rnorm(n, mean = 0, sd = sigma)
T2 <- intercept + 1 * slope + rnorm(n, mean = 0, sd = sigma)
T3 <- intercept + 2 * slope + rnorm(n, mean = 0, sd = sigma)
# Create a data frame
data <- data.frame(T1, T2, T3, predictor)
return(data)
}
lgm_model <- '
# Latent growth factors
i =~ 1*T1 + 1*T2 + 1*T3
s =~ 0*T1 + 1*T2 + 2*T3
# Regressions
s ~ predictor  # Effect of predictor on slope
'
results <- data.frame(sample_size = integer(), power = numeric())
results
for (n in sample_sizes) {
p_values <- replicate(n_simulations, {
# Simulate data
data <- simulate_data(n)
# Fit the LGM model
fit <- lavaan::sem(lgm_model, data = data)
# Extract p-value for the predictor effect on the slope
p_val <- summary(fit)$pe[which(summary(fit)$pe$lhs == "s" & summary(fit)$pe$op == "~"), "pvalue"]
# Check if significant
p_val < alpha_level
})
# Calculate power
power <- mean(p_values)
results <- rbind(results, data.frame(sample_size = n, power = power))
cat("Sample size:", n, " - Power:", power, "\n")  # Progress tracking
}
sample_sizes <- seq(50, 100, 500, by = 50)  # Range of sample sizes to test
for (n in sample_sizes) {
p_values <- replicate(n_simulations, {
# Simulate data
data <- simulate_data(n)
# Fit the LGM model
fit <- lavaan::sem(lgm_model, data = data)
# Extract p-value for the predictor effect on the slope
p_val <- summary(fit)$pe[which(summary(fit)$pe$lhs == "s" & summary(fit)$pe$op == "~"), "pvalue"]
# Check if significant
p_val < alpha_level
})
# Calculate power
power <- mean(p_values)
results <- rbind(results, data.frame(sample_size = n, power = power))
cat("Sample size:", n, " - Power:", power, "\n")  # Progress tracking
}
sample_sizes <- seq(50, 500, by = 50)  # Range of sample sizes to test
results <- data.frame(sample_size = integer(), power = numeric())
for (n in sample_sizes) {
p_values <- replicate(n_simulations, {
# Simulate data
data <- simulate_data(n)
# Fit the LGM model
fit <- lavaan::sem(lgm_model, data = data)
# Extract p-value for the predictor effect on the slope
p_val <- summary(fit)$pe[which(summary(fit)$pe$lhs == "s" & summary(fit)$pe$op == "~"), "pvalue"]
# Check if significant
p_val < alpha_level
})
# Calculate power
power <- mean(p_values)
results <- rbind(results, data.frame(sample_size = n, power = power))
cat("Sample size:", n, " - Power:", power, "\n")  # Progress tracking
}
library(tidyverse)
library(magrittr)
library(patchwork)
require(data.table)
library(purrr)
library(ggsignif)
library(ggpubr)
library(reshape2)
library(lme4)
library(lmerTest)
library(emmeans)
library(performance)
## Acquire list of filenames with speed data in your folder ##
folder_path <- "~/salp_ecomorphology/EventMeasure_TXT_FINAL/"
list_csv_files <- list.files(path = folder_path, pattern = "\\.TXT$", full.names = T)
#change path to the folder where you store them
df_list <- map_dfr(list_csv_files, function(file_path) {
# Read the CSV file skipping the first 4 rows
df <- read.csv(file_path, sep = '\t', header = TRUE, stringsAsFactors = FALSE, skip = 4,fill = TRUE, check.names = FALSE)[,c(1:3,6:8,12:13,31)]
df <- filter(df, `RMS (mm)`< 2)
df <- df[,c(-7,-8)]
df$Number <- as.character(df$Number)
# Extract the file name without extension
file_name <- tools::file_path_sans_ext(basename(file_path))
# Add a new column "Filename" with the file name
df <- mutate(df, Filename = file_name)
return(df)
})
# added an RMS cutoff of 750
## Identify the junk particle rows by the zooid number zero AND chop off the columns that are not useful ##
df_list %>% filter(Number %in% c("0","1")) %>%
mutate(is_junk = (Number=="0") == FALSE) -> keyvars #is_junk identifies the "junk" reference particle
## Make a tidy data frame by splitting the data into zooid and junk rows and then full-joining them side by side ##
tidy <- full_join(group_split(keyvars, is_junk)[[1]][,1:7],
group_split(keyvars, is_junk)[[2]][,1:7],
by=c("Filename","Frame","Time (mins)"),
suffix= c("Zooid","Junk")) %>% as.data.frame() %>% .[,c(-7,-11)]
## Define a function to calculate time lags between rows to get the delta of time between measures,
## get the vectors between the zooid and the junk particle,
## calculate XYZ components of the distance,
## use pythagoras to estimate the hypothenuse and divide by the delta of time
wrangle <- function(df){
df %>% arrange(Frame) %>%
mutate(Delta_time_s = (`Time (mins)` - lag(`Time (mins)`, default = first(`Time (mins)`)))*60) %>%
mutate(Xd_mm = `X (mm)Zooid` - `X (mm)Junk`, Yd_mm = `Y (mm)Zooid` - `Y (mm)Junk`, Zd_mm =  `Z (mm)Zooid` - `Z (mm)Junk`) %>%
mutate(Delta_X_mm = Xd_mm - lag(Xd_mm, default = first(Xd_mm)),
Delta_Y_mm = Yd_mm - lag(Yd_mm, default = first(Yd_mm)),
Delta_Z_mm = Zd_mm - lag(Zd_mm, default = first(Zd_mm))) %>%
mutate(Distance_mm = sqrt(Delta_X_mm^2 + Delta_Y_mm^2 + Delta_Z_mm^2)) %>%
mutate(Speed_mm_s = Distance_mm/Delta_time_s) %>% filter(Speed_mm_s>0) %>% return()
}
## Run the 3D wrangle function for the first (frontal) zooid ##
speed_data <- group_split(tidy, Filename) %>% lapply(wrangle) %>% do.call(rbind, .) %>% as.data.frame()
## 2D data ##
list_2D_files <- list.files(path = "~/salp_ecomorphology/Speeds2D_csv_FINAL/")
setwd("~/salp_ecomorphology/Speeds2D_csv_FINAL/")
df2d = do.call(dplyr::bind_rows, lapply(list_2D_files, function(x){
tb <- read.csv(x, sep=',', header = T, stringsAsFactors = F)
tb$Filename <- basename(x)
tb <- dplyr::mutate(tb, is_junk = (X.1 %% 2))
return(tb)
}))
keyvars2D <-df2d[order(df2d$Slice),c(6,7,11:13)]
#is_junk identifies the "junk" reference particle
tidy2D <- full_join(dplyr::group_split(keyvars2D, is_junk)[[1]][,1:4],
dplyr::group_split(keyvars2D, is_junk)[[2]][,1:4],
by=c("Filename","Slice"),
suffix= c("Zooid","Junk")) %>%
as.data.frame()
names(tidy2D)[3]<-"Frame"
tidy2D <- tidy2D[order(tidy2D$Filename),c(4,3,1,2,5,6)]
#fps = 30
inventory2D <- read.csv("~/salp_ecomorphology/Inventory_FINAL.csv") %>%
dplyr::filter(!is.na(FPS)) %>%
.[,c("Video.name..or.master..or.left.","Species","Architecture","FPS","Zooid.number")]
names(inventory2D)[1] <- "Filename"
tidy2D$Filename <- str_replace_all(tidy2D$Filename, ".csv", "")
inventory2D$Filename <- str_replace_all(inventory2D$Filename, ".mp4", "")
dplyr::left_join(tidy2D, inventory2D[,c(1,4)], by = "Filename") -> tidy2D
wrangle2D <- function(df){
df %>% mutate(Delta_time_s = (Frame - lag(Frame, default = first(Frame)))/FPS) %>%
mutate(Xd_mm = XZooid - XJunk, Yd_mm = YZooid - YJunk) %>%
mutate(Delta_X_mm = Xd_mm - lag(Xd_mm, default = first(Xd_mm)),
Delta_Y_mm = Yd_mm - lag(Yd_mm, default = first(Yd_mm))) %>%
mutate(Distance_mm = sqrt(Delta_X_mm^2 + Delta_Y_mm^2)) %>%
mutate(Speed_mm_s = Distance_mm/Delta_time_s) %>% return()
}
speed_data2d <- group_split(tidy2D, Filename) %>% lapply(wrangle2D) %>% do.call(rbind, .) %>% as.data.frame()
left_join(speed_data2d, inventory2D[,c(1:3,5)], by = "Filename") %>% filter(!is.na(Speed_mm_s)) -> speed_data2d
## Get video inventory metadata and match it by file name to the speeds to obtain: Species, Architecture, & Number of zooids ##
inventory <- read.csv("~/salp_ecomorphology/Inventory_FINAL.csv", header = T, stringsAsFactors = F) #change path to where you saved it
names(inventory)[3] <- "Filename"
inventory$Species %>% str_replace_all("Iasis cylindrica \\(yellowtail\\)","Iasis cylindrica") -> inventory$Species
inventory$Species %>% str_replace_all("Metcalfina hexagona\\?","Metcalfina hexagona") -> inventory$Species
inventory$Species %>% str_replace_all("Soestia zonaria\\?","Soestia zonaria") -> inventory$Species
inventory$Species %>% str_replace_all("cf. ","") -> inventory$Species
inventory_clean <- inventory[,c(3,5,6,7,15)] #Keeping columns: filename, species, architecture, number of zooids,FPS
## Full join speeds with inventory metadata ##
speed_annotated <- full_join(speed_data, inventory_clean, by = "Filename" ) %>%
filter(Speed_mm_s != Inf) %>% filter(Species != "NA") %>%
mutate(Speed_mms_abs = abs(Speed_mm_s)) #transform negative vectorial speeds into absolute scalars
## Load morphometrics data ##
mm <- read.csv("~/salp_ecomorphology/Morphometrics_FINAL.csv", header = T, stringsAsFactors = F) #change path to your file
mm <- mm[,c(1,11:14,17:19)]
names(mm)[1] <- "Filename"
coalesce_by_column <- function(df) {
return(dplyr::coalesce(!!! as.list(df)))
}
mm %>% group_by(Filename) %>% summarise_all(coalesce_by_column) -> mm
mm <- filter(mm, Filename != "")
##Merge 2D and 3D data
names(speed_data2d)[3:6] <- c("X..mm.Zooid", "Y..mm.Zooid", "X..mm.Junk", "Y..mm.Junk")
mutate(speed_data2d, Speed_mms_abs = abs(Speed_mm_s))->speed_data2d
bind_rows(speed_annotated, speed_data2d) -> speed_annotated
## Full-join morphometrics annotations to the speeds ##
speed_annotated <- full_join(speed_annotated, mm, by = "Filename")
## Load pulsation rates ##
pulsation <- read.csv("~/salp_ecomorphology/Pulsation_FINAL.csv", header = T, stringsAsFactors = F) #change path to your file
pulsation <- pulsation[,c(1,16)]
names(pulsation) <- c("Filename", "Pulses_per_second")
pulsation$Filename %>% str_remove_all(".mp4") -> pulsation$Filename
## Full join pulsation rates to the speeds ##
speed_annotated <- full_join(speed_annotated, pulsation, by = "Filename" )
## Estimate normalized speed in body_lengths per pulse ##
speed_annotated <- mutate(speed_annotated, BLperSecond = Speed_mms_abs/Zooid_length_mm )
speed_annotated <- mutate(speed_annotated, BLperPulse = BLperSecond/Pulses_per_second )
## Collapse into the mean per specimen
speed_annotated[,c(1,18:21,23,29:37)] %>% unique() -> speed_collapsed
speed_collapsed %>% group_by(Filename, Species, Architecture) %>%
summarise(across(.cols = c(Speed_mm_s, Zooid.number, Speed_mms_abs, Zooid_length_mm, Pulses_per_second, BLperSecond, BLperPulse),
~ mean(., na.rm = TRUE))) %>% filter(!is.na(Species)) %>% as.data.frame() -> speed_collapsed
## Plot
#KAW
### FIG 2A ###
architecture_order <- c("Transversal", "Oblique", "Linear", "Bipinnate", "Helical", "Whorl", "Cluster")
F2A <- speed_annotated %>% filter(!is.na(Species) & Architecture != "Whorl chain") %>%
ggplot(aes(x = factor(Species %>% as.character(), levels = unique(Species[order(factor(Architecture, levels = architecture_order))])),
y=Speed_mms_abs)) + geom_boxplot(aes(fill=Architecture)) + geom_jitter(alpha=0.2,aes(color=Architecture)) +guides(fill = "none") +
scale_fill_manual(values = c("Transversal" = "green4", "Oblique" = "red1", "Linear" = "darkorange1",
"Bipinnate" = "cyan4", "Helical" = "gold1", "Whorl" = "darkorchid4",
"Cluster" = "magenta")) +
scale_color_manual(values = c("Transversal" = "green4", "Oblique" = "red1", "Linear" = "darkorange1",
"Bipinnate" = "cyan4", "Helical" = "gold1", "Whorl" = "darkorchid4",
"Cluster" = "magenta")) +
ylab("Speed (mm/s)") + xlab("Species")+
theme_bw()+theme(axis.text.x = element_text(angle = 90, hjust=1,vjust=1))+ guides(fill = "none", color="none")
### FIG 2B ###
F2B <- speed_annotated %>% filter(!is.na(Species) & !is.na(BLperPulse) & Architecture != "Whorl chain") %>%
ggplot(aes(x = factor(Species %>% as.character(), levels = unique(Species[order(factor(Architecture, levels = architecture_order))])),
y=BLperPulse)) + geom_boxplot(aes(fill=Architecture)) + geom_jitter(alpha=0.2,aes(color=Architecture)) +guides(fill = "none") +
scale_fill_manual(values = c("Transversal" = "green4", "Oblique" = "red1", "Linear" = "darkorange1",
"Bipinnate" = "cyan4", "Helical" = "gold1", "Whorl" = "darkorchid4",
"Cluster" = "magenta")) +
scale_color_manual(values = c("Transversal" = "green4", "Oblique" = "red1", "Linear" = "darkorange1",
"Bipinnate" = "cyan4", "Helical" = "gold1", "Whorl" = "darkorchid4",
"Cluster" = "magenta")) + guides("none")+
theme(axis.text.x = element_text(angle = 90)) + ylab("Speed (zooid lengths/pulse)") +
xlab("Species") +theme_bw()+theme(axis.text.x = element_text(angle = 90, hjust=1))+ guides(fill = "none", color="none")
###############
### FIG 2C ###
F2C <- speed_annotated %>% filter(!is.na(Architecture) & Architecture != "Whorl chain") %>%
ggplot(aes(x=Architecture, y=Speed_mms_abs)) + geom_boxplot(aes(fill=Architecture)) +
geom_jitter(alpha=0.2,aes(color=Architecture)) +guides(fill = "none") +
scale_fill_manual(values = c("Transversal" = "green4", "Oblique" = "red1", "Linear" = "darkorange1",
"Bipinnate" = "cyan4", "Helical" = "gold1", "Whorl" = "darkorchid4",
"Cluster" = "magenta")) +
scale_color_manual(values = c("Transversal" = "green4", "Oblique" = "red1", "Linear" = "darkorange1",
"Bipinnate" = "cyan4", "Helical" = "gold1", "Whorl" = "darkorchid4",
"Cluster" = "magenta")) + theme_bw()+
theme(axis.text.x = element_text(angle = 90, hjust=1)) + ylab("Speed (mm/s)")+ guides(fill = "none", color="none")
fixed_model <- lm(Speed_mms_abs ~ Pulses_per_second, data = speed_annotated)
mixed_model <- lmer(Speed_mms_abs ~ Pulses_per_second + (1 | Species/Filename), data = speed_annotated)
species_model <- lmer(Speed_mms_abs ~ Pulses_per_second + (1 | Species), data = speed_annotated)
specimen_model <- lmer(Speed_mms_abs ~ Pulses_per_second + (1 | Filename), data = speed_annotated)
AIC(fixed_model, mixed_model, species_model, specimen_model)
fixed_model <- lm(BLperSecond ~ Pulses_per_second, data = speed_annotated)
mixed_model <- lmer(BLperSecond ~ Pulses_per_second + (1 | Species/Filename), data = speed_annotated)
species_model <- lmer(BLperSecond ~ Pulses_per_second + (1 | Species), data = speed_annotated)
specimen_model <- lmer(BLperSecond ~ Pulses_per_second + (1 | Filename), data = speed_annotated)
AIC(fixed_model, mixed_model, species_model, specimen_model)
