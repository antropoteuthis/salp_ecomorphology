mm <- mm[,c(1,11:14,17:19)]
names(mm)[1] <- "Filename"
coalesce_by_column <- function(df) {
return(dplyr::coalesce(!!! as.list(df)))
}
mm %>% group_by(Filename) %>% summarise_all(coalesce_by_column) -> mm
mm <- filter(mm, Filename != "")
## Full-join morphometrics annotations to the speeds ##
speed_annotated <- full_join(speed_annotated, mm, by = "Filename")
## Load pulsation rates ##
pulsation <- read.csv("../PulsationRates_Oct16_23.tsv", sep='\t', header = T, stringsAsFactors = F) #change path to your file
pulsation <- pulsation[,c(1,16)]
names(pulsation) <- c("Filename", "Pulses_per_second")
## Full join pulsation rates to the speeds ##
speed_annotated <- full_join(speed_annotated, pulsation, by = "Filename" )
## Estimate normalized speed in body_lengths per pulse ##
speed_annotated <- mutate(speed_annotated, BLperSecond = Speed_mms_abs/Zooid_length_mm )
speed_annotated <- mutate(speed_annotated, BLperPulse = BLperSecond/Pulses_per_second )
## Collapse into the mean per specimen
speed_annotated[,c(1,19:22,24:34)] %>% unique() -> speed_collapsed
speed_collapsed %>% group_by(Filename, Species, Architecture) %>%
summarise(across(.cols = c(Speed_mm_s, Zooid.number, Speed_mms_abs, Zooid_length_mm, Pulses_per_second, BLperSecond, BLperPulse),
~ mean(., na.rm = TRUE))) %>% filter(!is.na(Species)) %>% as.data.frame() -> speed_collapsed
speed_collapsed %>% filter(!is.na(Species)) %>%  ggplot(aes(x=Species, y=Speed_mms_abs)) + geom_boxplot(aes(fill=Architecture))+
theme_bw()+theme(axis.text.x = element_text(angle = 90)) + ylab("Speed (mm/s)")
speed_collapsed %>% filter(!is.na(Species)) %>%  ggplot(aes(x=Species, y=BLperPulse)) + geom_boxplot(aes(fill=Architecture))+
theme_bw()+theme(axis.text.x = element_text(angle = 90)) + ylab("Speed (body lengths/pulsation)")
speed_collapsed %>% filter(!is.na(Architecture)) %>%  ggplot(aes(x=Architecture, y=BLperPulse)) + geom_boxplot(aes(fill=Architecture))+
theme_bw()+theme(axis.text.x = element_text(angle = 90)) + ylab("Speed (body lengths/pulsation)")
speed_collapsed %>% filter(!is.na(Architecture)) %>%  ggplot(aes(x=Architecture, y=BLperPulse)) + geom_boxplot(aes(fill=Architecture))+
theme_bw()+theme(axis.text.x = element_text(angle = 90)) + ylab("Speed (body lengths/pulsation)")+geom_text(label=.~Species)
speed_collapsed %>% filter(!is.na(Architecture)) %>%  ggplot(aes(x=Architecture, y=BLperPulse)) + geom_boxplot(aes(fill=Architecture))+
theme_bw()+theme(axis.text.x = element_text(angle = 90)) + ylab("Speed (body lengths/pulsation)")+geom_text(label= speed_collapsed %>% filter(!is.na(Architecture)) %>% .$Species)
swim <- read.csv("SalpPreliminaryPass.tsv",sep='\t', stringsAsFactors = F)
setwd("~/salp_ecomorphology/")
swim <- read.csv("SalpPreliminaryPass.tsv",sep='\t', stringsAsFactors = F)
View(swim)
swim[,c(1,2,15,17,18)]
swim[,c(1,2,15,17,18,26)]->prelim
View(speed_collapsed)
prelim %>% head()
mutate(prelim, Speed_mm_s = Speed..cm.s.*10)
mutate(prelim, Speed_mm_s = Speed..cm.s.*10)->prelim
names(prelim)
names(prelim)[6]
names(prelim)[6]<-"Filename"
names(prelim)[4]<-"Zooid.number"
names(prelim)[5]<-"BLperSecond"
View(swim)
View(prelim)
newdata = speed_collapsed[,c(2,3,5,9,1)]
newdata
newdata = speed_collapsed[,c(2,3,5,9,1,4)]
newdata
prelim=prelim[,-3]
prelim
rbind(prelim, newdata)
rbind(prelim, newdata)->combo
combo %>%  ggplot(aes(x=Species, y=BLperSecond)) + geom_boxplot(aes(fill=Architecture))+
theme_bw()+theme(axis.text.x = element_text(angle = 90)) + ylab("Speed (body lengths/s)")
combo %>%  ggplot(aes(x=Architecture, y=BLperSecond)) + geom_boxplot(aes(fill=Architecture))+
theme_bw()+theme(axis.text.x = element_text(angle = 90)) + ylab("Speed (body lengths/s)")
combo %>% filter(Architecture != "Whorl chain") %>%  ggplot(aes(x=Architecture, y=BLperSecond)) + geom_boxplot(aes(fill=Architecture))+
theme_bw()+theme(axis.text.x = element_text(angle = 90)) + ylab("Speed (body lengths/s)")
combo %>% filter(Architecture != "Whorl chain") %>%  ggplot(aes(x=Architecture, y=BLperSecond)) + geom_violin(aes(fill=Architecture))+
theme_bw()+theme(axis.text.x = element_text(angle = 90)) + ylab("Speed (body lengths/s)")
combo %>% filter(Architecture != "Whorl chain") %>%  ggplot(aes(x=Architecture, y=BLperSecond)) + geom_violin(aes(fill=Architecture))+
theme_bw()+theme(axis.text.x = element_text(angle = 90)) + ylab("Speed (body lengths/s)") + geom_text(combo %>% filter(Architecture != "Whorl chain") %>% .$Species)
combo %>% filter(Architecture != "Whorl chain") %>%  ggplot(aes(x=Architecture, y=BLperSecond)) + geom_violin(aes(fill=Architecture))+
theme_bw()+theme(axis.text.x = element_text(angle = 90)) + ylab("Speed (body lengths/s)") + geom_text(label = combo %>% filter(Architecture != "Whorl chain") %>% .$Species)
combo %>% head()
combo[,-5]
combo[,-5]->combo_sp
combo_sp %>% group_by("Species")
combo_sp %>% group_by(Species)
combo_sp %>% group_by(Species) %>% summarise_all()
combo_sp %>% group_by(Species) %>% summarise_all(mean)
combo_sp %>% group_by(Species) %>% summarise(Species+Ar, mean)
combo_sp %>% group_by(Species, Architecture) %>% summarise_all(mean)
combo_sp %>% group_by(Species, Architecture) %>% summarise_all(function(z){mean(z, na.rm = T)})
combo_sp %>% group_by(Species, Architecture) %>% summarise_all(function(z){mean(z, na.rm = T)}) -> combo_sp
combo %>% filter(Architecture != "Whorl chain") %>%  ggplot(aes(x=Architecture, y=BLperSecond)) + geom_violin(aes(fill=Architecture))+
theme_bw()+theme(axis.text.x = element_text(angle = 90)) + ylab("Speed (body lengths/s)") + geom_text(label = combo %>% filter(Architecture != "Whorl chain") %>% .$Species)
combo %>% filter(Architecture != "Whorl chain") %>%  ggplot(aes(x=Architecture, y=BLperSecond)) + geom_boxplot(aes(fill=Architecture))+
theme_bw()+theme(axis.text.x = element_text(angle = 90)) + ylab("Speed (body lengths/s)") #+ geom_text(label = combo %>% filter(Architecture != "Whorl chain") %>% .$Species)
combo_sp %>% filter(Architecture != "Whorl chain") %>%  ggplot(aes(x=Architecture, y=BLperSecond)) + geom_boxplot(aes(fill=Architecture))+
theme_bw()+theme(axis.text.x = element_text(angle = 90)) + ylab("Speed (body lengths/s)") #+ geom_text(label = combo %>% filter(Architecture != "Whorl chain") %>% .$Species)
combo_sp %>% filter(Architecture != "Whorl chain") %>%  ggplot(aes(x=Architecture, y=BLperSecond)) + geom_boxplot(aes(fill=Architecture))+
theme_bw()+theme(axis.text.x = element_text(angle = 90)) + ylab("Speed (body lengths/s)") + geom_text(label = combo_sp %>% filter(Architecture != "Whorl chain") %>% .$Species)
combo_sp %>% filter(Architecture != "Whorl chain") %>%  ggplot(aes(x=Architecture, y=BLperSecond)) + geom_violin(aes(fill=Architecture))+
theme_bw()+theme(axis.text.x = element_text(angle = 90)) + ylab("Speed (body lengths/s)") + geom_text(label = combo_sp %>% filter(Architecture != "Whorl chain") %>% .$Species)
combo_sp %>% filter(Architecture != "Whorl chain") %>%  ggplot(aes(x=Architecture, y=BLperSecond)) + geom_violin(aes(fill=Architecture))+
theme_bw()+theme(axis.text.x = element_text(angle = 90)) + ylab("Speed (body lengths/s)") + geom_text(label = combo_sp %>% filter(Architecture != "Whorl chain") %>% .$Species)+scale_fill_manual(cols=c("orange", "green", "blue", "lightblue", "cyan", "magenta", "limegreen"))
combo_sp %>% filter(Architecture != "Whorl chain") %>%  ggplot(aes(x=Architecture, y=BLperSecond)) + geom_violin(aes(fill=Architecture))+
theme_bw()+theme(axis.text.x = element_text(angle = 90)) + ylab("Speed (body lengths/s)") + geom_text(label = combo_sp %>% filter(Architecture != "Whorl chain") %>% .$Species)+scale_fill_manual(c("orange", "green", "blue", "lightblue", "cyan", "magenta", "limegreen"))
combo_sp %>% filter(Architecture != "Whorl chain") %>%  ggplot(aes(x=Architecture, y=BLperSecond)) + geom_violin(aes(fill=Architecture))+
theme_bw()+theme(axis.text.x = element_text(angle = 90)) + ylab("Speed (body lengths/s)") + geom_text(label = combo_sp %>% filter(Architecture != "Whorl chain") %>% .$Species)+scale_fill_manual(values=c("orange", "green", "blue", "lightblue", "cyan", "magenta", "limegreen"))
combo_sp %>% filter(Architecture != "Whorl chain") %>%  ggplot(aes(x=Architecture, y=BLperSecond)) + geom_violin(aes(fill=Architecture))+
theme_bw()+theme(axis.text.x = element_text(angle = 90)) + ylab("Speed (body lengths/s)") + geom_text(label = combo_sp %>% filter(Architecture != "Whorl chain") %>% .$Species)+scale_fill_manual(values=c("turquoise", "magenta", "gold", "orange", "red", "green", "purple"))
combo_sp %>% filter(Architecture != "Whorl chain") %>%  ggplot(aes(x=Architecture, y=BLperSecond)) + geom_violin(aes(fill=Architecture))+
theme_bw()+theme(axis.text.x = element_text(angle = 90)) + ylab("Speed (body lengths/s)") + geom_text(label = combo_sp %>% filter(Architecture != "Whorl chain") %>% .$Species)+scale_fill_manual(values=c("blue", "magenta", "gold", "orange", "red", "green", "purple"))
combo_sp %>% filter(Architecture != "Whorl chain") %>%  ggplot(aes(x=Architecture, y=BLperSecond)) + geom_violin(aes(fill=Architecture))+
theme_bw()+theme(axis.text.x = element_text(angle = 90)) + ylab("Speed (body lengths/s)") + geom_text(label = combo_sp %>% filter(Architecture != "Whorl chain") %>% .$Species)+scale_fill_manual(values=c("skyblue", "magenta", "gold", "orange", "red", "green", "purple"))
combo_sp %>% filter(Architecture != "Whorl chain") %>%  ggplot(aes(x=Architecture, y=Speed_mm_s)) + geom_violin(aes(fill=Architecture))+
theme_bw()+theme(axis.text.x = element_text(angle = 90)) + ylab("Speed (body lengths/s)") + geom_text(label = combo_sp %>% filter(Architecture != "Whorl chain") %>% .$Species)+scale_fill_manual(values=c("skyblue", "magenta", "gold", "orange", "red", "green", "purple"))
# Create the ggplot
ggplot(data = speed_collapsed %>% filter(!is.na(Species)), aes(x = Pulses_per_second, y = Speed_mms_abs)) +
geom_point(aes(col = Architecture), na.rm = TRUE) +  # Add na.rm = TRUE to remove missing values
lapply(architectures, function(arch) {
geom_smooth(
method = "glm",
formula = y ~ x,
data = speed_collapsed %>% filter(Architecture == arch),
col=ifelse(arch=="Linear", "green", ifelse(arch=="Transversal", "blue", ifelse(arch=="Whorl", "purple", ifelse(arch=="Cluster", "brown", ifelse(arch=="Bipinnate", "magenta", "grey")))))
)
}) +
ylim(0,150)+
theme_bw()
# List of Architectures
architectures <- c("Linear", "Transversal", "Cluster", "Whorl", "Bipinnate")
# Fit GLM models for each Architecture
for (arch in architectures) {
model <- glm(Speed_mms_abs ~ Pulses_per_second, data = speed_collapsed %>% filter(Architecture == arch), family = gaussian(link = "identity"))
model_list[[arch]] <- model
}
# Create the ggplot
ggplot(data = speed_collapsed %>% filter(!is.na(Species)), aes(x = Pulses_per_second, y = Speed_mms_abs)) +
geom_point(aes(col = Architecture), na.rm = TRUE) +  # Add na.rm = TRUE to remove missing values
lapply(architectures, function(arch) {
geom_smooth(
method = "glm",
formula = y ~ x,
data = speed_collapsed %>% filter(Architecture == arch),
col=ifelse(arch=="Linear", "green", ifelse(arch=="Transversal", "blue", ifelse(arch=="Whorl", "purple", ifelse(arch=="Cluster", "brown", ifelse(arch=="Bipinnate", "magenta", "grey")))))
)
}) +
ylim(0,150)+
theme_bw()
# Fit GLM models for each Species
for (sp in species) {
model <- glm(Speed_mms_abs ~ Pulses_per_second, data = speed_collapsed %>% filter(Species == sp), family = gaussian(link = "identity"))
model_list[[sp]] <- model
}
# List of Architectures
species <- unique(speed_collapsed$Species)
# Fit GLM models for each Species
for (sp in species) {
model <- glm(Speed_mms_abs ~ Pulses_per_second, data = speed_collapsed %>% filter(Species == sp), family = gaussian(link = "identity"))
model_list[[sp]] <- model
}
# Create the ggplot
ggplot(data = speed_collapsed %>% filter(!is.na(Species)), aes(x = Pulses_per_second, y = Speed_mms_abs)) +
geom_point(aes(col = Species), na.rm = TRUE) +  # Add na.rm = TRUE to remove missing values
lapply(species, function(sp) {
geom_smooth(
method = "glm",
formula = y ~ x,
data = speed_collapsed %>% filter(Species == sp))
}) +
ylim(0,150)+
theme_bw()
speed_collapsed %>%
filter(!is.na(Species) & Architecture != "Whorl chain") %>% mutate(CSAmode = case_when(
Architecture %in% c("Transversal", "Cluster", "Whorl") ~ "CSA_Scaling",
Architecture %in% c("Linear", "Bipinnate") ~ "CSA_Constant",
TRUE ~ as.character(Architecture)
)) %>%
group_by(CSAmode) %>%
ggplot(aes(Zooid.number, BLperPulse)) +
geom_point(aes(col=Architecture)) +
scale_color_manual(values=c("red","blue","green","brown","purple"))+
geom_smooth(method = 'lm', se = TRUE) +  # Add regression line
theme_bw() +
ylim(c(0,NA))+
ylab("Speed (Body lengths per pulse)")+
xlab("Number of zooids")+
facet_wrap(~CSAmode, scales = "free_x")
combo %>%
filter(!is.na(Species) & Architecture != "Whorl chain") %>% mutate(CSAmode = case_when(
Architecture %in% c("Transversal", "Cluster", "Whorl") ~ "CSA_Scaling",
Architecture %in% c("Linear", "Bipinnate") ~ "CSA_Constant",
TRUE ~ as.character(Architecture)
)) %>%
group_by(CSAmode) %>%
ggplot(aes(Zooid.number, BLperPulse)) +
geom_point(aes(col=Architecture)) +
scale_color_manual(values=c("red","blue","green","brown","purple"))+
geom_smooth(method = 'lm', se = TRUE) +  # Add regression line
theme_bw() +
ylim(c(0,NA))+
ylab("Speed (Body lengths per pulse)")+
xlab("Number of zooids")+
facet_wrap(~CSAmode, scales = "free_x")
combo %>%
filter(!is.na(Species) & Architecture != "Whorl chain") %>% mutate(CSAmode = case_when(
Architecture %in% c("Transversal", "Cluster", "Whorl") ~ "CSA_Scaling",
Architecture %in% c("Linear", "Bipinnate") ~ "CSA_Constant",
TRUE ~ as.character(Architecture)
)) %>%
group_by(CSAmode) %>%
ggplot(aes(Zooid.number, BLperSecond)) +
geom_point(aes(col=Architecture)) +
scale_color_manual(values=c("red","blue","green","brown","purple"))+
geom_smooth(method = 'lm', se = TRUE) +  # Add regression line
theme_bw() +
ylim(c(0,NA))+
ylab("Speed (Body lengths per pulse)")+
xlab("Number of zooids")+
facet_wrap(~CSAmode, scales = "free_x")
combo %>%
filter(!is.na(Species) & Architecture != "Whorl chain") %>% mutate(CSAmode = case_when(
Architecture %in% c("Transversal", "Cluster", "Whorl") ~ "CSA_Scaling",
Architecture %in% c("Linear", "Bipinnate") ~ "CSA_Constant",
TRUE ~ as.character(Architecture)
)) %>%
group_by(CSAmode) %>%
ggplot(aes(Zooid.number, BLperSecond)) +
geom_point(aes(col=Architecture)) +
#scale_color_manual(values=c("red","blue","green","brown","purple"))+
geom_smooth(method = 'lm', se = TRUE) +  # Add regression line
theme_bw() +
ylim(c(0,NA))+
ylab("Speed (Body lengths per pulse)")+
xlab("Number of zooids")+
facet_wrap(~CSAmode, scales = "free_x")
combo %>%
filter(!is.na(Species) & Architecture != "Whorl chain") %>% mutate(CSAmode = case_when(
Architecture %in% c("Transversal", "Cluster", "Whorl", "Oblique") ~ "CSA_Scaling",
Architecture %in% c("Linear", "Bipinnate", "Helical") ~ "CSA_Constant",
TRUE ~ as.character(Architecture)
)) %>%
group_by(CSAmode) %>%
ggplot(aes(Zooid.number, BLperSecond)) +
geom_point(aes(col=Architecture)) +
#scale_color_manual(values=c("red","blue","green","brown","purple"))+
geom_smooth(method = 'lm', se = TRUE) +  # Add regression line
theme_bw() +
ylim(c(0,NA))+
ylab("Speed (Body lengths per pulse)")+
xlab("Number of zooids")+
facet_wrap(~CSAmode, scales = "free_x")
speed_collapsed %>% filter(!is.na(Species) & Architecture != "Whorl chain") %>% group_by(Architecture) %>%
ggplot(aes(Zooid.number, BLperPulse)) + geom_point()+
theme_bw()+facet_wrap(~Architecture, scales="free")
combo %>% filter(!is.na(Species) & Architecture != "Whorl chain") %>% group_by(Architecture) %>%
ggplot(aes(Zooid.number, BLperPulse)) + geom_point()+
theme_bw()+facet_wrap(~Architecture, scales="free")
combo %>% filter(!is.na(Species) & Architecture != "Whorl chain") %>% group_by(Architecture) %>%
ggplot(aes(Zooid.number, BLperSecond)) + geom_point()+
theme_bw()+facet_wrap(~Architecture, scales="free")
glm(Speed_mms_abs ~ Zooid_length_mm + Pulses_per_second + Zooid.number, data=speed_groupedArch %>% filter(Architecture=="Linear")) %>% summary()
speed_collapsed %>%
filter(!is.na(Species) & Architecture != "Whorl chain") %>% mutate(CSAmode = case_when(
Architecture %in% c("Transversal", "Cluster", "Whorl") ~ "CSA_Scaling",
Architecture %in% c("Linear", "Bipinnate") ~ "CSA_Constant",
TRUE ~ as.character(Architecture)
)) -> speed_groupedArch
glm(Speed_mms_abs ~ Zooid_length_mm + Pulses_per_second + Zooid.number + CSAmode, data=speed_groupedArch) %>% summary() #significant
glm(Speed_mms_abs ~ Zooid_length_mm + Pulses_per_second + Zooid.number * CSAmode, data=speed_groupedArch) %>% summary()
glm(Speed_mms_abs ~ Zooid_length_mm + Zooid.number:CSAmode, data=speed_groupedArch) %>% summary()
glm(Speed_mms_abs ~ Pulses_per_second + Zooid.number:CSAmode, data=speed_groupedArch) %>% summary()
glm(Speed_mms_abs ~ Zooid_length_mm + Pulses_per_second + Zooid.number, data=speed_groupedArch %>% filter(Architecture=="Linear")) %>% summary()
glm(Speed_mms_abs ~ Zooid_length_mm + Pulses_per_second + Zooid.number, data=speed_groupedArch %>% filter(Architecture=="Cluster")) %>% summary()
glm(Speed_mms_abs ~ Zooid_length_mm + Pulses_per_second + Zooid.number, data=speed_groupedArch %>% filter(Architecture=="Bipinnate")) %>% summary()
glm(Speed_mms_abs ~ Pulses_per_second + Zooid.number, data=speed_groupedArch %>% filter(Architecture=="Whorl")) %>% summary()
library(caret)
speed_collapsed %>%
filter(!is.na(Species) & Architecture != "Whorl chain") -> speed_filtered
for(a in unique(speed_filtered$Architecture)){
speed_a <- filter(speed_filtered, Architecture == a)
print(a)
glm(BLperPulse ~ Zooid.number, data = speed_a) %>% summary() %>% .$coefficients %>% .[1,4] %>% print()
}
mean_BL <- speed_collapsed %>% group_by(Species) %>% mutate(mean(BLperPulse, na.rm=T))
names(mean_BL)[11] <- "meanBLperPulse"
mean_BL %>% filter(!is.na(Species) & Architecture != "Whorl chain" & !is.nan(BLperPulse)) %>% group_by(Architecture) %>%
ggplot(aes(Species, BLperPulse/Zooid.number)) +
geom_boxplot(aes(fill=meanBLperPulse), na.rm=T)+
theme_bw()+
ylab("Speed (Body lengths per pulse) / Zooid number")+
theme(axis.text.x = element_text(angle = 90))+
facet_wrap(~Architecture, scales="free_x", ncol=5)
46.18+48.74+40.13+28.39+38.88+13.99+1.43+13.23+51.06+57.33
list_2D_files <- list.files(path = "Speeds2D_partial0108/")
setwd("Speeds2D_partial0108")
library(caret)
df2d = do.call(rbind, lapply(list_2D_files, function(x) read.csv(x, sep=',', header = T, stringsAsFactors = F)))
df2d = do.call(rbind, lapply(list_2D_files, function(x) read.csv(x, sep=',', header = F, skip=1, stringsAsFactors = F)))
lapply(list_2D_files, function(x) read.csv(x, sep=',', header = F, skip=1, stringsAsFactors = F))
lapply(list_2D_files, function(x) read.csv(x, sep=',', header = T, stringsAsFactors = F))
library(tidyverse)
library(magrittr)
library(patchwork)
require(data.table)
dplyr::bind_rows()
df2d = do.call(dplyr::bind_rows, lapply(list_2D_files, function(x) read.csv(x, sep=',', header = T, stringsAsFactors = F)))
df2d
cbind(df2d[order(df2d$Slice),c(6,7,11)], 1:(row_number(df2d)-1))
df2d <-cbind(df2d[order(df2d$Slice),c(6,7,11)], 1:(dplyr::row_number(df2d)-1))
1:(dplyr::row_number(df2d)-1)
order(df2d$Slice),c(6,7,11)]
order(df2d$Slice)
df2d[order(df2d$Slice),c(6,7,11)]
df2d = do.call(dplyr::bind_rows, lapply(list_2D_files, function(x){
tb <- read.csv(x, sep=',', header = T, stringsAsFactors = F)
tb$filename <- basename(x)
return(tb)
}))
df2d
View(speed_annotated)
df2d = do.call(dplyr::bind_rows, lapply(list_2D_files, function(x){
tb <- read.csv(x, sep=',', header = T, stringsAsFactors = F)
tb$Filename <- basename(x)
return(tb)
}))
View(df2d)
df2d = do.call(dplyr::bind_rows, lapply(list_2D_files, function(x){
tb <- read.csv(x, sep=',', header = T, stringsAsFactors = F)
tb$Filename <- basename(x)
tb$isjunk <- (X.1 %% 2)
return(tb)
}))
df2d = do.call(dplyr::bind_rows, lapply(list_2D_files, function(x){
tb <- read.csv(x, sep=',', header = T, stringsAsFactors = F)
tb$Filename <- basename(x)
tb$isjunk <- (tb$X.1 %% 2)
return(tb)
}))
df2d = do.call(dplyr::bind_rows, lapply(list_2D_files, function(x){
tb <- read.csv(x, sep=',', header = T, stringsAsFactors = F)
tb$Filename <- basename(x)
tb <- mutate(tb, is_junk = (X.1 %% 2)))
df2d = do.call(dplyr::bind_rows, lapply(list_2D_files, function(x){
tb <- read.csv(x, sep=',', header = T, stringsAsFactors = F)
tb$Filename <- basename(x)
tb <- mutate(tb, is_junk = (X.1 %% 2))
return(tb)
}))
library(tidyverse)
df2d = do.call(dplyr::bind_rows, lapply(list_2D_files, function(x){
tb <- read.csv(x, sep=',', header = T, stringsAsFactors = F)
tb$Filename <- basename(x)
tb <- mutate(tb, is_junk = (X.1 %% 2))
return(tb)
}))
df2d = do.call(dplyr::bind_rows, lapply(list_2D_files, function(x){
tb <- read.csv(x, sep=',', header = T, stringsAsFactors = F)
tb$Filename <- basename(x)
tb <- tidyverse::mutate(tb, is_junk = (X.1 %% 2))
return(tb)
}))
df2d = do.call(dplyr::bind_rows, lapply(list_2D_files, function(x){
tb <- read.csv(x, sep=',', header = T, stringsAsFactors = F)
tb$Filename <- basename(x)
tb <- dplyr::mutate(tb, is_junk = (X.1 %% 2))
return(tb)
}))
dplyr::mutate
list_2D_files <- list.files(path = "Speeds2D_partial0108/")
setwd("Speeds2D_partial0108")
df2d = do.call(dplyr::bind_rows, lapply(list_2D_files, function(x){
tb <- read.csv(x, sep=',', header = T, stringsAsFactors = F)
tb$Filename <- basename(x)
tb <- dplyr::mutate(tb, is_junk = (X.1 %% 2))
return(tb)
}))
df2d
df2d = do.call(dplyr::bind_rows, lapply(list_2D_files, function(x){
tb <- read.csv(x, sep=',', header = T, stringsAsFactors = F)
tb$Filename <- basename(x)
tb <- dplyr::mutate(tb, is_junk = (X.1 %% 2))
return(tb)
}))
setwd("../")
getwd()
list_2D_files <- list.files(path = "Speeds2D_partial0108/")
setwd("Speeds2D_partial0108")
df2d = do.call(dplyr::bind_rows, lapply(list_2D_files, function(x){
tb <- read.csv(x, sep=',', header = T, stringsAsFactors = F)
tb$Filename <- basename(x)
tb <- dplyr::mutate(tb, is_junk = (X.1 %% 2))
return(tb)
}))
df2d
df2d[order(df2d$Slice),c(6,7,11:13)]
keyvars <-df2d[order(df2d$Slice),c(6,7,11:13)]
keyvars2D <-df2d[order(df2d$Slice),c(6,7,11:13)]
group_split(keyvars2D, is_junk)[[1]][,1:3]
dplyr::group_split(keyvars2D, is_junk)[[1]][,1:3]
keyvars2D
full_join(dplyr::group_split(keyvars2D, is_junk)[[1]][,c(4,1:3)],
dplyr::group_split(keyvars2D, is_junk)[[2]][,c(4,1:3)],
by=c("Slice"),
suffix= c("Zooid","Junk")) %>%
as.data.frame()
tidy2D <- dplyr::full_join(dplyr::group_split(keyvars2D, is_junk)[[1]][,c(4,1:3)],
dplyr::group_split(keyvars2D, is_junk)[[2]][,c(4,1:3)],
by=c("Slice"),
suffix= c("Zooid","Junk")) %>%
as.data.frame()
tidy2D
dplyr::full_join(dplyr::group_split(keyvars2D, is_junk)[[1]][,1:3],
dplyr::group_split(keyvars2D, is_junk)[[2]][,1:3],
by=c("Slice"),
suffix= c("Zooid","Junk")) %>%
as.data.frame()
dplyr::full_join(dplyr::group_split(keyvars2D, is_junk)[[1]][,1:3],
dplyr::group_split(keyvars2D, is_junk)[[2]][,1:3],
by=c("Filename","Slice"),
suffix= c("Zooid","Junk")) %>%
as.data.frame()
dplyr::full_join(dplyr::group_split(keyvars2D, is_junk)[[1]][,1:4],
dplyr::group_split(keyvars2D, is_junk)[[2]][,1:4],
by=c("Filename","Slice"),
suffix= c("Zooid","Junk")) %>%
as.data.frame()
names(tidy2D)[3]<-"Frame"
tidy2D <- tidy2D[,c(4,3,1,2,5,6)]
tidy2D
tidy2D <- dplyr::full_join(dplyr::group_split(keyvars2D, is_junk)[[1]][,1:4],
dplyr::group_split(keyvars2D, is_junk)[[2]][,1:4],
by=c("Filename","Slice"),
suffix= c("Zooid","Junk")) %>%
as.data.frame()
names(tidy2D)[3]<-"Frame"
tidy2D <- tidy2D[,c(4,3,1,2,5,6)]
tidy2D
tidy2D[order(tidy2D$Filename),c(4,3,1,2,5,6)]
head(read.csv("../Stereo_inventory_24July23.tsv", sep='\t', header = T, stringsAsFactors = F))
head(read.csv("../../Stereo_inventory_24July23.tsv", sep='\t', header = T, stringsAsFactors = F))
read.csv("~/Downloads/Salp Locomotion & Morphometrics Data - Video_inventory.tsv")
read.csv("~/Downloads/Salp Locomotion & Morphometrics Data - Video_inventory.tsv", sep='\t')
read.csv("~/Downloads/Salp Locomotion & Morphometrics Data - Video_inventory.tsv", sep='\t') %>% dplyr::filter(STEREO. == "No")
inventory2D <- read.csv("~/Downloads/Salp Locomotion & Morphometrics Data - Video_inventory.tsv", sep='\t') %>% dplyr::filter(STEREO. == "No" & !is.na(FPS))
inventory2D
inventory2D <- read.csv("~/Downloads/Salp Locomotion & Morphometrics Data - Video_inventory.tsv", sep='\t') %>%
dplyr::filter(STEREO. == "No" & !is.na(FPS)) %>%
.[,c("Video.name..or.master..or.left.","FPS")]
inventory2D
read.csv("~/Downloads/Salp Locomotion & Morphometrics Data - Video_inventory.csv") %>%
dplyr::filter(STEREO. == "No" & !is.na(FPS)) %>%
.[,c("Video.name..or.master..or.left.","FPS")]
read.csv("~/Downloads/Salp Locomotion & Morphometrics Data - Video_inventory.csv") %>%
dplyr::filter(!is.na(FPS)) %>%
.[,c("Video.name..or.master..or.left.","FPS")]
inventory2D <- read.csv("~/Downloads/Salp Locomotion & Morphometrics Data - Video_inventory.csv") %>%
dplyr::filter(STEREO. == "No" & !is.na(FPS)) %>%
.[,c("Video.name..or.master..or.left.","Species","Architecture","FPS")]
inventory2D
tidy2D
wrangle2D <- function(df){
df %>%
fps <- inventory2D[which(inventory2D$Video.name..or.master..or.left. == df$Filename),"FPS"]
mutate(Delta_time_s = (Frame - lag(Frame, default = first(Frame)))/fps) %>%
mutate(Xd_mm = XZooid - XJunk, Yd_mm = YZooid - YJunk) %>%
mutate(Delta_X_mm = Xd_mm - lag(Xd_mm, default = first(Xd_mm)),
Delta_Y_mm = Yd_mm - lag(Yd_mm, default = first(Yd_mm))) %>%
mutate(Distance_mm = sqrt(Delta_X_mm^2 + Delta_Y_mm^2)) %>%
mutate(Speed_mm_s = 0.1*Distance_mm/Delta_time_s) %>% return()
}
wrangle2D(tidy2D)
wrangle2D <- function(df){
fps <- inventory2D[which(inventory2D$Video.name..or.master..or.left. == df$Filename),"FPS"]
df %>% mutate(Delta_time_s = (Frame - lag(Frame, default = first(Frame)))/fps) %>%
mutate(Xd_mm = XZooid - XJunk, Yd_mm = YZooid - YJunk) %>%
mutate(Delta_X_mm = Xd_mm - lag(Xd_mm, default = first(Xd_mm)),
Delta_Y_mm = Yd_mm - lag(Yd_mm, default = first(Yd_mm))) %>%
mutate(Distance_mm = sqrt(Delta_X_mm^2 + Delta_Y_mm^2)) %>%
mutate(Speed_mm_s = 0.1*Distance_mm/Delta_time_s) %>% return()
}
speed_data2d <- wrangle2D(tidy2D)
mutate <- function(x){dplyr::mutate(x)}
speed_data2d <- wrangle2D(tidy2D)
tidy2D
46.18+48.74+40.13+28.39+38.88+13.99+1.43+13.23+51.06+57.33
names(inventory2D)
inventory2D
names(inventory2D)[1] <- "Filename"
inventory2D
left_join(tidy2D, inventory2D[,c(1,4)], by = "Filename")
dplyr::left_join(tidy2D, inventory2D[,c(1,4)], by = "Filename")
tidy2D
str_replace_all(tidy2D$Filename, ".csv", "")
tidy2D$Filename <- str_replace_all(tidy2D$Filename, ".csv", "")
dplyr::left_join(tidy2D, inventory2D[,c(1,4)], by = "Filename")
dplyr::left_join(tidy2D, inventory2D[,c(1,4)], by = "Filename") -> tidy2D
wrangle2D <- function(df){
df %>% mutate(Delta_time_s = (Frame - lag(Frame, default = first(Frame)))/FPS) %>%
mutate(Xd_mm = XZooid - XJunk, Yd_mm = YZooid - YJunk) %>%
mutate(Delta_X_mm = Xd_mm - lag(Xd_mm, default = first(Xd_mm)),
Delta_Y_mm = Yd_mm - lag(Yd_mm, default = first(Yd_mm))) %>%
mutate(Distance_mm = sqrt(Delta_X_mm^2 + Delta_Y_mm^2)) %>%
mutate(Speed_mm_s = 0.1*Distance_mm/Delta_time_s) %>% return()
}
speed_data2d <- wrangle2D(tidy2D)
tidy2Dmutate(Delta_time_s = (Frame - lag(Frame, default = first(Frame)))/FPS) %>%
mutate(Xd_mm = XZooid - XJunk, Yd_mm = YZooid - YJunk) %>%
mutate(Delta_X_mm = Xd_mm - lag(Xd_mm, default = first(Xd_mm)),
Delta_Y_mm = Yd_mm - lag(Yd_mm, default = first(Yd_mm)))
tidy2D %>% mutate(Delta_time_s = (Frame - lag(Frame, default = first(Frame)))/FPS)
tidy2D %>% dplyr::mutate(Delta_time_s = (Frame - lag(Frame, default = first(Frame)))/FPS)
library(dplyr)
wrangle2D <- function(df){
df %>% mutate(Delta_time_s = (Frame - lag(Frame, default = first(Frame)))/FPS) %>%
mutate(Xd_mm = XZooid - XJunk, Yd_mm = YZooid - YJunk) %>%
mutate(Delta_X_mm = Xd_mm - lag(Xd_mm, default = first(Xd_mm)),
Delta_Y_mm = Yd_mm - lag(Yd_mm, default = first(Yd_mm))) %>%
mutate(Distance_mm = sqrt(Delta_X_mm^2 + Delta_Y_mm^2)) %>%
mutate(Speed_mm_s = 0.1*Distance_mm/Delta_time_s) %>% return()
}
speed_data2d <- wrangle2D(tidy2D)
tidy2D %>% mutate(Delta_time_s = (Frame - lag(Frame, default = first(Frame)))/FPS)
